Program.Sub.ScreenSU.Start
Gui.FrmMaster..Create(DashForm)
Gui.FrmMaster..Size(19215,9990)
Gui.FrmMaster..MinX(15360)
Gui.FrmMaster..MinY(9390)
Gui.FrmMaster..Position(0,0)
Gui.FrmMaster..BackColor(-2147483633)
Gui.FrmMaster..MousePointer(0)
Gui.FrmMaster..Event(UnLoad,FrmMaster_UnLoad)
Gui.FrmMaster..Caption("Open Work Orders/Project (6271)")
Gui.FrmMaster..Event(Resize,FrmMaster_Resize)
Gui.FrmMaster..AlwaysOnTop(False)
Gui.FrmMaster..FontName("Tahoma")
Gui.FrmMaster..FontSize(8.25)
Gui.FrmMaster..ControlBox(True)
Gui.FrmMaster..MaxButton(True)
Gui.FrmMaster..MinButton(True)
Gui.FrmMaster..Moveable(True)
Gui.FrmMaster..Sizeable(True)
Gui.FrmMaster..ShowInTaskBar(True)
Gui.FrmMaster..TitleBar(True)
Gui.FrmMaster..BarRefreshButton(True)
Gui.FrmMaster..BarExportButton(True)
Gui.FrmMaster..Event(RefreshClick,FrmMaster_RefreshClick)
Gui.FrmMaster..Event(ExportClick,FrmMaster_ExportClick)
Gui.FrmMaster..BarAddButton("cmdBarProfile","Profile",v.Enum.Image!SETTINGS_COLOR,"","False")
Gui.FrmMaster..Event(UserButtonClicked,FrmMaster_UserButtonClicked)
Gui.FrmMaster..Event(UserTextBoxEditValueChanged,FrmMaster_UserTextBoxEditValueChanged)
Gui.FrmMaster..BarInternalButton(False)
Gui.FrmMaster..AccentColor(2)
Gui.FrmMaster..BarHelpButton(False,"","","",1.0.0,"1/01/0001 12:00:00 am","",0,0,False)
Gui.FrmMaster.prgBar.Create(ProgressBar)
Gui.FrmMaster.prgBar.Size(5400,285)
Gui.FrmMaster.prgBar.Position(150,45)
Gui.FrmMaster.prgBar.Visible(False)
Gui.FrmMaster.lblProgBarStatus.Create(Label,"Label",False,6240,2625,0,225,1200,True,0,"Tahoma",14,16777215,0,1)
Gui.FrmMaster.lblProgBarStatus.BorderStyle(0)
Gui.FrmMaster.lblProgBarStatus.ForeColor(16711680)
Gui.FrmMaster.gsgcExport.Create(GsGridControl)
Gui.FrmMaster.gsgcExport.Enabled(True)
Gui.FrmMaster.gsgcExport.Visible(False)
Gui.FrmMaster.gsgcExport.Zorder(0)
Gui.FrmMaster.gsgcExport.Size(2295,1215)
Gui.FrmMaster.gsgcExport.Position(4485,2805)
Gui.FrmMaster.tabProd.Create(Tab)
Gui.FrmMaster.tabProd.Size(19215,9000)
Gui.FrmMaster.tabProd.Position(0,0)
Gui.FrmMaster.tabProd.DefaultValue("All Work Orders")
Gui.FrmMaster.tabProd.Enabled(True)
Gui.FrmMaster.tabProd.Visible(False)
Gui.FrmMaster.tabProd.Zorder(0)
Gui.FrmMaster.tabProd.FontName("Tahoma")
Gui.FrmMaster.tabProd.FontSize(8.5)
Gui.FrmMaster.tabProd.Dock(5)
Gui.FrmMaster.tabProd.Tabs(4)
Gui.FrmMaster.tabProd.SetTab(0)
Gui.FrmMaster.tabProd.Caption("All Work Orders")
Gui.FrmMaster.tabProd.SetTab(1)
Gui.FrmMaster.tabProd.Caption("Materials")
Gui.FrmMaster.tabProd.SetTab(2)
Gui.FrmMaster.tabProd.Caption("Subcontract")
Gui.FrmMaster.tabProd.SetTab(3)
Gui.FrmMaster.tabProd.Caption("Work Center Priority")
Gui.FrmMaster.GsGCAll.Create(GsGridControl)
Gui.FrmMaster.GsGCAll.Size(16935,8565)
Gui.FrmMaster.GsGCAll.Position(2250,0)
Gui.FrmMaster.GsGCAll.Event(RowCellClick,GsGCAll_RowCellClick)
Gui.FrmMaster.GsGCAll.Event(CellValueChanged,GsGCAll_CellValueChanged)
Gui.FrmMaster.GsGCAll.Parent("tabProd",0)
Gui.FrmMaster.GsGCAll.dock(5)
Gui.FrmMaster.GsGCAll.Enabled(True)
Gui.FrmMaster.GsGCAll.Visible(True)
Gui.FrmMaster.GsGCAll.Zorder(0)
Gui.FrmMaster.accAllWO.Create(AccordionControl)
Gui.FrmMaster.accAllWO.Enabled(True)
Gui.FrmMaster.accAllWO.Visible(True)
Gui.FrmMaster.accAllWO.Size(2250,8565)
Gui.FrmMaster.accAllWO.Position(0,0)
Gui.FrmMaster.accAllWO.Minimized(True)
Gui.FrmMaster.accAllWO.Parent("tabProd",0)
Gui.FrmMaster.accAllWO.Dock(3)
Gui.FrmMaster.accAllWO.Event(ElementClick,accAllWO_ElementClick)
Gui.FrmMaster.accAllWO.AddElement(aceAllCloseSeq,"Close WO Seq","icon_functions_black",240,240,,-1,0,"",False,True,False,1)
Gui.FrmMaster.accAllWO.AddElement(aceAllCompleteTask,"Complete Task","icon_functions_black",240,240,,-1,0,"",False,True,False,1)
Gui.FrmMaster.accAllWO.AddElement(aceAllNewWO,"New WO","icon_functions_black",240,240,,-1,0,"",False,True,False,1)
Gui.FrmMaster.gsgcAllM.Create(GsGridControl)
Gui.FrmMaster.gsgcAllM.Enabled(True)
Gui.FrmMaster.gsgcAllM.Visible(True)
Gui.FrmMaster.gsgcAllM.Zorder(0)
Gui.FrmMaster.gsgcAllM.Size(19185,8565)
Gui.FrmMaster.gsgcAllM.Position(0,0)
Gui.FrmMaster.gsgcAllM.Dock(5)
Gui.FrmMaster.gsgcAllM.Parent("tabProd",1)
Gui.FrmMaster.gsgcAllM.Event(RowCellClick,gsgcAllM_RowCellClick)
Gui.FrmMaster.gsgcAllM.Event(CellValueChanged,gsgcAllM_CellValueChanged)
Gui.FrmMaster.gsgcAllM.Event(KeyPress,gsgcAllM_KeyPress)
Gui.FrmMaster.accMat.Create(AccordionControl)
Gui.FrmMaster.accMat.Enabled(True)
Gui.FrmMaster.accMat.Visible(True)
Gui.FrmMaster.accMat.Size(2565,8565)
Gui.FrmMaster.accMat.Position(0,0)
Gui.FrmMaster.accMat.Minimized(True)
Gui.FrmMaster.accMat.Parent("tabProd",1)
Gui.FrmMaster.accMat.Dock(3)
Gui.FrmMaster.accMat.Event(ElementClick,accMat_ElementClick)
Gui.FrmMaster.accMat.AddElement(aceMatAutoPO,"Automated Purchasing","icon_functions_black",240,240,,-1,0,"",False,True,False,1)
Gui.FrmMaster.accMat.AddElement(aceIssueMat,"Issue Material","icon_functions_black",240,240,,-1,0,"",False,True,False,1)
Gui.FrmMaster.gsgcAllO.Create(GsGridControl)
Gui.FrmMaster.gsgcAllO.Enabled(True)
Gui.FrmMaster.gsgcAllO.Visible(True)
Gui.FrmMaster.gsgcAllO.Zorder(0)
Gui.FrmMaster.gsgcAllO.Size(15285,8565)
Gui.FrmMaster.gsgcAllO.Position(3900,0)
Gui.FrmMaster.gsgcAllO.Parent("tabProd",2)
Gui.FrmMaster.gsgcAllO.Dock(5)
Gui.FrmMaster.gsgcAllO.Event(RowCellClick,gsgcAllO_RowCellClick)
Gui.FrmMaster.gsgcAllO.Event(CellValueChanged,gsgcAllO_CellValueChanged)
Gui.FrmMaster.gsgcAllO.Event(KeyPress,gsgcAllO_KeyPress)
Gui.FrmMaster.accOut.Create(AccordionControl)
Gui.FrmMaster.accOut.Enabled(True)
Gui.FrmMaster.accOut.Visible(True)
Gui.FrmMaster.accOut.Size(2580,8565)
Gui.FrmMaster.accOut.Position(0,0)
Gui.FrmMaster.accOut.Minimized(True)
Gui.FrmMaster.accOut.Event(ElementClick,accOut_ElementClick)
Gui.FrmMaster.accOut.Dock(3)
Gui.FrmMaster.accOut.Parent("tabProd",2)
Gui.FrmMaster.accOut.AddElement(aceOutAutoPO,"Automated Purchasing","icon_functions_black",240,240,,-1,0,"",False,True,False,1)
Gui.FrmMaster.gsgcOper.Create(GsGridControl)
Gui.FrmMaster.gsgcOper.Size(19185,8565)
Gui.FrmMaster.gsgcOper.Position(0,0)
Gui.FrmMaster.gsgcOper.Event(RowCellClick,gsgcOper_RowCellClick)
Gui.FrmMaster.gsgcOper.Parent("tabProd",3)
Gui.FrmMaster.gsgcOper.Dock(5)
Gui.FrmMaster.gsgcOper.Enabled(True)
Gui.FrmMaster.gsgcOper.Visible(True)
Gui.FrmMaster.gsgcOper.Zorder(0)
Gui.FrmMaster.lblDateUpdated.Create(Label,"",True,15,270,0,10245,870,True,1,"Arial",8,-2147483633,0,0)
Gui.FrmMaster.lblDateUpdated.BorderStyle(0)
Gui.FrmMaster.chkClosed.Create(CheckBox)
Gui.FrmMaster.chkClosed.Size(1170,300)
Gui.FrmMaster.chkClosed.Position(9705,60)
Gui.FrmMaster.chkClosed.Caption("Closed WOs")
Gui.FrmMaster.chkClosed.Enabled(True)
Gui.FrmMaster.chkClosed.Visible(True)
Gui.FrmMaster.chkClosed.Zorder(1)
Gui.FrmMaster.chkClosed.FontName("Tahoma")
Gui.FrmMaster.chkClosed.FontSize(7)
Gui.FrmMaster.framePermissions.Create(Frame)
Gui.FrmMaster.framePermissions.Size(3390,345)
Gui.FrmMaster.framePermissions.Position(15765,30)
Gui.FrmMaster.framePermissions.Enabled(True)
Gui.FrmMaster.framePermissions.Visible(True)
Gui.FrmMaster.framePermissions.Zorder(1)
Gui.FrmMaster.framePermissions.Caption("")
Gui.FrmMaster.framePermissions.FontName("Tahoma")
Gui.FrmMaster.framePermissions.FontSize(8.25)
Gui.FrmMaster.optWiptoFG.Create(Option)
Gui.FrmMaster.optWiptoFG.Size(1110,255)
Gui.FrmMaster.optWiptoFG.Position(2265,90)
Gui.FrmMaster.optWiptoFG.Caption("WIP to FG")
Gui.FrmMaster.optWiptoFG.Enabled(False)
Gui.FrmMaster.optWiptoFG.Parent("framePermissions")
Gui.FrmMaster.optWiptoFG.Visible(True)
Gui.FrmMaster.optWiptoFG.Zorder(1)
Gui.FrmMaster.optWiptoFG.FontName("Tahoma")
Gui.FrmMaster.optWiptoFG.FontSize(8.25)
Gui.FrmMaster.optView.Create(Option)
Gui.FrmMaster.optView.Size(720,240)
Gui.FrmMaster.optView.Position(75,90)
Gui.FrmMaster.optView.Caption("View")
Gui.FrmMaster.optView.Parent("framePermissions")
Gui.FrmMaster.optView.Enabled(True)
Gui.FrmMaster.optView.Visible(True)
Gui.FrmMaster.optView.Zorder(1)
Gui.FrmMaster.optView.FontName("Tahoma")
Gui.FrmMaster.optView.FontSize(8.25)
Gui.FrmMaster.optEdit.Create(Option)
Gui.FrmMaster.optEdit.Enabled(False)
Gui.FrmMaster.optEdit.Size(645,270)
Gui.FrmMaster.optEdit.Position(810,90)
Gui.FrmMaster.optEdit.Caption("Edit")
Gui.FrmMaster.optEdit.Parent("framePermissions")
Gui.FrmMaster.optEdit.Visible(True)
Gui.FrmMaster.optEdit.Zorder(1)
Gui.FrmMaster.optEdit.FontName("Tahoma")
Gui.FrmMaster.optEdit.FontSize(8.25)
Gui.FrmMaster.optIssue.Create(Option)
Gui.FrmMaster.optIssue.Size(765,255)
Gui.FrmMaster.optIssue.Position(1470,90)
Gui.FrmMaster.optIssue.Caption("Issue")
Gui.FrmMaster.optIssue.Enabled(False)
Gui.FrmMaster.optIssue.Parent("framePermissions")
Gui.FrmMaster.optIssue.Visible(True)
Gui.FrmMaster.optIssue.Zorder(1)
Gui.FrmMaster.optIssue.FontName("Tahoma")
Gui.FrmMaster.optIssue.FontSize(8.25)
Gui.FrmMaster.cmdSerialize.Create(Button)
Gui.FrmMaster.cmdSerialize.Enabled(True)
Gui.FrmMaster.cmdSerialize.Visible(False)
Gui.FrmMaster.cmdSerialize.Zorder(0)
Gui.FrmMaster.cmdSerialize.Size(1125,345)
Gui.FrmMaster.cmdSerialize.Position(4875,1095)
Gui.FrmMaster.cmdSerialize.Caption("Serialize")
Gui.FrmMaster.cmdSerialize.FontName("Tahoma")
Gui.FrmMaster.cmdSerialize.FontSize(8.25)
Gui.FrmMaster.cmdSerialize.Event(Click,cmdSerialize_Click)
Gui.FrmMaster.cmdDeserialize.Create(Button)
Gui.FrmMaster.cmdDeserialize.Enabled(True)
Gui.FrmMaster.cmdDeserialize.Visible(False)
Gui.FrmMaster.cmdDeserialize.Zorder(0)
Gui.FrmMaster.cmdDeserialize.Size(1125,345)
Gui.FrmMaster.cmdDeserialize.Position(6135,1095)
Gui.FrmMaster.cmdDeserialize.Caption("Deserialize")
Gui.FrmMaster.cmdDeserialize.FontName("Tahoma")
Gui.FrmMaster.cmdDeserialize.FontSize(8.25)
Gui.FrmMaster.cmdDeserialize.Event(Click,cmdDeserialize_Click)
Gui.FrmMaster.cmdSaveOutput.Create(Button)
Gui.FrmMaster.cmdSaveOutput.Enabled(True)
Gui.FrmMaster.cmdSaveOutput.Visible(False)
Gui.FrmMaster.cmdSaveOutput.Zorder(0)
Gui.FrmMaster.cmdSaveOutput.Size(1125,345)
Gui.FrmMaster.cmdSaveOutput.Position(7395,1110)
Gui.FrmMaster.cmdSaveOutput.Caption("Save Output")
Gui.FrmMaster.cmdSaveOutput.FontName("Tahoma")
Gui.FrmMaster.cmdSaveOutput.FontSize(8.25)
Gui.FrmMaster.cmdSaveOutput.Event(Click,cmdSaveOutput_Click)
Gui.FrmMaster.txtCustomer.Create(TextBox,"",True,885,300,0,5595,45,True,0,"Tahoma",8,,1)
Gui.FrmMaster.txtCustomer.ToolTip("Enter Customer Code")
Gui.FrmMaster.txtSO.Create(TextBox,"",True,930,300,0,7185,45,True,0,"Tahoma",8,,1)
Gui.FrmMaster.txtSO.ToolTip("Enter Sales Order")
Gui.FrmMaster.cmdBrowseCust.Create(Button)
Gui.FrmMaster.cmdBrowseCust.Enabled(True)
Gui.FrmMaster.cmdBrowseCust.Visible(True)
Gui.FrmMaster.cmdBrowseCust.Zorder(0)
Gui.FrmMaster.cmdBrowseCust.Size(525,300)
Gui.FrmMaster.cmdBrowseCust.Position(6525,45)
Gui.FrmMaster.cmdBrowseCust.Caption("^")
Gui.FrmMaster.cmdBrowseCust.FontName("Tahoma")
Gui.FrmMaster.cmdBrowseCust.FontSize(8)
Gui.FrmMaster.cmdBrowseCust.Event(Click,cmdBrowseCust_Click)
Gui.FrmMaster.cmdBrowseSO.Create(Button)
Gui.FrmMaster.cmdBrowseSO.Enabled(True)
Gui.FrmMaster.cmdBrowseSO.Visible(True)
Gui.FrmMaster.cmdBrowseSO.Zorder(0)
Gui.FrmMaster.cmdBrowseSO.Size(540,300)
Gui.FrmMaster.cmdBrowseSO.Position(8160,45)
Gui.FrmMaster.cmdBrowseSO.Caption("^")
Gui.FrmMaster.cmdBrowseSO.FontName("Tahoma")
Gui.FrmMaster.cmdBrowseSO.FontSize(8)
Gui.FrmMaster.cmdBrowseSO.Event(Click,cmdBrowseSO_Click)
Gui.FrmMaster.cmdProcess.Create(Button)
Gui.FrmMaster.cmdProcess.Enabled(True)
Gui.FrmMaster.cmdProcess.Visible(True)
Gui.FrmMaster.cmdProcess.Zorder(0)
Gui.FrmMaster.cmdProcess.Size(765,300)
Gui.FrmMaster.cmdProcess.Position(8790,45)
Gui.FrmMaster.cmdProcess.Caption("Process")
Gui.FrmMaster.cmdProcess.FontName("Tahoma")
Gui.FrmMaster.cmdProcess.FontSize(8)
Gui.FrmMaster.cmdProcess.Event(Click,cmdProcess_Click)
Gui.FrmMaster.chkCacheFiles.Create(CheckBox)
Gui.FrmMaster.chkCacheFiles.Enabled(True)
Gui.FrmMaster.chkCacheFiles.Visible(True)
Gui.FrmMaster.chkCacheFiles.Zorder(1)
Gui.FrmMaster.chkCacheFiles.Size(1470,300)
Gui.FrmMaster.chkCacheFiles.Position(10950,45)
Gui.FrmMaster.chkCacheFiles.Caption("Use Cache Files")
Gui.FrmMaster.chkCacheFiles.FontName("Tahoma")
Gui.FrmMaster.chkCacheFiles.FontSize(7)
Gui.FrmMaster.chkCacheFiles.Event(Change,chkCacheFiles_Change)
Gui.FrmMaster.chkPurQtyCond.Create(CheckBox)
Gui.FrmMaster.chkPurQtyCond.Enabled(True)
Gui.FrmMaster.chkPurQtyCond.Visible(True)
Gui.FrmMaster.chkPurQtyCond.Zorder(1)
Gui.FrmMaster.chkPurQtyCond.Size(2175,300)
Gui.FrmMaster.chkPurQtyCond.Position(12450,45)
Gui.FrmMaster.chkPurQtyCond.Caption("Purch Full Qty on WO Seq")
Gui.FrmMaster.chkPurQtyCond.FontName("Tahoma")
Gui.FrmMaster.chkPurQtyCond.FontSize(7)
Gui.FrmMaster.lookupVendor.Create(Lookup)
Gui.FrmMaster.lookupVendor.Enabled(True)
Gui.FrmMaster.lookupVendor.PopulateMode(4)
Gui.FrmMaster.lookupVendor.Title("GSS Lookup")
Gui.FrmMaster.lookupVendor.StringBasis("")
Gui.FrmMaster.lookupVendor.FileBasis("")
Gui.FrmMaster.lookupVendor.ColumnDelim("")
Gui.FrmMaster.lookupVendor.RowDelim("")
Gui.FrmMaster.lookupVendor.PreferredStyle(1)
Gui.FrmMaster.lookupVendor.Event(SelectionMade,lookupVendor_SelectionMade)
Gui.FrmMaster.lookupVendorOut.Create(Lookup)
Gui.FrmMaster.lookupVendorOut.Enabled(True)
Gui.FrmMaster.lookupVendorOut.PopulateMode(4)
Gui.FrmMaster.lookupVendorOut.Title("GSS Lookup")
Gui.FrmMaster.lookupVendorOut.StringBasis("")
Gui.FrmMaster.lookupVendorOut.FileBasis("")
Gui.FrmMaster.lookupVendorOut.ColumnDelim("")
Gui.FrmMaster.lookupVendorOut.RowDelim("")
Gui.FrmMaster.lookupVendorOut.PreferredStyle(1)
Gui.FrmMaster.lookupVendorOut.Event(SelectionMade,lookupVendorOut_SelectionMade)
Gui.FrmMaster.lookupVendorQuote.Create(Lookup)
Gui.FrmMaster.lookupVendorQuote.Enabled(True)
Gui.FrmMaster.lookupVendorQuote.PopulateMode(4)
Gui.FrmMaster.lookupVendorQuote.Title("GSS Lookup")
Gui.FrmMaster.lookupVendorQuote.StringBasis("")
Gui.FrmMaster.lookupVendorQuote.FileBasis("")
Gui.FrmMaster.lookupVendorQuote.ColumnDelim("")
Gui.FrmMaster.lookupVendorQuote.RowDelim("")
Gui.FrmMaster.lookupVendorQuote.PreferredStyle(1)
Gui.FrmMaster.lookupVendorQuote.Event(SelectionMade,lookupVendorQuote_SelectionMade)
Gui.FrmMaster.lookupVendorQuoteOut.Create(Lookup)
Gui.FrmMaster.lookupVendorQuoteOut.Enabled(True)
Gui.FrmMaster.lookupVendorQuoteOut.PopulateMode(4)
Gui.FrmMaster.lookupVendorQuoteOut.Title("GSS Lookup")
Gui.FrmMaster.lookupVendorQuoteOut.StringBasis("")
Gui.FrmMaster.lookupVendorQuoteOut.FileBasis("")
Gui.FrmMaster.lookupVendorQuoteOut.ColumnDelim("")
Gui.FrmMaster.lookupVendorQuoteOut.RowDelim("")
Gui.FrmMaster.lookupVendorQuoteOut.PreferredStyle(1)
Gui.FrmMaster.lookupVendorQuoteOut.Event(SelectionMade,lookupVendorQuoteOut_SelectionMade)
Gui.frmMulti..Create(BaseForm)
Gui.frmMulti..Caption("Work Order: ")
Gui.frmMulti..Size(7845,7230)
Gui.frmMulti..MinX(0)
Gui.frmMulti..MinY(0)
Gui.frmMulti..Position(0,0)
Gui.frmMulti..BackColor(-2147483633)
Gui.frmMulti..MousePointer(0)
Gui.frmMulti..Event(UnLoad,frmMulti_UnLoad)
Gui.frmMulti..AlwaysOnTop(False)
Gui.frmMulti..FontName("Tahoma")
Gui.frmMulti..FontSize(8.25)
Gui.frmMulti..ControlBox(True)
Gui.frmMulti..MaxButton(True)
Gui.frmMulti..MinButton(True)
Gui.frmMulti..Moveable(True)
Gui.frmMulti..Sizeable(True)
Gui.frmMulti..ShowInTaskBar(True)
Gui.frmMulti..TitleBar(True)
Gui.frmMulti.GsGCMulti.Create(GsGridControl)
Gui.frmMulti.GsGCMulti.Size(7710,6930)
Gui.frmMulti.GsGCMulti.Position(0,0)
Gui.frmMulti.GsGCMulti.Enabled(True)
Gui.frmMulti.GsGCMulti.Visible(True)
Gui.frmMulti.GsGCMulti.Zorder(0)
Gui.frmNewWO..Create(BaseForm)
Gui.frmNewWO..Caption("New Work Order")
Gui.frmNewWO..Size(4425,1770)
Gui.frmNewWO..MinX(0)
Gui.frmNewWO..MinY(0)
Gui.frmNewWO..Position(0,0)
Gui.frmNewWO..BackColor(-2147483633)
Gui.frmNewWO..MaxButton(False)
Gui.frmNewWO..MinButton(False)
Gui.frmNewWO..MousePointer(0)
Gui.frmNewWO..Sizeable(False)
Gui.frmNewWO..Event(UnLoad,frmNewWO_UnLoad)
Gui.frmNewWO..AlwaysOnTop(False)
Gui.frmNewWO..FontName("Tahoma")
Gui.frmNewWO..FontSize(8.25)
Gui.frmNewWO..ControlBox(True)
Gui.frmNewWO..Moveable(True)
Gui.frmNewWO..ShowInTaskBar(True)
Gui.frmNewWO..TitleBar(True)
Gui.frmNewWO.cmdManualWO.Create(Button)
Gui.frmNewWO.cmdManualWO.Size(4155,375)
Gui.frmNewWO.cmdManualWO.Position(90,60)
Gui.frmNewWO.cmdManualWO.Caption("New Work Order")
Gui.frmNewWO.cmdManualWO.Event(Click,cmdManualWO_Click)
Gui.frmNewWO.cmdManualWO.Enabled(True)
Gui.frmNewWO.cmdManualWO.Visible(True)
Gui.frmNewWO.cmdManualWO.Zorder(0)
Gui.frmNewWO.cmdManualWO.FontName("Tahoma")
Gui.frmNewWO.cmdManualWO.FontSize(8.25)
Gui.frmNewWO.cmdAutoWO.Create(Button)
Gui.frmNewWO.cmdAutoWO.Size(4170,375)
Gui.frmNewWO.cmdAutoWO.Position(90,480)
Gui.frmNewWO.cmdAutoWO.Caption("Automated Work Order Generation")
Gui.frmNewWO.cmdAutoWO.Event(Click,cmdAutoWO_Click)
Gui.frmNewWO.cmdAutoWO.Enabled(True)
Gui.frmNewWO.cmdAutoWO.Visible(True)
Gui.frmNewWO.cmdAutoWO.Zorder(0)
Gui.frmNewWO.cmdAutoWO.FontName("Tahoma")
Gui.frmNewWO.cmdAutoWO.FontSize(8.25)
Gui.frmProfileLayout..Create(BaseForm)
Gui.frmProfileLayout..Caption("Profile Layout")
Gui.frmProfileLayout..Size(13560,7755)
Gui.frmProfileLayout..MinX(0)
Gui.frmProfileLayout..MinY(0)
Gui.frmProfileLayout..Position(0,0)
Gui.frmProfileLayout..AlwaysOnTop(False)
Gui.frmProfileLayout..FontName("Tahoma")
Gui.frmProfileLayout..FontSize(8.25)
Gui.frmProfileLayout..ControlBox(True)
Gui.frmProfileLayout..MaxButton(True)
Gui.frmProfileLayout..MinButton(True)
Gui.frmProfileLayout..MousePointer(0)
Gui.frmProfileLayout..Moveable(True)
Gui.frmProfileLayout..Sizeable(True)
Gui.frmProfileLayout..ShowInTaskBar(True)
Gui.frmProfileLayout..TitleBar(True)
Gui.frmProfileLayout..Event(UnLoad,frmProfileLayout_UnLoad)
Gui.frmProfileLayout.frameProfileLayout1.Create(Frame)
Gui.frmProfileLayout.frameProfileLayout1.Enabled(True)
Gui.frmProfileLayout.frameProfileLayout1.Visible(True)
Gui.frmProfileLayout.frameProfileLayout1.Zorder(0)
Gui.frmProfileLayout.frameProfileLayout1.Size(13560,810)
Gui.frmProfileLayout.frameProfileLayout1.Position(0,0)
Gui.frmProfileLayout.frameProfileLayout1.Caption("Select Profile")
Gui.frmProfileLayout.frameProfileLayout1.FontName("Tahoma")
Gui.frmProfileLayout.frameProfileLayout1.FontSize(8.25)
Gui.frmProfileLayout.frameProfileLayout1.Dock(1)
Gui.frmProfileLayout.frameProfileLayout1.BorderStyle(1)
Gui.frmProfileLayout.txtProfileLayout.Create(TextBox,"",True,4095,300,0,105,450,True,0,"Tahoma",8.25,,1)
Gui.frmProfileLayout.txtProfileLayout.Parent("frameProfileLayout1")
Gui.frmProfileLayout.txtProfileLayout.MaxLength(50)
Gui.frmProfileLayout.txtProfileLayout.Event(LostFocus,txtProfileLayout_LostFocus)
Gui.frmProfileLayout.cmdProfileLayout.Create(Button)
Gui.frmProfileLayout.cmdProfileLayout.Enabled(True)
Gui.frmProfileLayout.cmdProfileLayout.Visible(True)
Gui.frmProfileLayout.cmdProfileLayout.Zorder(0)
Gui.frmProfileLayout.cmdProfileLayout.Size(330,300)
Gui.frmProfileLayout.cmdProfileLayout.Position(4275,450)
Gui.frmProfileLayout.cmdProfileLayout.Caption("")
Gui.frmProfileLayout.cmdProfileLayout.FontName("Tahoma")
Gui.frmProfileLayout.cmdProfileLayout.FontSize(8.25)
Gui.frmProfileLayout.cmdProfileLayout.Parent("frameProfileLayout1")
Gui.frmProfileLayout.cmdProfileLayout.SvgPicture("icon_query_color")
Gui.frmProfileLayout.cmdProfileLayout.Event(Click,cmdProfileLayout_Click)
Gui.frmProfileLayout.cmdDeleteProfile.Create(Button)
Gui.frmProfileLayout.cmdDeleteProfile.Enabled(True)
Gui.frmProfileLayout.cmdDeleteProfile.Visible(True)
Gui.frmProfileLayout.cmdDeleteProfile.Zorder(0)
Gui.frmProfileLayout.cmdDeleteProfile.Size(705,345)
Gui.frmProfileLayout.cmdDeleteProfile.Position(4890,420)
Gui.frmProfileLayout.cmdDeleteProfile.Caption("Delete")
Gui.frmProfileLayout.cmdDeleteProfile.FontName("Tahoma")
Gui.frmProfileLayout.cmdDeleteProfile.FontSize(8.25)
Gui.frmProfileLayout.cmdDeleteProfile.Parent("frameProfileLayout1")
Gui.frmProfileLayout.cmdDeleteProfile.Event(Click,cmdDeleteProfile_Click)
Gui.frmProfileLayout.txtProfile_ID.Create(TextBox,"",False,1500,300,0,6135,435,True,0,"Tahoma",8.25,,1)
Gui.frmProfileLayout.txtProfile_ID.Parent("frameProfileLayout1")
Gui.frmProfileLayout.splitProfileLayout.Create(SplitContainer)
Gui.frmProfileLayout.splitProfileLayout.Enabled(True)
Gui.frmProfileLayout.splitProfileLayout.Visible(True)
Gui.frmProfileLayout.splitProfileLayout.Zorder(0)
Gui.frmProfileLayout.splitProfileLayout.Size(13560,6495)
Gui.frmProfileLayout.splitProfileLayout.Position(0,810)
Gui.frmProfileLayout.splitProfileLayout.Orientation(0)
Gui.frmProfileLayout.splitProfileLayout.SplitterPosition(6390)
Gui.frmProfileLayout.splitProfileLayout.Collapsed(False)
Gui.frmProfileLayout.splitProfileLayout.Dock(5)
Gui.frmProfileLayout.gsgcUsers.Create(GsGridControl)
Gui.frmProfileLayout.gsgcUsers.Enabled(True)
Gui.frmProfileLayout.gsgcUsers.Visible(True)
Gui.frmProfileLayout.gsgcUsers.Zorder(0)
Gui.frmProfileLayout.gsgcUsers.Size(6675,6495)
Gui.frmProfileLayout.gsgcUsers.Position(0,0)
Gui.frmProfileLayout.gsgcUsers.Parent("splitProfileLayout",1)
Gui.frmProfileLayout.gsgcUsers.Dock(5)
Gui.frmProfileLayout.gsgcUsers.Event(CellValueChanged,gsgcUsers_CellValueChanged)
Gui.frmProfileLayout.gsgcColumns.Create(GsGridControl)
Gui.frmProfileLayout.gsgcColumns.Enabled(True)
Gui.frmProfileLayout.gsgcColumns.Visible(True)
Gui.frmProfileLayout.gsgcColumns.Zorder(0)
Gui.frmProfileLayout.gsgcColumns.Size(6390,6495)
Gui.frmProfileLayout.gsgcColumns.Position(0,0)
Gui.frmProfileLayout.gsgcColumns.Parent("splitProfileLayout",0)
Gui.frmProfileLayout.gsgcColumns.Dock(5)
Gui.frmProfileLayout.gsgcColumns.Event(CellValueChanged,gsgcColumns_CellValueChanged)
Gui.frmProfileLayout.lbl1.Create(Label,"*Only Standard users without a Profile Layout appear in the list",True,4590,195,0,8805,480,True,0,"Tahoma",8.25,,0,0)
Gui.frmProfileLayout.lbl1.BorderStyle(0)
Gui.frmProfileLayout.lbl1.FontStyle(False,True,False,False,False)
Gui.frmProfileLayout.lbl1.ForeColor(255)
Gui.frmProfileLayout.lbl1.Anchor(9)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.bExists.Declare
V.Global.iPrintAudit.Declare
V.Global.bLongPart.Declare
V.Global.bLoadData.Declare

v.Global.bEditWO.Declare(boolean)
v.Global.bEditSO.Declare(boolean)
v.Global.bEditPart.Declare(boolean)
v.Global.bViewWO.Declare(boolean)
v.Global.bViewSO.Declare(boolean)
v.Global.bViewPart.Declare(boolean)
v.Global.bReplUpdReschedUtility.Declare(boolean)
v.Global.bIssue.Declare(boolean)
v.Global.bWipToFG.Declare(boolean)
v.Global.bPONotes.Declare(boolean)

v.Global.sSalesPerson.Declare(string)
v.Global.sCustomers.Declare(string)
v.Global.sProjects.Declare(string)
v.Global.sPhases.Declare(string)
v.Global.sSQLQueries.Declare(string)
v.Global.sRows.Declare(string)
v.Global.sCustomer.Declare
v.Global.sSalesOrder.Declare
v.Global.iVendRow.Declare
V.Global.sComCurr.Declare(String)

V.Global.sGabPoApproval.Declare(String,"")
V.Global.bCreatePO.Declare(boolean)
V.Global.bEditPO.Declare(boolean)
V.Global.bCloseWOSeq.Declare(boolean)
V.Global.bTasksSignoff.Declare(boolean)
V.Global.bCreateNewWO.Declare(boolean)
V.Global.bCacheFileExists.Declare(Boolean)
V.Global.bUseRevision.Declare(Boolean)
V.Global.iWorkDayMask.Declare(Long)
V.Global.bOnlyAllowApprovedVendor.Declare(Boolean)
V.Global.bUseProdLineFromWO.Declare(Boolean)
V.Global.sWIPAcct.Declare(String)
V.Global.bDataLoaded.Declare(Boolean)
V.Global.bProfileLayoutFormActive.Declare(Boolean)
V.Global.iProfileID.Declare(Long)
V.Global.bUserTypeAdministrator.Declare(Boolean)
V.Global.sInvUser1Define.Declare(String)

Program.External.Include.Library("PPT_Canny.lib")
Program.External.Include.Library("2003.lib")
Program.External.Include.Library("175200.lib")
Program.External.Include.Library("UPLPUROR_6271.lib")
Program.External.Include.Library("450150.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sIcon.Declare
	V.Local.sGssLogo.Declare
	v.Local.sRet.Declare
	V.Local.iCnt.Declare
	V.Local.bDayActive.Declare
	V.Local.sQuery.Declare
	v.Local.sUserID.Declare
	v.Local.bExist.Declare
	
	'Open company connection
	F.ODBC.Connection!con.opencompanyconnection(1800)
	
	'Open common connection
	f.ODBC.Connection!CommonCon.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)
	
	gui.FrmMaster.prgBar.Max(45)
	gui.FrmMaster.prgBar.Scrolling(False)
	
	'Get Base Currency
	F.Global.General.ReadOption("000000",1,"","0000",V.Global.sComCurr)
	
	'Get whether using Revision Level
	F.Global.General.ReadOption(70008,0,False,0,V.Global.bUseRevision)
	
	'Get Manufacturing - Material Scheduling Days
	F.Intrinsic.Control.For(V.Local.iCnt,0,6,1)
		F.Global.General.ReadOption(401144,0,False,V.Local.iCnt,V.Local.bDayActive)
		F.Intrinsic.Control.If(V.Local.bDayActive)
			F.Intrinsic.Control.SelectCase(V.Local.iCnt)
				F.Intrinsic.Control.Case(0)		'Sunday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,1,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(1)		'Monday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,2,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(2)		'Tuesday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,4,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(3)		'Wednesday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,8,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(4)		'Thursday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,16,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(5)		'Friday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,32,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(6)		'Saturday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,64,V.Global.iWorkDayMask)
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	'Check whether 'Only Allow Purchases from Approved Suppliers' is activated
	F.Global.General.ReadOption(401911,0,False,0,V.Global.bOnlyAllowApprovedVendor)
	
	'Check whether 'Use Product Line from Job Header for Outise and Non-inventory Purchase to Job' is activated
	F.Global.General.ReadOption(401929,0,False,0,V.Global.bUseProdLineFromWO)
	
	'Get the WIP Account in Company Options (Standard) > Inventory Accounting Options > Purchasing Options
	F.Global.General.ReadOption("400294",1,"",0,v.Global.sWIPAcct)
	
	'Get the Inventory User 1 Define Field in Company Options (Advanced) > Inventory 
	F.Global.General.ReadOption("400398",1,"User 1 Defined",0,v.Global.sInvUser1Define)
	
	'Check and make sure custom tables exist
	F.Intrinsic.Control.CallSub(CheckTable)
	
	'GSS Logo
	F.Intrinsic.String.Build("{0}\ART\gss2.ico",V.Caller.GlobalDir,v.Local.sIcon)
	'Gui.frmWeb..Icon(V.Local.sIcon)
	Gui.FrmMaster..Icon(V.Local.sIcon)
	Gui.frmNewWO..Icon(V.Local.sIcon)
	
	'Set anchors and check long part
	F.Intrinsic.Control.CallSub(CheckLongPart)
	
	'Check Print Audit Option
	F.Global.General.ReadOption(400367,3,0000,V.Global.iPrintAudit)
	
	'Load Vendors
	F.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
		F.Intrinsic.String.Build("Select A.NAME_VENDOR, RTRIM(A.VENDOR) As VENDOR,COALESCE(IF(RTRIM(LTRIM(B.Default_Currency))='','{0}',B.Default_Currency),'{0}') AS VendorCurrency From V_Vendor_Master A Left Join V_Vendor_Intl B ON A.Vendor = B.Vendor Left Join V_Vendor_Addl C ON C.Vendor = A.Vendor Where A.Vendor <> '' AND C.APPROVED_SUPPL = 'Y' Order By A.Name_Vendor;",V.Global.sComCurr,V.Local.sQuery)
		f.Data.DataTable.CreateFromSQL("dtVendors","con",V.Local.sQuery,true)	
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Select A.NAME_VENDOR, RTRIM(A.VENDOR) As VENDOR,COALESCE(IF(RTRIM(LTRIM(B.Default_Currency))='','{0}',B.Default_Currency),'{0}') AS VendorCurrency From V_Vendor_Master A Left Join V_Vendor_Intl B ON A.Vendor = B.Vendor Where A.Vendor <> '' Order By A.Name_Vendor;",V.Global.sComCurr,V.Local.sQuery)
		f.Data.DataTable.CreateFromSQL("dtVendors","con",V.Local.sQuery,true)	
	F.Intrinsic.Control.EndIf
	gui.FrmMaster.lookupVendor.DataTableBasis("dtVendors")
	gui.FrmMaster.lookupVendorOut.DataTableBasis("dtVendors")
	
	'Check PO/WO Note Option
	f.ODBC.Connection!con.ExecuteAndReturn("SELECT F_BOOLEAN FROM OP_HEADER WHERE ID='080001' AND SEQUENCE='0001'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sret.trim,=,"1")
		v.global.bPONotes.Set(true)
	f.Intrinsic.Control.EndIf
	
	'General Options
	gui.FrmMaster.tabProd.SetTab(0)
	Gui.FrmMaster.optEdit.Value(False)
	Gui.FrmMaster.optView.Value(True)
	Gui.FrmMaster.framePermissions.Anchor(9)
	f.Intrinsic.UI.SetBrowserHotTypeAhead(true)
	
	'Check PO Approval GAB
	F.Intrinsic.Control.CallSub(CheckPurchaseOrderApproval)
	
	'Check User Permissions
	f.Intrinsic.Control.CallSub(CheckPermissions)
	
	'Check whether the custom tables exist
	f.ODBC.Connection!con.TableExists("GAB_6271_PROF",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist,=,False)
		f.ODBC.Connection!con.Execute("CREATE TABLE GAB_6271_PROF(PROFILE_ID IDENTITY NOT NULL,DESCRIPTION VARCHAR(50) NOT NULL, PRIMARY KEY (PROFILE_ID));")
	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!con.TableExists("GAB_6271_PROF_LAYOUT",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist,=,False)
		f.ODBC.Connection!con.Execute("CREATE TABLE GAB_6271_PROF_LAYOUT(PROFILE_ID INTEGER NOT NULL,GRID VARCHAR(50) NOT NULL,GRIDVIEW VARCHAR(50) NOT NULL,COLUMN_NAME VARCHAR(50) NOT NULL);")
	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!con.TableExists("GAB_6271_PROF_USER",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist,=,False)
		f.ODBC.Connection!con.Execute("CREATE TABLE GAB_6271_PROF_USER(PROFILE_ID INTEGER NOT NULL,USER_ID INTEGER NOT NULL,GS_USER CHAR(8) NOT NULL,RESET_LAYOUT BIT NOT NULL,DELETE_PROFILE BIT NOT NULL);")
	f.Intrinsic.Control.EndIf
	
	'Set Character Casing for txtProfileLayout to UpperCase
	gui.frmProfileLayout.txtProfileLayout.CharacterCasing(1)
	
	'If user's Menu Type in User Security Maintenance is Administrator then show the Profile Layout button. Otherwise, hide the button
	f.Intrinsic.String.Build("select USER_ID, GS_USER, MENU_TYPE from USER_INFORMATION where (COMPANY = '' or COMPANY = '{0}') and GS_USER = '{1}' and MENU_TYPE = '4';",v.Caller.CompanyCode,v.Caller.User,v.Local.sQuery)
	f.ODBC.Connection!CommonCon.OpenLocalRecordsetRO("rst",v.Local.sQuery)
	f.Intrinsic.Control.If(v.ODBC.CommonCon!rst.EOF)
		gui.FrmMaster..BarRemoveButton("cmdBarProfile")
		v.Global.bUserTypeAdministrator.Set(False)
	f.Intrinsic.Control.Else
		v.Global.bUserTypeAdministrator.Set(True)
	f.Intrinsic.Control.EndIf
	f.ODBC.CommonCon!rst.Close
	
	'Set whether to purchase the WO Qty Required or the remaining Qty Required on the WO
	f.Intrinsic.Control.CallSub(SetPurQtyConditionFlag)
	
	'Check Profile Layout
	f.Intrinsic.String.Build("select * from GAB_6271_PROF_USER where GS_USER = '{0}';",v.Caller.User,v.Local.sQuery)
	f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
	f.Intrinsic.Control.If(v.ODBC.con!rst.EOF,<>,True)
		v.Global.iProfileID.Set(v.ODBC.con!rst.FieldVal!PROFILE_ID)
		v.Local.sRet.Set(v.ODBC.con!rst.FieldVal!RESET_LAYOUT)
		f.Intrinsic.Control.If(v.ODBC.con!rst.FieldVal!RESET_LAYOUT,=,True)
			'Delete old registry records
			F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.sUserID)
			f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = {0} and Company = '{1}' and Reg_ID = 6271 and Seq <= 1000;",v.Local.sUserID,v.Caller.CompanyCode,v.Local.sQuery)
			F.ODBC.Connection!CommonCon.Execute(V.Local.sQuery)
			'Update RESET_LAYOUT to False
			f.Intrinsic.String.Build("update GAB_6271_PROF_USER set RESET_LAYOUT = 0 Where USER_ID = {0} and PROFILE_ID = {1};",v.Local.sUserID.Long,v.ODBC.con!rst.FieldVal!PROFILE_ID,v.Local.sQuery)
			f.ODBC.Connection!con.Execute(v.Local.sQuery)
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(v.ODBC.con!rst.FieldVal!DELETE_PROFILE,=,True)
			f.Intrinsic.String.Build("Delete From GAB_6271_PROF_USER Where GS_USER = '{0}' and PROFILE_ID = {1};",v.Caller.User,v.ODBC.con!rst.FieldVal!PROFILE_ID,v.Local.sQuery)
			f.ODBC.Connection!con.Execute(v.Local.sQuery)
			v.Global.iProfileID.Set(0)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		v.Global.iProfileID.Set(0)
	f.Intrinsic.Control.EndIf
	f.ODBC.con!rst.Close
				
	'Prevent the form from using DarkTheme
	F.Intrinsic.Task.SetEnvironmentVariable("USEDARKTHEME",False)
	Gui.FrmMaster..ApplyTheme()
	Gui.frmMulti..ApplyTheme()
	Gui.frmNewWO..ApplyTheme()
	
	f.Intrinsic.Control.CallSub(CheckCacheFiles)
	f.Intrinsic.Control.If(v.Global.bCacheFileExists)
		f.Intrinsic.String.Build("Open Work Orders/Project (6271) --- Process Time: {0}",v.Args.CacheFileDateTime,v.Local.sRet)
		Gui.FrmMaster..Caption(v.Local.sRet)
		Gui.FrmMaster.chkCacheFiles.Value(True)
	f.Intrinsic.Control.Else
		Gui.FrmMaster..Caption("Open Work Orders/Project (6271)")
		Gui.FrmMaster.chkCacheFiles.Value(False)
	f.Intrinsic.Control.EndIf

	'Show Form and add context menus
	Gui.FrmMaster..Show
	F.Intrinsic.Control.CallSub(SetContextMenus)
	Gui.FrmMaster.txtCustomer.SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.SetPurQtyConditionFlag.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.bPurQtyCond.Declare
	
	'Read from Registry for user's preference on Purchase Qty Condition
	f.Global.Registry.ReadValue(v.Caller.User,v.Caller.CompanyCode,"PurQtyConditionFlag",6271,1000,0,False,v.Local.bPurQtyCond)

	'Set the checkbox for Purchase Qty Condition
	gui.FrmMaster.chkPurQtyCond.Value(v.Local.bPurQtyCond)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry	
Program.Sub.SetPurQtyConditionFlag.End

Program.Sub.CheckPurchaseOrderApproval.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sRet.Declare
	
	'Check whether GAB 5326 PO Approval is active in New PO Hook (15170)
	F.ODBC.Connection!con.ExecuteAndReturn("select '5326' as GAB_PO_APRVL from HOOK_ASSOCIATION where ID = '000015170' and ACTIVE_FLAG = 'A' and SCRIPT_NAME like 'GAB_5326_PO_APPROVAL%'",V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		V.Global.sGabPoApproval.Set(V.Local.sRet.Trim)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.sGabPoApproval,=,"")
		'Check whether GAB 5339 PO Approval is active in New PO Hook (15170)
		F.ODBC.Connection!con.ExecuteAndReturn("select '5339' as GAB_PO_APRVL from HOOK_ASSOCIATION where ID = '000015170' and ACTIVE_FLAG = 'A' and SCRIPT_NAME like 'GAB_5339_PO_APPROVAL%'",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			V.Global.sGabPoApproval.Set(V.Local.sRet.Trim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.sGabPoApproval,=,"")
		'Check whether GAB 6228 PO Approval is active in New PO Hook (15170)
		F.ODBC.Connection!con.ExecuteAndReturn("select '6228' as GAB_PO_APRVL from HOOK_ASSOCIATION where ID = '000015170' and ACTIVE_FLAG = 'A' and SCRIPT_NAME like 'GAB_6228_PO_APPROVAL%'",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			V.Global.sGabPoApproval.Set(V.Local.sRet.Trim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry	
Program.Sub.CheckPurchaseOrderApproval.End

Program.Sub.GeneratePoApproval.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sPO.Declare
	V.Local.sSql.Declare
	V.Local.sInsertSql.Declare
	V.Local.datePO.Declare
	V.Local.dateDue.Declare
	V.Local.sVendor.Declare
	V.Local.fAmount.Declare
	V.Local.sUser.Declare
	V.Local.fUserAmountLimit.Declare
	V.Local.sDate.Declare
	
	V.Local.sUser.Set(V.Caller.User.Trim)
	V.Local.sPO.Set(V.Args.PO)
	F.Intrinsic.String.Build("SELECT a.PURCHASE_ORDER, a.DATE_ORDER, a.DATE_DUE, a.VENDOR, CAST(ISNULL(sum(b.qty_order*(((1-b.discount)*b.cost_6_dec)+b.pur_tax_per_piece)),0) AS DECIMAL(18,2)) as Amount FROM V_PO_HEADER a LEFT JOIN V_PO_LINES b ON a.PURCHASE_ORDER = b.PURCHASE_ORDER Where a.PURCHASE_ORDER = '{0}' group by a.PURCHASE_ORDER, a.DATE_ORDER, a.DATE_DUE, a.VENDOR;",V.Local.sPO,V.Local.sSql)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPO",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.con!rstPO.EOF,=,False)
		V.Local.datePO.Set(V.ODBC.con!rstPO.FieldVal!DATE_ORDER)
		V.Local.dateDue.Set(V.ODBC.con!rstPO.FieldVal!DATE_DUE)
		V.Local.sVendor.Set(V.ODBC.con!rstPO.FieldValTrim!VENDOR)
		V.Local.fAmount.Set(V.ODBC.con!rstPO.FieldVal!Amount)
	F.Intrinsic.Control.Else
		V.Local.datePO.Set(V.Ambient.Date)
		V.Local.dateDue.Set(V.Ambient.Date)
		V.Local.sVendor.Set("")
		V.Local.fAmount.Set(0.00)
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstPO.Close
	
	V.Local.sSql.Set("")
	F.Intrinsic.Control.SelectCase(V.Global.sGabPoApproval)
		F.Intrinsic.Control.Case("5326")
			F.Intrinsic.String.Build("SELECT AMOUNT_LIMIT FROM GAB_5326_DOL_LMT WHERE RTRIM(GS_USER) = '{0}';",V.Local.sUser,V.Local.sSql)
			F.ODBC.Connection!con.OpenLocalRecordSetRO("rst",V.Local.sSql)
			F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
				V.Local.fUserAmountLimit.Set(-1.00)
			F.Intrinsic.Control.Else
				V.Local.fUserAmountLimit.Set(V.ODBC.con!rst.FieldValFloat!AMOUNT_LIMIT)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rst.Close
			F.Intrinsic.String.Concat("SELECT * FROM GAB_5326_APRVL WHERE purchase_order = '",V.Local.sPO,"'",V.Local.sSql)
			F.Intrinsic.Control.If(V.Local.fAmount,=,0.00)
				F.Intrinsic.String.Build("insert into GAB_5326_APRVL(purchase_order,date_order,vendor,amount,date_due,originator,approver,approved_date) values('{0}','{1}','{2}',{3},'{4}','{5}','{6}','{7}')",V.Local.sPO,V.Local.datePO.PervasiveDate,V.Local.sVendor.Trim,V.Local.fAmount,V.Local.dateDue.PervasiveDate,V.Local.sUser,"","1900-01-01",V.Local.sInsertSql)
			F.Intrinsic.Control.ElseIf(V.Local.fUserAmountLimit,>=,V.Local.fAmount)
				F.Intrinsic.String.Format(V.Ambient.Now,"YYYY-MM-DD HH:NN:SS",V.Local.sDate)
				F.Intrinsic.String.Build("insert into GAB_5326_APRVL(purchase_order,date_order,vendor,amount,date_due,originator,approver,approved_date) values('{0}','{1}','{2}',{3},'{4}','{5}','{6}','{7}')",V.Local.sPO,V.Local.datePO.PervasiveDate,V.Local.sVendor.Trim,V.Local.fAmount,V.Local.dateDue.PervasiveDate,V.Local.sUser,V.Local.sUser,V.Local.sDate,V.Local.sInsertSql)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("insert into GAB_5326_APRVL(purchase_order,date_order,vendor,amount,date_due,originator,approver,approved_date) values('{0}','{1}','{2}',{3},'{4}','{5}','{6}','{7}')",V.Local.sPO,V.Local.datePO.PervasiveDate,V.Local.sVendor.Trim,V.Local.fAmount,V.Local.dateDue.PervasiveDate,V.Local.sUser,"","1900-01-01",V.Local.sInsertSql)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Case("5339")
			F.Intrinsic.String.Concat("SELECT * FROM GAB_5339_APRVL WHERE purchase_order = '",V.Local.sPO,"'",V.Local.sSql)
			F.Intrinsic.String.Build("insert into GAB_5339_APRVL(purchase_order,date_order,vendor,amount,date_due,originator,approver,approved_date,reviewer_1,reviewed_1_date,reviewer_2,reviewed_2_date) values('{0}','{1}','{2}',{3},'{4}','{5}','{6}','{7}','{6}','{7}','{6}','{7}')",V.Local.sPO,V.Local.datePO.PervasiveDate,V.Local.sVendor.Trim,V.Local.fAmount,V.Local.dateDue.PervasiveDate,V.Local.sUser,"","1900-01-01",V.Local.sInsertSql)
		F.Intrinsic.Control.Case("6228")
			F.Intrinsic.String.Concat("SELECT * FROM GAB_6228_APRVL WHERE purchase_order = '",V.Local.sPO,"'",V.Local.sSql)
			F.Intrinsic.String.Build("insert into GAB_6228_APRVL(purchase_order,date_order,vendor,amount,date_due,originator,approver,approved_date,reviewer_1,reviewed_1_date,reviewer_2,reviewed_2_date) values('{0}','{1}','{2}',{3},'{4}','{5}','{6}','{7}','{6}','{7}','{6}','{7}')",V.Local.sPO,V.Local.datePO.PervasiveDate,V.Local.sVendor.Trim,V.Local.fAmount,V.Local.dateDue.PervasiveDate,V.Local.sUser,"","1900-01-01",V.Local.sInsertSql)
	F.Intrinsic.Control.EndSelect
	
	F.Intrinsic.Control.If(V.Local.sSql,<>,"")
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rst",V.Local.sSql)
		F.Intrinsic.Control.If(V.ODBC.con!rst.EOF,=,True)
			F.ODBC.Connection!con.Execute(V.Local.sInsertSql)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rst.Close
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry	
Program.Sub.GeneratePoApproval.End

Program.Sub.setOperData.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtOperIds.RowCount--,1)
		F.Data.DataTable.SetValue("dtOper",v.DataTable.dtOperIds(v.Local.i).RowID!fieldval,v.Args.OperColumn.Trim,v.Args.OperValue)
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.setOperData.End

Program.Sub.setAllMData.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllMIds.RowCount--,1)
		F.Intrinsic.Control.If(Variable.Datatable.dtAllMIds(Variable.Local.i).RowID!fieldval,<>,"***NORETURN***")
			F.Data.DataTable.SetValue("dtAllM",v.DataTable.dtAllMIds(v.Local.i).RowID!fieldval,v.Args.MatlColumn.Trim,v.Args.MatlValue)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.setAllMData.End

Program.Sub.setAllOData.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllOIds.RowCount--,1)
		F.Intrinsic.Control.If(Variable.Datatable.dtAllOIds(Variable.Local.i).RowID!fieldval,<>,"***NORETURN***")
			F.Data.DataTable.SetValue("dtAllO",v.DataTable.dtAllOIds(v.Local.i).RowID!fieldval,v.Args.OutsColumn.Trim,v.Args.OutsValue)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.setAllOData.End

Program.Sub.ProgramDataCacheFile.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.bActive.Declare
	v.Local.sSQL.Declare
	v.Local.sFile.Declare
	v.Local.sMainFilter.Declare
	v.Local.sFilter.Declare
	v.Local.sfilematl.Declare
	v.Local.sfilelabr.Declare
	v.Local.sfileouts.Declare
	v.Local.sRet.Declare
	
	gui.FrmMaster.prgBar.Value(1)
	Gui.FrmMaster.lblProgBarStatus.Caption("Reading from cache files...")
	
	F.Intrinsic.Control.If(V.DataTable.dtAll.Exists,=,True)
		F.Data.DataTable.Close("dtAll")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtAllTemp.Exists,=,True)
		F.Data.DataTable.Close("dtAllTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAll_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtAllTemp",v.Local.sfile,True)
		
	F.Intrinsic.Control.If(V.DataTable.dtOper.Exists,=,True)
		f.Data.DataTable.Close("dtOper")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtOperTemp.Exists,=,True)
		f.Data.DataTable.Close("dtOperTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtOper_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtOperTemp",v.Local.sfile,True)
	
	F.Intrinsic.Control.If(V.DataTable.dtAllO.Exists,=,True)
		f.Data.DataTable.Close("dtAllO")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtAllOTemp.Exists,=,True)
		f.Data.DataTable.Close("dtAllOTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllO_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtAllOTemp",v.Local.sfile,True)
	
	F.Intrinsic.Control.If(V.DataTable.dtAllM.Exists,=,True)
		f.Data.DataTable.Close("dtAllM")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtAllMTemp.Exists,=,True)
		f.Data.DataTable.Close("dtAllMTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllM_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtAllMTemp",v.Local.sfile,True)
	
	F.Intrinsic.Control.If(V.DataTable.dtAll2$dtChildMat.Exists,=,True)
		f.Data.DataTable.Close("dtAll2$dtChildMat")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtChildMatTemp.Exists,=,True)
		f.Data.DataTable.Close("dtChildMatTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildMat_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtChildMatTemp",v.Local.sfile,True)
	
	F.Intrinsic.Control.If(V.DataTable.dtAll2$dtChildLabr.Exists,=,True)
		f.Data.DataTable.Close("dtAll2$dtChildLabr")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtChildLabrTemp.Exists,=,True)
		f.Data.DataTable.Close("dtChildLabrTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildLabr_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtChildLabrTemp",v.Local.sfile,True)
	
	F.Intrinsic.Control.If(V.DataTable.dtAll2$dtChildOuts.Exists,=,True)
		f.Data.DataTable.Close("dtAll2$dtChildOuts")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtChildOutsTemp.Exists,=,True)
		f.Data.DataTable.Close("dtChildOutsTemp")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildOuts_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.CreateFromXML("dtChildOutsTemp",v.Local.sfile,True)
	
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkClosed.Value,=,"1")
		v.Local.bActive.Set(False)
	f.Intrinsic.Control.Else
		v.Local.bActive.Set(True)
	f.Intrinsic.Control.EndIf
	
	v.Local.sMainFilter.Set("")
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
		v.Local.sMainFilter.Set("")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
		f.Intrinsic.String.Build("CUSTOMER = '{0}'",v.Args.Customer.Trim,v.Local.sMainFilter)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("CUSTOMER = '{0}' AND SALES_ORDER = '{1}'",v.Args.Customer.Trim,v.Args.SalesOrder.Trim,v.Local.sMainFilter)
	f.Intrinsic.Control.EndIf
	
	'update the query accordingly and create datatable
	'For all records
	gui.FrmMaster.prgBar.Value(10)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting all records...")
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("dtAllTemp","dvAllTemp",22,v.Local.sFilter,"")
	f.Data.DataView.ToDataTable("dtAllTemp","dvAllTemp","dtAll",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtAll","JobClosed")
	f.Data.DataTable.RemoveColumn("dtAll","CUSTOMER")
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtAllTemp")
	
	'For workcentre dispatch
	gui.FrmMaster.prgBar.Value(13)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting work center dispatch...")
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("dtOperTemp","dvOperTemp",22,v.Local.sFilter,"SEQRES ASC, DAYS_LATE ASC")
	f.Data.DataView.ToDataTable("dtOperTemp","dvOperTemp","dtOper",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtOper","JobClosed")
	f.Data.DataTable.RemoveColumn("dtOper","CUSTOMER")
	'Create View
	f.Data.DataView.Create("dtOper","dvOper",22,"","SEQRES ASC, DAYS_LATE ASC")
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtOperTemp")
	
	'TDJOHAN - TEST
'	'Create DataTable for PO & PO Line
'	f.Data.DataTable.CreateFromSQL("dtPurchaseOrderLine","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, IF(LTRIM(RTRIM(EXCHANGE_CURR)) = '' OR LTRIM(RTRIM(EXCHANGE_CURR)) = 'USD', COST_6_DEC, EXCHANGE_COST2) AS PO_COST from V_PO_LINES where JOB <> '' order by JSS")
'	'Create Dictionary Purchase Order
'	f.Data.Dictionary.CreateFromDataTable("dPurchOrder","dtPurchaseOrderLine","JSS","PURCHASE_ORDER")
'	f.Data.Dictionary.SetDefaultReturn("dPurchOrder","")
'	'Create Dictionary Purchase Order Line
'	f.Data.Dictionary.CreateFromDataTable("dPurchOrderLine","dtPurchaseOrderLine","JSS","LINE")
'	f.Data.Dictionary.SetDefaultReturn("dPurchOrderLine","")
'	'Create Dictionary Purchase Order Line Purchase Cost
'	f.Data.Dictionary.CreateFromDataTable("dPurchOrderCost","dtPurchaseOrderLine","JSS","PO_COST")
'	f.Data.Dictionary.SetDefaultReturn("dPurchOrderCost","")
'	
'	'Create Dictionary for PO Line Text
'	f.Data.Dictionary.CreateFromSQL("dPurchOrderLineText","con","select CONCAT(PO_NUM,LEFT(LINE,3)) AS PLN, TEXT from PO_LN_TEXT where LTRIM(RTRIM(TEXT)) <> '' order by PLN")
'	f.Data.Dictionary.SetDefaultReturn("dPurchOrderLineText","")
	'TDJOHAN - TEST
	
	'For material list
	gui.FrmMaster.prgBar.Value(17)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting materials...")
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("dtAllMTemp","dvAllMTemp",22,v.Local.sFilter,"")
	f.Data.DataView.ToDataTable("dtAllMTemp","dvAllMTemp","dtAllM",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtAllM","JobClosed")
	f.Data.DataTable.RemoveColumn("dtAllM","SeqClosed")
'	f.Data.DataTable.RemoveColumn("dtAllM","CUSTOMER")
'	f.Data.DataTable.RemoveColumn("dtAllM","EXTENSION")
	
	'Calculate the Purchase Qty
	'if Purchase according to WO Required Qty is active then Purchase Qty = WO Required Qty
	'Also convert to Purchase UM if the UM is different
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
		f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSTOPROD] / [PUR_CNV_FACTOR], [PCSTOPROD])")
	f.Intrinsic.Control.Else
		f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSREMAIN] / [PUR_CNV_FACTOR], [PCSREMAIN])")
	f.Intrinsic.Control.EndIf
	
	'Needs the Pur Qty to be in two decimals for correct Extension Amount
	f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQtyInteger","Long","[CalcPurQty]*100")
	f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQtyTwoDecimal","Float","[CalcPurQtyInteger]/100")
	
	f.Data.DataTable.CopyColumn("dtAllM","CalcPurQtyTwoDecimal","PUR_QTY")
	
	f.Data.DataTable.RemoveColumn("dtAllM","CalcPurQtyTwoDecimal")
	f.Data.DataTable.RemoveColumn("dtAllM","CalcPurQtyInteger")
	f.Data.DataTable.RemoveColumn("dtAllM","CalcPurQty")
	
	'Add Expression Column
'	F.Data.DataTable.AddExpressionColumn("dtAllM","EXTENSION","Float","COST*PCSTOPROD")
	F.Data.DataTable.AddExpressionColumn("dtAllM","EXTENSION","Float","COST*PUR_QTY")
	
	'TDJOHAN - TEST
'	'Fill PO, PO Line, PO Cost from dictionary
'	f.Data.DataTable.FillFromDictionary("dtAllM","dPurchOrder","JSS","PURCHASE_ORDER")
'	f.Data.DataTable.FillFromDictionary("dtAllM","dPurchOrderLine","JSS","LINE")
'	f.Data.DataTable.FillFromDictionary("dtAllM","dPurchOrderCost","JSS","PO_COST")
'	'Add Column Purchase Order + Purchase Order Line
'	f.Data.DataTable.AddExpressionColumn("dtAllM","PLN","String","PURCHASE_ORDER + LINE")
'	f.Data.DataTable.FillFromDictionary("dtAllM","dPurchOrderLineText","PLN","TEXT")
'	'Remove unwanted columns
'	f.Data.DataTable.RemoveColumn("dtAllM","PLN")
	'TDJOHAN - TEST
	
	'Create View
	f.Data.DataView.Create("dtAllM","dvAllM",22,"","")
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtAllMTemp")
	
	'For outside list
	gui.FrmMaster.prgBar.Value(22)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting outside services...")
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("dtAllOTemp","dvAllOTemp",22,v.Local.sFilter,"")
	f.Data.DataView.ToDataTable("dtAllOTemp","dvAllOTemp","dtAllO",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtAllO","JobClosed")
	f.Data.DataTable.RemoveColumn("dtAllO","SeqClosed")
'	f.Data.DataTable.RemoveColumn("dtAllO","CUSTOMER")
'	f.Data.DataTable.RemoveColumn("dtAllO","EXTENSION")
	
	'Calculate the Purchase Qty
	'if Purchase according to WO Required Qty is active then Purchase Qty = WO Required Qty
	'Also convert to Purchase UM if the UM is different
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
		f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSTOPROD] / [PUR_CNV_FACTOR], [PCSTOPROD])")
	f.Intrinsic.Control.Else
		f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSREMAIN] / [PUR_CNV_FACTOR], [PCSREMAIN])")
	f.Intrinsic.Control.EndIf
	
	'Needs the Pur Qty to be in two decimals for correct Extension Amount
	f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQtyInteger","Long","[CalcPurQty]*100")
	f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQtyTwoDecimal","Float","[CalcPurQtyInteger]/100")
	
	f.Data.DataTable.CopyColumn("dtAllO","CalcPurQtyTwoDecimal","PUR_QTY")
	
	f.Data.DataTable.RemoveColumn("dtAllO","CalcPurQtyTwoDecimal")
	f.Data.DataTable.RemoveColumn("dtAllO","CalcPurQtyInteger")
	f.Data.DataTable.RemoveColumn("dtAllO","CalcPurQty")
	
	'Add Expression Column 'Extension'
'	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PCSTOPROD")
'	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PCSREMAIN")
	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PUR_QTY")
	
	'TDJOHAN - TEST
'	'Fill PO, PO Line from dictionary
'	f.Data.DataTable.FillFromDictionary("dtAllO","dPurchOrder","JSS","PURCHASE_ORDER")
'	f.Data.DataTable.FillFromDictionary("dtAllO","dPurchOrderLine","JSS","LINE")
'	f.Data.DataTable.FillFromDictionary("dtAllO","dPurchOrderCost","JSS","PO_COST")
'	'Add Column Purchase Order + Purchase Order Line
'	f.Data.DataTable.AddExpressionColumn("dtAllO","PLN","String","PURCHASE_ORDER + LINE")
'	f.Data.DataTable.FillFromDictionary("dtAllO","dPurchOrderLineText","PLN","TEXT")
'	'Remove unwanted columns
'	f.Data.DataTable.RemoveColumn("dtAllO","PLN")
	'TDJOHAN - TEST
	
	'Create View
	f.Data.DataView.Create("dtAllO","dvAllO",22,"","")
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtAllOTemp")
	
	'Create dtAll2 from dtAll
	F.Intrinsic.Control.If(V.DataTable.dtAll2.Exists,=,True)
		F.Data.DataTable.Close("dtAll2")
	F.Intrinsic.Control.EndIf
	f.Data.DataView.Create("dtAll","dvAll")
	F.Data.DataView.ToDataTable("dtAll","dvAll","dtAll2",True)
		
' 	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewMatl.xml",v.Local.sfilematl)
' 	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewLabr.xml",v.Local.sfilelabr)
' 	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewOuts.xml",v.Local.sfileouts)
	
	'Add temp column to dtAll2, 
	F.Data.DataTable.AddColumn("dtAll2","WOExists","Boolean",True)
	'Create Dictionary
	F.Data.Dictionary.CreateFromDataTable("dictWO","dtAll2","JS","WOExists")
	F.Data.Dictionary.SetDefaultReturn("dictWO",False)
	
	gui.FrmMaster.prgBar.Value(28)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting child materials...")
	'Materials
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'Add temp column
	F.Data.DataTable.AddColumn("dtChildMatTemp","WOExists","Boolean")
	'Fill the DataTable from Dictionary
	F.Data.DataTable.FillFromDictionary("dtChildMatTemp","dictWO","JS","WOExists")
	'Add criteria to Filter
	F.Intrinsic.String.Concat(v.Local.sFilter," AND WOExists = True",v.Local.sFilter)
	'Create Dataview based on the Filter
	f.Data.DataView.Create("dtChildMatTemp","dvChildMatTemp",22,v.Local.sFilter,"")
	f.Data.DataView.ToDataTable("dtChildMatTemp","dvChildMatTemp","dtAll2$dtChildMat",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildMat","JobClosed")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildMat","SeqClosed")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildMat","CUSTOMER")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildMat","SALES_ORDER")
	'TDJOHAN - TEST
'	'Fill PO, PO Line from dictionary
'	f.Data.DataTable.FillFromDictionary("dtAll2$dtChildMat","dPurchOrder","JSS","PURCHASE_ORDER")
'	f.Data.DataTable.FillFromDictionary("dtAll2$dtChildMat","dPurchOrderLine","JSS","LINE")
	'TDJOHAN - TEST
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtChildMatTemp")
	'Delete Columns
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildMat","WOExists")
	'Create Dataview and AddRelation to the parent record
	f.Data.DataView.Create("dtAll2$dtChildMat","dvMatl")
	f.Data.DataTable.AddRelation("dtAll2","JS","dtAll2$dtChildMat","JS","Material")
	
	gui.FrmMaster.prgBar.Value(33)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting child labors...")
	'Labour
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'Add temp column
	F.Data.DataTable.AddColumn("dtChildLabrTemp","WOExists","Boolean")
	'Fill the DataTable from Dictionary
	F.Data.DataTable.FillFromDictionary("dtChildLabrTemp","dictWO","JS","WOExists")
	'Add criteria to Filter
	F.Intrinsic.String.Concat(v.Local.sFilter," AND WOExists = True",v.Local.sFilter)
	'Create Dataview based on the Filter
	f.Data.DataView.Create("dtChildLabrTemp","dvChildLabrTemp",22,v.Local.sFilter,"")
	f.Data.DataView.ToDataTable("dtChildLabrTemp","dvChildLabrTemp","dtAll2$dtChildLabr",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildLabr","JobClosed")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildLabr","SeqClosed")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildLabr","CUSTOMER")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildLabr","SALES_ORDER")
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtChildLabrTemp")
	'Delete Columns
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildLabr","WOExists")
	'Create Dataview and AddRelation to the parent record
	f.Data.DataView.Create("dtAll2$dtChildLabr","dvLabr")
	f.Data.DataTable.AddRelation("dtAll2","JS","dtAll2$dtChildLabr","JS","Labour")
	
	gui.FrmMaster.prgBar.Value(38)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting child outside services...")
	'Outside
	v.Local.sFilter.Set("")
	f.Intrinsic.Control.If(v.Local.bActive)
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'N'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'N'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.If(v.Local.sMainFilter.Trim,=,"")
			v.Local.sFilter.Set("JobClosed = 'Y'")
		f.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0} AND JobClosed = 'Y'",v.Local.sMainFilter,v.Local.sFilter)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'Add temp column
	F.Data.DataTable.AddColumn("dtChildOutsTemp","WOExists","Boolean")
	'Fill the DataTable from Dictionary
	F.Data.DataTable.FillFromDictionary("dtChildOutsTemp","dictWO","JS","WOExists")
	'Add criteria to Filter
	F.Intrinsic.String.Concat(v.Local.sFilter," AND WOExists = True",v.Local.sFilter)
	'Create Dataview based on the Filter
	f.Data.DataView.Create("dtChildOutsTemp","dvChildOutsTemp",22,v.Local.sFilter,"")
	f.Data.DataView.ToDataTable("dtChildOutsTemp","dvChildOutsTemp","dtAll2$dtChildOuts",true)
	'Remove unwanted columns
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildOuts","JobClosed")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildOuts","SeqClosed")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildOuts","CUSTOMER")
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildOuts","SALES_ORDER")
	'TDJOHAN - TEST
'	'Fill PO, PO Line from dictionary
'	f.Data.DataTable.FillFromDictionary("dtAll2$dtChildOuts","dPurchOrder","JSS","PURCHASE_ORDER2")
'	f.Data.DataTable.FillFromDictionary("dtAll2$dtChildOuts","dPurchOrderLine","JSS","LINE2")
	'TDJOHAN - TEST
	'Delete Temp DataTable
	f.Data.DataTable.Close("dtChildOutsTemp")
	'Delete Columns
	f.Data.DataTable.RemoveColumn("dtAll2$dtChildOuts","WOExists")
	'Create Dataview and AddRelation to the parent record
	f.Data.DataView.Create("dtAll2$dtChildOuts","dvOuts")
	f.Data.DataTable.AddRelation("dtAll2","JS","dtAll2$dtChildOuts","JS","Outside")
	
	'Remove temp column from dtAll2, 
	F.Data.DataTable.RemoveColumn("dtAll2","WOExists")
	'Close Dictionary
	F.Data.Dictionary.Close("dictWO")
	
	'TDJOHAN - TEST
'	'Remove Dictionary
'	f.Data.Dictionary.Close("dPurchOrder")
'	f.Data.Dictionary.Close("dPurchOrderLine")
'	f.Data.Dictionary.Close("dPurchOrderLineText")
'	f.Data.Dictionary.Close("dPurchOrderCost")
	'TDJOHAN - TEST
	
'	'Save them to an xml file temporarily
'	f.Data.DataTable.SaveToXML("dtChildMat",0,true,v.Local.sfileMatl)
'	f.Data.DataTable.SaveToXML("dtChildLabr",0,true,v.Local.sfilelabr)
'	f.Data.DataTable.SaveToXML("dtChildOuts",0,true,v.Local.sfileouts)
	
	'Create a Dataview to filter days late
	f.Data.DataView.Create("dtAll2","dvLate",22,"DAYS_LATE > 0","WO_Label ASC")
	
'	'Set row ID for dtAllM and dtAllO
'	f.Intrinsic.Control.CallSub(setRowID)
	
'	GUI.FrmMaster.prgBar.Value(0)
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.ProgramDataCacheFile.End

Program.Sub.ProgramData.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.iCnt.Declare
	V.Local.iProgress.Declare
	v.Local.iMax.Declare
	v.Local.iHolder.Declare
	v.Local.bActive.Declare
	
	V.Local.sSQL.Declare
	v.Local.sSql2.Declare
	v.Local.sSql3.Declare
	v.Local.sSql4.Declare
	v.Local.sSQLMisc.Declare
	v.Local.sRetVar.Declare
	V.Local.sRet.Declare
	V.Local.sJob.Declare
	V.Local.sSuffix.Declare
	V.Local.sGabpath.Declare
	V.Local.fEstHrs.Declare
	V.Local.fRemHrs.Declare
	V.Local.fPcsRem.Declare
	V.Local.sDept.Declare
	V.Local.sCurOper.Declare
	V.Local.dCurOperDate.Declare
	V.Local.sNextOper.Declare
	V.Local.sOutside.Declare
	v.Local.sfile.Declare
	v.Local.sfilematl.Declare
	V.Local.sfilelabr.Declare
	v.Local.sfileouts.Declare
	v.Local.sCMarkFile.Declare
	v.Local.sJobSteps.Declare
	v.Local.sMark.Declare
	v.Local.sFilter.Declare
	v.Local.sMinJob.Declare
	v.Local.sUser4.Declare
	v.Local.sUser5.Declare
	V.Local.sNotes.Declare
	v.Local.sDay.Declare
	v.Local.sMonth.Declare
	v.Local.sYear.Declare
	v.Local.sSeq.Declare
	V.Local.sStep.Declare
	v.Local.dDateFull.Declare
	v.Local.dNewDate.Declare
	v.Local.dNewDateNoFloat.Declare
	v.Local.dNewDateWithFloat.Declare
	v.Local.sCustPO.Declare
	v.Local.sSearch.Declare
	v.Local.sJobStatus.Declare
	v.Local.x.Declare(long)
	v.Local.lret.Declare
	v.Local.lMax.Declare
	v.Local.iDaysLate.Declare(long)
	v.Local.iDaysLateNoFloat.Declare(long)
	v.Local.iDaysLateRecip.Declare(long)
	v.Local.iDaysLateNoFloatRecip.Declare(long)
	v.Local.iDaysSub.Declare
	v.Local.j.Declare(long)
	v.Local.fTotRemain.Declare
	v.Local.fTotRemainNoFloat.Declare
	v.Local.fTotRemainRecip.Declare
	v.Local.fTotRemainNoFloatRecip.Declare
	v.Local.fTemp.Declare
	
	V.Local.dShipDate.Declare
	V.Local.dDateCheck.Declare(Date,01/01/1900)
	V.Local.bDictExists.Declare
	
	V.Local.sTempDate.Declare(String)
	V.Local.dTempDate.Declare(Date)
	
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting data...")
	
	F.Intrinsic.Control.If(V.DataTable.dtAll.Exists,=,True)
		F.Data.DataTable.Close("dtAll")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.DTALL2.Exists,=,True)
		f.Data.DataTable.Close("dtAll2")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOper.Exists,=,True)
		f.Data.DataTable.Close("dtOper")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllO.Exists,=,True)
		f.Data.DataTable.Close("dtAllO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllM.Exists,=,True)
		f.Data.DataTable.Close("dtAllM")
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkClosed.Value,=,"1")
		v.Local.bActive.Set(True)
	f.Intrinsic.Control.EndIf
	
	'SQL is All Work Orders
	'SQL2 is Work Centre 
	'SQL3 is Materials Purchasing
	'SQL4 is Outside Process Purchasing
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
		v.Local.ssql.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label',  ' ' AS 'MaterialIssue', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, VIM2.DESCRIPTION_2 AS 'ALT_DESC_1', VIM2.DESCRIPTION_3 AS 'ALT_DESC_2', VIET.TEXT AS INV_EXTRA_TEXT, VIM.CODE_SORT AS PART_CODE_SORT, VIM.UM_INVENTORY AS INVUM, VJH.QTY_ORDER, VJH.QTY_ORDER - QTY_COMPLETED AS PCS_REM1, VJH.DATE_CLOSED, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) AS 'DAYS_LATE', CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT',  CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * VJH.QTY_ORDER) AS 'PRICE_EXT', CONVERT(0,SQL_FLOAT) AS EST_AMT_MATERIAL, VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, CONVERT(0,SQL_FLOAT) AS EST_TOTALCOST, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_INVENTORY_MSTR VIM ON VIM.PART = VJH.PART AND VIM.LOCATION = VJH.LOCATION LEFT JOIN V_INVENTORY_MST2 VIM2 ON VIM2.PART = VJH.PART AND VIM2.LOCATION = VJH.LOCATION LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, DATE_DUE;")

'		v.Local.ssql2.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES',   if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, SEQ, DATE_DUE")
		v.Local.ssql2.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', VJO.SEQ, RTRIM(VJO.PART) AS 'SEQRES', CUSTOMER_PO, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, VIET.TEXT AS INV_EXTRA_TEXT, QTY_ORDER, VJH.DATE_CLOSED, VJH.DATE_DUE, ' ' AS CUR_OPER, VJO.HOURS_ESTIMATED AS EST_HRS, VJO.HOURS_ACTUAL AS ACT_HRS, (VJO.HOURS_ESTIMATED - VJO.HOURS_ACTUAL) AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_JOB_OPERATIONS VJO ON VJH.JOB = VJO.JOB AND VJH.SUFFIX = VJO.SUFFIX AND VJO.LMO = 'L' AND IFNULL(VJO.DATE_COMPLETED,'1900-01-01')='1900-01-01' LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE DATE_CLOSED = '1900-1-1' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, SEQ, VJH.DATE_DUE")

'		v.Local.ssql3.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, D.TIME_MATERIAL_LEAD AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")
'		v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")
		v.Local.ssql3.Set("SELECT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, C.ROUTER, C.DESCRIPTION AS 'RouterDescription', RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, '' AS WO_6271_NOTES, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")

'		V.Local.sSql4.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
'		V.Local.sSql4.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
'		V.Local.sSql4.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
		V.Local.sSql4.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
		f.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label',  ' ' AS 'MaterialIssue',' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, VIM2.DESCRIPTION_2 AS 'ALT_DESC_1', VIM2.DESCRIPTION_3 AS 'ALT_DESC_2', VIET.TEXT AS INV_EXTRA_TEXT, VIM.CODE_SORT AS PART_CODE_SORT, VIM.UM_INVENTORY AS INVUM, VJH.QTY_ORDER, VJH.QTY_ORDER - QTY_COMPLETED AS PCS_REM1, VJH.DATE_CLOSED, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT',SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) AS 'DAYS_LATE', CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * VJH.QTY_ORDER) AS 'PRICE_EXT', CONVERT(0,SQL_FLOAT) AS EST_AMT_MATERIAL, VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, CONVERT(0,SQL_FLOAT) AS EST_TOTALCOST, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_INVENTORY_MSTR VIM ON VIM.PART = VJH.PART AND VIM.LOCATION = VJH.LOCATION LEFT JOIN V_INVENTORY_MST2 VIM2 ON VIM2.PART = VJH.PART AND VIM2.LOCATION = VJH.LOCATION LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE DATE_CLOSED = '1900-1-1'  AND VJH.CUSTOMER='{0}' AND LEFT(VJH.JOB,1)<>'Z' ORDER BY WO_Label, DATE_DUE;",v.Args.Customer,v.Local.ssql)

'		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES',   if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART,  VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON,  '' AS 'PartFriendly',   QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE,  CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE DATE_CLOSED = '1900-1-1' AND VJH.CUSTOMER='{0}' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, SEQ, DATE_DUE",v.Args.Customer,v.Local.ssql2)
		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', VJO.SEQ, RTRIM(VJO.PART) AS 'SEQRES', CUSTOMER_PO, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART,  VJH.PART_DESCRIPTION AS DESCRIPTION, VIET.TEXT AS INV_EXTRA_TEXT, QTY_ORDER, VJH.DATE_CLOSED, VJH.DATE_DUE, ' ' AS CUR_OPER, VJO.HOURS_ESTIMATED AS EST_HRS, VJO.HOURS_ACTUAL AS ACT_HRS, (VJO.HOURS_ESTIMATED - VJO.HOURS_ACTUAL) AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', VJH.PROJECT, VJH.SALESPERSON,  '' AS 'PartFriendly',   QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE,  CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_JOB_OPERATIONS VJO ON VJH.JOB = VJO.JOB AND VJH.SUFFIX = VJO.SUFFIX AND VJO.LMO = 'L' AND IFNULL(VJO.DATE_COMPLETED,'1900-01-01')='1900-01-01' LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE DATE_CLOSED = '1900-1-1' AND VJH.CUSTOMER='{0}' AND LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, SEQ, VJH.DATE_DUE",v.Args.Customer,v.Local.ssql2)

'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE',  A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER  WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER  WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
		F.Intrinsic.String.Build("SELECT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, C.ROUTER, C.DESCRIPTION AS 'RouterDescription', RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, '' AS WO_6271_NOTES, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql3)
		

'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE',  A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql4)
'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE',  A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql4)
'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE',  A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql4)
		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE',  A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' ORDER BY A.SEQ",v.Args.Customer,v.Local.ssql4)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label',  ' ' AS 'MaterialIssue',' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, VIM2.DESCRIPTION_2 AS 'ALT_DESC_1', VIM2.DESCRIPTION_3 AS 'ALT_DESC_2', VIET.TEXT AS INV_EXTRA_TEXT, VIM.CODE_SORT AS PART_CODE_SORT, VIM.UM_INVENTORY AS INVUM, VJH.QTY_ORDER, VJH.QTY_ORDER - QTY_COMPLETED AS PCS_REM1, VJH.DATE_CLOSED, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT',SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) AS 'DAYS_LATE', CAST(0 AS INTEGER)  as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * VJH.QTY_ORDER) AS 'PRICE_EXT', CONVERT(0,SQL_FLOAT) AS EST_AMT_MATERIAL, VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, CONVERT(0,SQL_FLOAT) AS EST_TOTALCOST, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_INVENTORY_MSTR VIM ON VIM.PART = VJH.PART AND VIM.LOCATION = VJH.LOCATION LEFT JOIN V_INVENTORY_MST2 VIM2 ON VIM2.PART = VJH.PART AND VIM2.LOCATION = VJH.LOCATION LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE DATE_CLOSED = '1900-1-1'  AND VJH.CUSTOMER='{0}' AND VJH.SALES_ORDER='{1}' AND LEFT(VJH.JOB,1)<>'Z' ORDER BY WO_Label, DATE_DUE;",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql)

'		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES',   if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort',  ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON,  '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT',   CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE DATE_CLOSED = '1900-1-1' AND VJH.CUSTOMER='{0}' AND VJH.SALES_ORDER='{1}' AND LEFT(VJH.JOB,1)<>'Z' ORDER BY WO_Label, SEQ, DATE_DUE",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql2)
		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', VJO.SEQ, RTRIM(VJO.PART) AS 'SEQRES', CUSTOMER_PO, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort',  ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, VIET.TEXT AS INV_EXTRA_TEXT, QTY_ORDER, VJH.DATE_CLOSED, VJH.DATE_DUE, ' ' AS CUR_OPER, VJO.HOURS_ESTIMATED AS EST_HRS, VJO.HOURS_ACTUAL AS ACT_HRS, (VJO.HOURS_ESTIMATED - VJO.HOURS_ACTUAL) AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', VJH.PROJECT, VJH.SALESPERSON,  '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT',   CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_JOB_OPERATIONS VJO ON VJH.JOB = VJO.JOB AND VJH.SUFFIX = VJO.SUFFIX AND VJO.LMO = 'L' AND IFNULL(VJO.DATE_COMPLETED,'1900-01-01')='1900-01-01' LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE DATE_CLOSED = '1900-1-1' AND VJH.CUSTOMER='{0}' AND VJH.SALES_ORDER='{1}' AND LEFT(VJH.JOB,1)<>'Z' ORDER BY WO_Label, SEQ, VJH.DATE_DUE",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql2)

'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE' ,A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
'		F.Intrinsic.String.Build("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
		F.Intrinsic.String.Build("SELECT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, C.ROUTER, C.DESCRIPTION AS 'RouterDescription', RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, '' AS WO_6271_NOTES, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql3)
		

'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE' ,A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND FLAG_CLOSED <> 'Y' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql4)
'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE' ,A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql4)
'		F.Intrinsic.String.Build("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE' ,A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql4)
		F.Intrinsic.String.Build("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE' ,A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL,  (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE, G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY A.SEQ",v.Args.Customer,V.Args.SalesOrder,v.Local.ssql4)
	f.Intrinsic.Control.EndIf
	
	'update the query accordingly and create datatable
	gui.FrmMaster.prgBar.Value(1)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting all records...")
	'For all records
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	F.Data.DataTable.CreateFromSQL("dtAll","CON",v.Local.sSQL,True)
	
	'For workcentre dispatch
	gui.FrmMaster.prgBar.Value(2)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting work center dispatch...")
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql2)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql2)
	F.Data.DataTable.CreateFromSQL("dtOper","CON",v.Local.sSQL2,True)
	f.Data.DataView.Create("dtOper","dvOper",22,"","SEQRES ASC, DAYS_LATE ASC")
	
'	'For material list
'	Gui.FrmMaster.lblProgBarStatus.Caption("Getting materials...")
'	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql3)
'	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql3)
'	F.Data.DataTable.CreateFromSQL("dtAllM","CON",v.Local.sSQL3,True)
'	f.Data.DataView.Create("dtAllM","dvAllM",22,"","")
'	
'	'For outside list
'	Gui.FrmMaster.lblProgBarStatus.Caption("Getting outside services...")
'	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql4)
'	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql4)
'	F.Data.DataTable.CreateFromSQL("dtAllO","CON",v.Local.sSql4,True)
'	f.Data.DataView.Create("dtAllO","dvAllO",22,"","")

	'For material & outside list
	gui.FrmMaster.prgBar.Value(3)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting materials...")
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql3)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql3)
	
	'Create table for Material and Outside. Then later filter for material (dtAllM) and Outside (dtAllO)
	f.Intrinsic.Control.If(v.DataTable.dtMO.Exists)
		f.Data.DataTable.Close("dtMO")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtMO","CON",v.Local.sSQL3,True)
	
	'Fill some data from Dictionary
	'WO 6271 Notes
	f.Data.Dictionary.CreateFromSQL("d6271Notes","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQ) AS JSS, NOTES from GAB_6271_WO_NOTES;")
	f.Data.Dictionary.SetDefaultReturn("d6271Notes","")
	f.Data.DataTable.FillFromDictionary("dtMO","d6271Notes","JSS","WO_6271_NOTES")
	f.Data.Dictionary.Close("d6271Notes")
	
	'Job Seq Comments
	f.Data.Dictionary.CreateFromSQL("dJobSeqComments","con","select CONCAT(CONCAT(WO,WO_SUFFIX),WO_SEQ) AS JSS, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' from V_WO_SEQ_COMMENTS WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
	f.Data.Dictionary.SetDefaultReturn("dJobSeqComments","")
	f.Data.DataTable.FillFromDictionary("dtMO","dJobSeqComments","JSS","SEQ_COMMENT")
	f.Data.Dictionary.Close("dJobSeqComments")
	
	'Purchase Order Information
'	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE, IF(LTRIM(RTRIM(EXCHANGE_CURR)) = '' OR LTRIM(RTRIM(EXCHANGE_CURR)) = 'USD', COST_6_DEC, EXCHANGE_COST2) AS PO_COST from V_PO_LINES WHERE JOB <> ''")
	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE, IF(LTRIM(RTRIM(EXCHANGE_CURR)) = '' OR LTRIM(RTRIM(EXCHANGE_CURR)) = 'USD', COST_6_DEC, EXCHANGE_COST2) AS PO_COST, RTRIM(LTRIM(UM_PURCHASING)) AS PUR_UM, CAST(IF(UM_PURCHASING <> UM_INVENTORY AND QTY_ORDER <> 0, QTY_ALT_ORDER/QTY_ORDER, 0.00000) AS NUMERIC(18,5)) AS PUR_CNV_FACTOR from V_PO_LINES WHERE JOB <> ''")
	f.Data.DataView.Create("dtPOInfo","dvPOInfo",22,"","JSS")
	'PO No
	f.Data.Dictionary.CreateFromDataView("dPONo","dtPOInfo","dvPOInfo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.SetDefaultReturn("dPONo","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPONo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.Close("dPONo")
	'PO Line
	f.Data.Dictionary.CreateFromDataView("dPOLine","dtPOInfo","dvPOInfo","JSS","LINE")
	f.Data.Dictionary.SetDefaultReturn("dPOLine","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOLine","JSS","LINE")
	f.Data.Dictionary.Close("dPOLine")
	'Vendor
	f.Data.Dictionary.CreateFromDataView("dVendor","dtPOInfo","dvPOInfo","JSS","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dVendor","")
	f.Data.DataTable.FillFromDictionary("dtMO","dVendor","JSS","PO_VENDOR")
	f.Data.Dictionary.Close("dVendor")
	'PO Line Purchase Cost
	f.Data.Dictionary.CreateFromDataView("dPOCost","dtPOInfo","dvPOInfo","JSS","PO_COST")
	f.Data.Dictionary.SetDefaultReturn("dPOCost","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOCost","JSS","PO_COST")
	f.Data.Dictionary.Close("dPOCost")
	'PO Purchasing UM
	f.Data.DataTable.AddColumn("dtMO","PO_PURUM","String")
	f.Data.Dictionary.CreateFromDataView("dPOPurUM","dtPOInfo","dvPOInfo","JSS","PUR_UM")
	f.Data.Dictionary.SetDefaultReturn("dPOPurUM","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOPurUM","JSS","PO_PURUM")
	f.Data.Dictionary.Close("dPOPurUM")
	'If the PO Purchase UM is not blank then use the PO Purchase UM else use the Purchase UM from Inventory Master
	f.Data.DataTable.AddExpressionColumn("dtMO","FinalPurUM","String","IIF(PO_PURUM <> '',PO_PURUM,PURUM)")
	f.Data.DataTable.CopyColumn("dtMO","FinalPurUM","PURUM")
	f.Data.DataTable.RemoveColumn("dtMO","FinalPurUM")
	f.Data.DataTable.RemoveColumn("dtMO","PO_PURUM")
	'PO Purchasing Conversion Factor
	f.Data.DataTable.AddColumn("dtMO","PO_PUR_CNV_FACTOR","Float")
	f.Data.Dictionary.CreateFromDataView("dPOPurCnvFactor","dtPOInfo","dvPOInfo","JSS","PUR_CNV_FACTOR")
	f.Data.Dictionary.SetDefaultReturn("dPOPurCnvFactor",0.00000)
	f.Data.DataTable.FillFromDictionary("dtMO","dPOPurCnvFactor","JSS","PO_PUR_CNV_FACTOR")
	f.Data.Dictionary.Close("dPOPurCnvFactor")
	'If the PO Purchase Conversion Factor is not 0.00000 then use the PO Purchase Conversion Factor else use the Purchase Conversion Factor from Inventory Master
	f.Data.DataTable.AddExpressionColumn("dtMO","FinalPurCnvFactor","Float","IIF(PO_PUR_CNV_FACTOR <> 0.00000,PO_PUR_CNV_FACTOR,PUR_CNV_FACTOR)")
	f.Data.DataTable.CopyColumn("dtMO","FinalPurCnvFactor","PUR_CNV_FACTOR")
	f.Data.DataTable.RemoveColumn("dtMO","FinalPurCnvFactor")
	f.Data.DataTable.RemoveColumn("dtMO","PO_PUR_CNV_FACTOR")
	
	'Last PO Vendor
	f.Data.DataTable.CreateFromSQL("dtLastPO","con","select RTRIM(A.PART) AS MatPart, RTRIM(A.BUYER) AS BUYER_CODE, RTRIM(A.VENDOR) AS VENDOR from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' ORDER BY A.PART;")
	f.Data.DataView.Create("dtLastPO","dvLastPO",22,"","")
	'Last PO Vendor
	f.Data.Dictionary.CreateFromDataView("dLastPOVendor","dtLastPO","dvLastPO","MatPart","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dLastPOVendor","")
	f.Data.DataTable.FillFromDictionary("dtMO","dLastPOVendor","MatPart","LAST_PO_VENDOR")
	f.Data.Dictionary.Close("dLastPOVendor")
	'Last PO Vendor Name
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER where RTRIM(VENDOR) <> '';")
	F.Data.Dictionary.SetDefaultReturn("dVend","")
	F.Data.DataTable.FillFromDictionary("dtMO","dVend","LAST_PO_VENDOR","LAST_PO_VENDOR_NAME")
	F.Data.Dictionary.Close("dVend")
	'Last PO Buyer Code
	f.Data.Dictionary.CreateFromDataView("dLastPOBuyerCode","dtLastPO","dvLastPO","MatPart","BUYER_CODE")
	f.Data.Dictionary.SetDefaultReturn("dLastPOBuyerCode","")
	f.Data.DataTable.FillFromDictionary("dtMO","dLastPOBuyerCode","MatPart","LAST_PO_BUYER_CODE")
	f.Data.Dictionary.Close("dLastPOBuyerCode")
	'Last PO Buyer Name
	f.Data.Dictionary.CreateFromSQL("dLastPOBuyerName","con","select RTRIM(BUYER_CODE) AS BUYER_CODE, RTRIM(NAME) AS BUYER_NAME from BUYER_DESCRIPTOR;")
	F.Data.Dictionary.SetDefaultReturn("dLastPOBuyerName","")
	F.Data.DataTable.FillFromDictionary("dtMO","dLastPOBuyerName","LAST_PO_BUYER_CODE","LAST_PO_BUYER_NAME")
	F.Data.Dictionary.Close("dLastPOBuyerName")
	'Close DataTable & DataView
	f.Data.DataView.Close("dtLastPO","dvLastPO")
	f.Data.DataTable.Close("dtLastPO")
	
	'PoExist Flag
	f.Data.Dictionary.CreateFromSQL("dPoExist","con","select rtrim(a.part) as 'MatPart', CONVERT(if(sum(a.qty_order-a.qty_received-a.qty_reject) > 0, 1, 0), SQL_BIT) as 'PoExist' from v_po_lines a left join v_po_header b on a.purchase_order = b.purchase_order where b.flag_recv_closed <> 'Y' and a.flag_recv_close <> 'Y' group by a.part;")
	F.Data.Dictionary.SetDefaultReturn("dPoExist",False)
	F.Data.DataTable.FillFromDictionary("dtMO","dPoExist","MatPart","PoExist")
	F.Data.Dictionary.Close("dPoExist")
	
	'Hierarchy of VENDOR CODE/NAME
	'1. PO Line associated with the WO Sequence
	'2. Inventory Preferred Vendor
	'3. PO History based on PO Date
	'Add Expression Column
'	f.Data.DataTable.AddExpressionColumn("dtMO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,INV_VENDOR)")
'	f.Data.DataTable.AddExpressionColumn("dtMO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,IIF(LAST_PO_VENDOR<>'',LAST_PO_VENDOR,INV_VENDOR))")
	f.Data.DataTable.AddExpressionColumn("dtMO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,IIF(INV_VENDOR<>'',INV_VENDOR,LAST_PO_VENDOR))")
	'Create Dataview
	f.Data.DataView.Create("dtMO","dvVendorInfo",22,"","JSS")
	f.Data.Dictionary.CreateFromDataView("dVendorInfo","dtMO","dvVendorInfo","JSS","TempVendor")
	f.Data.Dictionary.SetDefaultReturn("dVendorInfo","")
	f.Data.DataTable.FillFromDictionary("dtMO","dVendorInfo","JSS","VENDOR")
	f.Data.Dictionary.Close("dVendorInfo")
	f.Data.DataView.Close("dtMO","dvVendorInfo")
	'Delete Column
	f.Data.DataTable.RemoveColumn("dtMO","TempVendor")
'	f.Data.DataTable.RemoveColumn("dtMO","PO_VENDOR")
'	f.Data.DataTable.RemoveColumn("dtMO","INV_VENDOR")
	
	'Date Due Line
	f.Data.Dictionary.CreateFromDataView("dDateDueLine","dtPOInfo","dvPOInfo","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.SetDefaultReturn("dDateDueLine","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtMO","dDateDueLine","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.Close("dDateDueLine")
	'Close DataTable & DataView
	F.Data.DataView.Close("dtPOInfo","dvPOInfo")
	F.Data.DataTable.Close("dtPOInfo")
	
	'Purchase Order Line Text
	'Add Expression Column
	f.Data.DataTable.AddExpressionColumn("dtMO","POLN","String","PURCHASE_ORDER+LINE")
	f.Data.Dictionary.CreateFromSQL("dPOLineText","con","SELECT CONCAT(PO_NUM,LEFT(LINE,3)) AS POLN, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') AS TEXT FROM PO_LN_TEXT WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
	f.Data.Dictionary.SetDefaultReturn("dPOLineText","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOLineText","POLN","TEXT")
	f.Data.Dictionary.Close("dPOLineText")
	'Remove Expression Column
	f.Data.DataTable.RemoveColumn("dtMO","POLN")
	
	'Add Expression Column
'	f.Data.DataTable.AddExpressionColumn("dtMO","PartVendor","String","MatPart+'*!*'+VENDOR")
	
	'For materials - dtAllM from dtMO
	f.Data.DataView.Create("dtMO","dvMO",22,"LMO = 'M'","")
	f.Data.DataView.ToDataTable("dtMO","dvMO","dtAllM",True)
	f.Data.DataTable.RemoveColumn("dtAllM","LMO")
	f.Data.DataView.Create("dtAllM","dvAllM",22,"","")
	'Remove columns from dtAllM
	f.Data.DataTable.RemoveColumn("dtAllM","PO_VENDOR")
	f.Data.DataTable.RemoveColumn("dtAllM","INV_VENDOR")
	'Add Expression Column
	f.Data.DataTable.AddExpressionColumn("dtAllM","PartVendor","String","MatPart+'*!*'+VENDOR")
	
	'For outside list - dtAllO from dtMO
	gui.FrmMaster.prgBar.Value(4)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting outside services...")
	f.Data.DataView.SetFilter("dtMO","dvMO","LMO = 'O'")
	f.Data.DataView.ToDataTable("dtMO","dvMO","dtAllO",True)
	
	'Retrieving Last PO Information for dtAllO	
	'Matching based on Job Header Part + Outside Process Description + Vendor
	f.Data.DataTable.AddExpressionColumn("dtAllO","OutsideServicePart","String","SUBSTRING([PartWoTrim],1,16)+'*'+SUBSTRING([PartWoTrim],18,3)")
	f.Data.DataTable.AddExpressionColumn("dtAllO","HeaderPart","String","[OutsideServicePart]+TRIM([DESCR])")
	f.Data.DataTable.AddExpressionColumn("dtAllO","PartVendorOutsideService","String","[OutsideServicePart]+'*!*'+TRIM([DESCR])+'*!*'+TRIM(VENDOR)")
	
	'Last PO Vendor
	f.Data.DataTable.CreateFromSQL("dtLastPO","con","select A.PART + RTRIM(A.DESCRIPTION) AS HeaderPart, RTRIM(A.BUYER) AS BUYER_CODE, RTRIM(A.VENDOR) AS VENDOR from PO_HISTORY A INNER JOIN (select PART, DESCRIPTION, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART, DESCRIPTION) B ON A.PART = B.PART AND A.DESCRIPTION = B.DESCRIPTION AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' and SUBSTRING(A.PART,17,1) = '*' ORDER BY HeaderPart;")
	f.Data.DataView.Create("dtLastPO","dvLastPO",22,"","")
	
	'Last PO Vendor
	f.Data.Dictionary.CreateFromDataView("dLastPOVendor","dtLastPO","dvLastPO","HeaderPart","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dLastPOVendor","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dLastPOVendor","HeaderPart","LAST_PO_VENDOR")
	f.Data.Dictionary.Close("dLastPOVendor")
	'Last PO Vendor Name
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER where RTRIM(VENDOR) <> '';")
	F.Data.Dictionary.SetDefaultReturn("dVend","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVend","LAST_PO_VENDOR","LAST_PO_VENDOR_NAME")
	F.Data.Dictionary.Close("dVend")
	'Last PO Buyer Code
	f.Data.Dictionary.CreateFromDataView("dLastPOBuyerCode","dtLastPO","dvLastPO","HeaderPart","BUYER_CODE")
	f.Data.Dictionary.SetDefaultReturn("dLastPOBuyerCode","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dLastPOBuyerCode","HeaderPart","LAST_PO_BUYER_CODE")
	f.Data.Dictionary.Close("dLastPOBuyerCode")
	'Last PO Buyer Name
	f.Data.Dictionary.CreateFromSQL("dLastPOBuyerName","con","select RTRIM(BUYER_CODE) AS BUYER_CODE, RTRIM(NAME) AS BUYER_NAME from BUYER_DESCRIPTOR;")
	F.Data.Dictionary.SetDefaultReturn("dLastPOBuyerName","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dLastPOBuyerName","LAST_PO_BUYER_CODE","LAST_PO_BUYER_NAME")
	F.Data.Dictionary.Close("dLastPOBuyerName")
	'Close DataTable & DataView
	f.Data.DataView.Close("dtLastPO","dvLastPO")
	f.Data.DataTable.Close("dtLastPO")
	
	'Hierarchy of VENDOR CODE/NAME
	'1. PO Line associated with the WO Sequence
	'2. Inventory Preferred Vendor
	'3. PO History based on PO Date
	'Add Expression Column
	f.Data.DataTable.AddExpressionColumn("dtAllO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,IIF(INV_VENDOR<>'',INV_VENDOR,LAST_PO_VENDOR))")
	'Create Dataview
	f.Data.DataView.Create("dtAllO","dvVendorInfo",22,"","JSS")
	f.Data.Dictionary.CreateFromDataView("dVendorInfo","dtAllO","dvVendorInfo","JSS","TempVendor")
	f.Data.Dictionary.SetDefaultReturn("dVendorInfo","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dVendorInfo","JSS","VENDOR")
	f.Data.Dictionary.Close("dVendorInfo")
	f.Data.DataView.Close("dtAllO","dvVendorInfo")
	'Delete Column
	f.Data.DataTable.RemoveColumn("dtAllO","TempVendor")
	f.Data.DataTable.RemoveColumn("dtAllO","PO_VENDOR")
	f.Data.DataTable.RemoveColumn("dtAllO","INV_VENDOR")	
	'Delete Additional Columns
	f.Data.Datatable.RemoveColumn("dtAllO","OPCODE")
	f.Data.Datatable.RemoveColumn("dtAllO","SEQ_COMMENT")
	f.Data.Datatable.RemoveColumn("dtAllO","QTY_REQUIRED")
	f.Data.Datatable.RemoveColumn("dtAllO","QTY_ONORDER_PO")
	f.Data.Datatable.RemoveColumn("dtAllO","ORDER_REQD_DATE")
	f.Data.Datatable.RemoveColumn("dtAllO","MATL_LEAD_TIME")
	f.Data.DataTable.RemoveColumn("dtAllO","LMO")
	f.Data.DataTable.RemoveColumn("dtAllO","USER1DEFINED")
	f.Data.DataTable.RemoveColumn("dtAllO","PoExist")
	f.Data.DataView.Create("dtAllO","dvAllO",22,"","")
	
	'Long Part
	gui.FrmMaster.prgBar.Value(5)
	Gui.FrmMaster.lblProgBarStatus.Caption("Checking for Long Part...")	
	f.Intrinsic.Control.If(v.Global.bLongPart)
		F.Data.DataTable.AddDisplayPartColumn("dtAll",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtAll",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtOper",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtOper",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtAllM",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtAllM",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtAllM",0,"MATPART","MatDisplayPart")
		F.Data.DataTable.AddDisplayPartColumn("dtAllO",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtAllO",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtAllO",0,"MATPART","MatDisplayPart")
	f.Intrinsic.Control.Else
		F.Data.DataTable.CopyColumn("dtAll","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAll","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtOper","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtOper","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllM","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAllM","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllM","MATPART","MatDisplayPart")
		F.Data.DataTable.CopyColumn("dtAllO","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAllO","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllO","MATPART","MatDisplayPart")
	f.Intrinsic.Control.EndIf
	
	'RF, ADD IN JOB STEPS*******************************************************************
	gui.FrmMaster.prgBar.Value(6)
	Gui.FrmMaster.lblProgBarStatus.Caption("Building Prelim Job Steps...")
	
	f.Intrinsic.Control.If(v.DataTable.dtAll.RowCount,>,0)
		f.Intrinsic.Math.Mult(v.DataTable.dtAll.RowCount,2,v.Local.iMax)
	f.Intrinsic.Control.EndIf
	'Get the mininum job number
	f.ODBC.Connection!CON.ExecuteAndReturn("Select Min(Job) as JobMin from v_Job_header WHERE DATE_CLOSED = '1900-1-1' ",v.Local.sMinJob)
	f.Intrinsic.Control.If(v.Local.sMinJob,=,"")
		v.Local.sMinJob.Set("000000")
	f.Intrinsic.Control.EndIf
	
'	'Get all Job Operations where job >= minjob. This is to avoid getting the whole v_job_operations which is too big	
'	'Modified by TDJOHAN - 01/31/2022 - BEGIN
''	f.Intrinsic.String.Build("Select Job, Suffix, Seq, LMO, Description, Part as PartWO, Flag_Closed, Units_Open, Date_Start, Date_Due, PO_Assigned,'' as POHead, Date_PO_Order,Job + '-' + Suffix + '-' + Seq as JobSuffixSeq from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '990000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
'	f.Intrinsic.String.Build("Select Job, Suffix, Seq, LMO, Description, Part as PartWO, Flag_Closed, Units_Open, Date_Start, Date_Due, PO_Assigned,'' as POHead, Date_PO_Order,Job + '-' + Suffix + '-' + Seq as JobSuffixSeq from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '995000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
'	'Modified by TDJOHAN - 01/31/2022 - END
'	f.Intrinsic.Control.If(v.DataTable.JobOp.Exists)
'		f.Data.DataTable.close("JobOp")
'	f.Intrinsic.Control.EndIf
'	f.Data.DataTable.CreateFromSQL("JobOp","CON",v.Local.sSQL,True)	
	
	'Get Order header Data
	gui.FrmMaster.prgBar.Value(7)
	Gui.FrmMaster.lblProgBarStatus.Caption("Building Prelim Order Header...")
	f.Intrinsic.Control.If(v.DataTable.dtOrd.Exists)
		f.Data.DataTable.Close("dtOrd")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtOrd","con","SELECT * FROM ORDER_HEADER")
	f.Intrinsic.Control.If(v.DataTable.dtSONotes.Exists)
		f.Data.DataTable.Close("dtSONotes")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtSONotes","con","SELECT * FROM GAB_4167_SO_NOTES")
	
	gui.FrmMaster.prgBar.Value(8)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting all material steps...")
	'Get all Material steps
	f.Intrinsic.Control.If(v.DataTable.JobMat.Exists)
		f.Data.DataTable.close("JobMat")
	f.Intrinsic.Control.EndIf
'	f.Data.DataTable.CreateFromSQL("JobMat","Con","SELECT DISTINCT JOB, SUFFIX, FLAG_CLOSED FROM JOB_OPERATIONS WHERE LMO='M' and (seq<>'995000' and seq<>'998000')",true)
	f.Data.DataTable.CreateFromSQL("JobMat","Con","SELECT JOB, SUFFIX, FLAG_CLOSED FROM JOB_OPERATIONS WHERE LMO='M' and (seq<>'995000' and seq<>'998000') GROUP BY JOB, SUFFIX, FLAG_CLOSED",true)
	
'	'Get Job Steps	
'	f.Data.DataTable.AddExpressionColumn("JobOp","JobSteps","String","IIF(Flag_Closed = 'Y','~' + trim(PartWO),trim(PartWO))")
'	f.Data.DataView.Create("JobOp","dvJobOp")
'	f.Intrinsic.String.Concat(v.Caller.GasDir,"\GAB_6271_COMPLETION.txt",v.Local.sCMarkFile)
'	f.Intrinsic.File.File2String(v.Local.sCMarkFile,v.Local.sMark)
'	f.Intrinsic.Math.Add(v.DataTable.dtAll.RowCount,1,v.Local.lMax)
'	F.Intrinsic.Control.If(v.Local.lMax,=,0)
'		v.Local.lMax.Set(1)
'	F.Intrinsic.Control.EndIf
'	gui.FrmMaster.prgBar.Min(0)
'	gui.FrmMaster.prgBar.Max(v.Local.lMax)
	
	'Add column for datatable ID row
	f.Data.DataTable.AddColumn("dtAll","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtAllM","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtAllO","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtOper","MyRowID",Integer)
	
	'Getting Material, Labor, and Outside for dtAll
	f.Intrinsic.Control.If(v.DataTable.dtChildMat.Exists)
		f.Data.DataTable.Close("dtChildMat")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildMatMisc.Exists)
		f.Data.DataTable.Close("dtChildMatMisc")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildLabr.Exists)
		f.Data.DataTable.Close("dtChildLabr")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildOuts.Exists)
		f.Data.DataTable.Close("dtChildOuts")
	f.Intrinsic.Control.EndIf
	
	gui.FrmMaster.prgBar.Value(9)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting child materials...")
	'Materials
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
'		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,RTRIM(E.VENDOR) AS VENDOR,E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
'		v.Local.sSQLMisc.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,NULL AS DATE_DUE_LINE,'' AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, VWSC.TEXT ORDER BY SEQ1")
'		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR, '' AS PURCHASE_ORDER, '' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
'		v.Local.sSQLMisc.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM ORDER BY SEQ1")
		v.Local.sSQL.Set("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR, '' AS PURCHASE_ORDER, '' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND  C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
		v.Local.sSQLMisc.Set("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM ORDER BY SEQ1")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,RTRIM(E.VENDOR) AS 'VENDOR',E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' AND CUSTOMER='{0}' ORDER BY SEQ1",V.Args.Customer,v.Local.sSQL)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,NULL AS DATE_DUE_LINE,'' AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, VWSC.TEXT ORDER BY SEQ1",V.Args.Customer,v.Local.sSQLMisc)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS 'VENDOR','' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' AND CUSTOMER='{0}' ORDER BY SEQ1",V.Args.Customer,v.Local.sSQL)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM ORDER BY SEQ1",V.Args.Customer,v.Local.sSQLMisc)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS 'VENDOR','' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' AND CUSTOMER='{0}' ORDER BY SEQ1",V.Args.Customer,v.Local.sSQL)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM ORDER BY SEQ1",V.Args.Customer,v.Local.sSQLMisc)
	f.Intrinsic.Control.Else
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,RTRIM(E.VENDOR) AS 'VENDOR',E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.sSQL)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,NULL AS DATE_DUE_LINE,'' AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, VWSC.TEXT ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.sSQLMisc)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.sSQL)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.sSQLMisc)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.sSQL)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT',SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND C.DATE_CLOSED='1900-01-01' AND LEFT(A.JOB,1)<>'Z' AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM ORDER BY SEQ1",V.Args.Customer,V.Args.SalesOrder,v.Local.sSQLMisc)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtChildMat","CON",v.Local.sSQL,true)
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSQLMisc)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSQLMisc)
	f.Data.DataTable.CreateFromSQL("dtChildMatMisc","CON",v.Local.sSQLMisc,true)
	
	'Fill some data from Dictionary
	'Job Seq Comments
	f.Data.Dictionary.CreateFromSQL("dJobSeqComments","con","select CONCAT(CONCAT(WO,WO_SUFFIX),WO_SEQ) AS JSS, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' from V_WO_SEQ_COMMENTS WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
	f.Data.Dictionary.SetDefaultReturn("dJobSeqComments","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dJobSeqComments","JSS","SEQ_COMMENT")
	f.Data.DataTable.FillFromDictionary("dtChildMatMisc","dJobSeqComments","JSS","SEQ_COMMENT")
'	f.Data.Dictionary.Close("dJobSeqComments")
	
	'Purchase Order Information
	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE from V_PO_LINES WHERE JOB <> ''")
	f.Data.DataView.Create("dtPOInfo","dvPOInfo",22,"","JSS")
	'PO No
	f.Data.Dictionary.CreateFromDataView("dPONo","dtPOInfo","dvPOInfo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.SetDefaultReturn("dPONo","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dPONo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.Close("dPONo")
	'PO Line
	f.Data.Dictionary.CreateFromDataView("dPOLine","dtPOInfo","dvPOInfo","JSS","LINE")
	f.Data.Dictionary.SetDefaultReturn("dPOLine","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dPOLine","JSS","LINE")
	f.Data.Dictionary.Close("dPOLine")
	'Vendor
	f.Data.Dictionary.CreateFromDataView("dVendor","dtPOInfo","dvPOInfo","JSS","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dVendor","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dVendor","JSS","VENDOR")
	f.Data.Dictionary.Close("dVendor")
	'Date Due Line
	f.Data.Dictionary.CreateFromDataView("dDateDueLine","dtPOInfo","dvPOInfo","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.SetDefaultReturn("dDateDueLine","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dDateDueLine","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.Close("dDateDueLine")
	'Close DataTable & DataView
	F.Data.DataView.Close("dtPOInfo","dvPOInfo")
	F.Data.DataTable.Close("dtPOInfo")
	
	'Merge both datatable
	f.Data.DataTable.Merge("dtChildMatMisc","dtChildMat",true,2)
	
	gui.FrmMaster.prgBar.Value(10)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting child labors...")
	'Labour
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
'		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,B.SEQRES,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE, A.CODE_SORT_OPER,B.SPM,B.OVERLAP,B.NOMACH,B.HOURSORIG+B.INITSU AS EST_HRS, B.FLOAT, B.HOURSAPPL AS ACT_HRS,(B.HOURSORIG+B.INITSU)-B.HoursAppl AS REM_HRS, IF( ifnull(Compldate,'1900-01-01')='1900-01-01',(((B.HOURSORIG+B.INITSU) * (1+(1-B.SPM))) - (If(B.HoursAppl > (B.HOURSORIG+B.INITSU),(B.HOURSORIG+B.INITSU),B.HoursAppl)) + Float),0) as TotHrsRem,  B.PCSTOPROD AS ORDER_QTY,B.PCSCOMPL AS COMPL_QTY,B.PCSREMAIN AS PCS_REM FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND JBSF IN (SELECT CONCAT(JOB,SUFFIX) AS JBSFX FROM V_JOB_HEADER WHERE DATE_CLOSED = '1900-1-1') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.SEQ AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'		v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
		v.Local.sSQL.Set("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,B.SEQRES,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE, A.CODE_SORT_OPER,B.SPM,B.OVERLAP,B.NOMACH,B.HOURSORIG+B.INITSU AS EST_HRS, B.FLOAT, B.HOURSAPPL AS ACT_HRS,(B.HOURSORIG+B.INITSU)-B.HoursAppl AS REM_HRS, IF( ifnull(Compldate,'1900-01-01')='1900-01-01',(((B.HOURSORIG+B.INITSU) * (1+(1-B.SPM))) - (If(B.HoursAppl > (B.HOURSORIG+B.INITSU),(B.HOURSORIG+B.INITSU),B.HoursAppl)) + Float),0) as TotHrsRem, B.PCSTOPROD AS ORDER_QTY,B.PCSCOMPL AS COMPL_QTY,B.PCSREMAIN AS PCS_REM FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND JBSF IN (SELECT CONCAT(JOB,SUFFIX) AS JBSFX FROM V_JOB_HEADER WHERE  CUSTOMER='{0}' AND DATE_CLOSED = '1900-1-1') ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.SEQ AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.CUSTOMER='{0}' AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.CUSTOMER='{0}' AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Local.ssql)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.CUSTOMER='{0}' AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Local.ssql)
	f.Intrinsic.Control.Else
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,B.SEQRES,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE, A.CODE_SORT_OPER,B.SPM,B.OVERLAP,B.NOMACH,B.HOURSORIG+B.INITSU AS EST_HRS, B.FLOAT, B.HOURSAPPL AS ACT_HRS,(B.HOURSORIG+B.INITSU)-B.HoursAppl AS REM_HRS, IF( ifnull(Compldate,'1900-01-01')='1900-01-01',(((B.HOURSORIG+B.INITSU) * (1+(1-B.SPM))) - (If(B.HoursAppl > (B.HOURSORIG+B.INITSU),(B.HOURSORIG+B.INITSU),B.HoursAppl)) + Float),0) as TotHrsRem, B.PCSTOPROD AS ORDER_QTY,B.PCSCOMPL AS COMPL_QTY,B.PCSREMAIN AS PCS_REM FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND JBSF IN (SELECT CONCAT(JOB,SUFFIX) AS JBSFX FROM V_JOB_HEADER WHERE  CUSTOMER='{0}' AND SALES_ORDER='{1}' AND DATE_CLOSED = '1900-1-1') ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.SEQ AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z'   AND A.SEQ NOT IN ('996000','998500') AND C.CUSTOMER='{0}' AND C.SALES_ORDER='{1}' AND C.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtChildLabr","CON",v.Local.sSQL,true)
	
	'Fill some data from Dictionary
	'Job Seq Comments
	f.Data.DataTable.FillFromDictionary("dtChildLabr","dJobSeqComments","JSS","SEQ_COMMENT")
	
	gui.FrmMaster.prgBar.Value(11)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting child outside services...")
	'Outside
	f.Intrinsic.Control.if(v.Args.salesorder.Trim,=,"")
	f.Intrinsic.Control.AndIf(v.Args.Customer.Trim,=,"")
'		V.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2 FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS LEFT JOIN V_VENDOR_MASTER C ON B.OPCODE = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z'  AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'		V.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z'  AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'		V.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z'  AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
		V.Local.sSQL.SET("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z'  AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	f.Intrinsic.Control.elseIf(v.Args.SalesOrder.Trim,=,"")
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2 FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS LEFT JOIN V_VENDOR_MASTER C ON B.OPCODE = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE  A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000'  AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE  A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000'  AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE  A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000'  AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer,v.Local.ssql)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE  A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000'  AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer,v.Local.ssql)
	f.Intrinsic.Control.Else
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,B.DESCR,B.STARTDATE,B.DUEDATE,B.COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2 FROM JOB_OPERATIONS A LEFT JOIN APSV3_JBLINES B ON JSS = B.JSS LEFT JOIN V_VENDOR_MASTER C ON B.OPCODE = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' AND SALES_ORDER='{1}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' AND SALES_ORDER='{1}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
'		f.Intrinsic.String.Build("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' AND SALES_ORDER='{1}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
		f.Intrinsic.String.Build("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE  LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' AND E.DATE_CLOSED='1900-01-01' AND E.CUSTOMER='{0}' AND SALES_ORDER='{1}' ORDER BY A.JOB,A.SUFFIX,A.SEQ;",v.Args.Customer.Trim,v.Args.SalesOrder,v.Local.ssql)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(cleanQuery,"Active",v.Local.bActive,"Query",v.Local.sSql)
	f.Intrinsic.Variable.ArgToVar("rSQL",v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtChildOuts","CON",v.Local.sSQL,true)
	
	'Fill some data from Dictionary
	'Job Seq Comments
	f.Data.DataTable.FillFromDictionary("dtChildOuts","dJobSeqComments","JSS","SEQ_COMMENT")
	
	'Close dJobSeqComments
	f.Data.Dictionary.Close("dJobSeqComments")
	
'	'Save them to an xml file temporarily
'	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewMatl.xml",v.Local.sfilematl)
' 	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewLabr.xml",v.Local.sfilelabr)
' 	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewOuts.xml",v.Local.sfileouts)
' 	
'	f.Data.DataTable.SaveToXML("dtChildMat",0,true,v.Local.sfileMatl)
'	f.Data.DataTable.SaveToXML("dtChildLabr",0,true,v.Local.sfilelabr)
'	f.Data.DataTable.SaveToXML("dtChildOuts",0,true,v.Local.sfileouts)

'	Gui.FrmMaster.prgBar.Scrolling(False)
'	Gui.FrmMaster.lblProgBarStatus.Caption("Analyzing data..")
'	'Start the massive loop and start going through all the values!
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtAll.RowCount--,1)
'		f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MyRowID",v.Local.iCnt)
'		
'		'Find the row ids in the dtOper table first, this will be needed for updating
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtOper",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.DataTable.dtOperIds.Exists)
'			f.Data.Datatable.close("dtOperIds")
'		f.Intrinsic.Control.EndIf
'		F.Data.Datatable.CreateFromString("dtOperIds",v.Local.sRet,"RowID","string","","*!*",true)
'		
'		'fIND THE ROW Ids for dtAllM
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtAllM",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.DataTable.dtAllMIds.Exists)
'			f.Data.Datatable.close("dtAllMIds")
'		f.Intrinsic.Control.EndIf
'		F.Data.Datatable.CreateFromString("dtAllMIds",v.Local.sRet,"RowID","string","","*!*",true)
'		
'		'fIND THE ROW Ids for dtAllO
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtAllO",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.DataTable.dtAllOIds.Exists)
'			f.Data.Datatable.close("dtAllOIds")
'		f.Intrinsic.Control.EndIf
'		F.Data.Datatable.CreateFromString("dtAllOIds",v.Local.sRet,"RowID","string","","*!*",true)
'		
'		'Set normal variables
'		v.Local.sCustPO.Set(V.DataTable.dtAll(V.Local.iCnt).CUSTOMER_PO!FIELDVALTRIM)
'		f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUSTOMER_PO,"OperValue",V.DataTable.dtAll(V.Local.iCnt).CUSTOMER_PO!FIELDVALTRIM)
'		
'		'Order sort
'		f.Intrinsic.String.Build("ORDER_NO='{0}' AND RECORD_TYPE='A'",v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtOrd",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"CodeSort",v.DataTable.dtOrd(v.Local.sret(0)).CODE_SORT!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CodeSort,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).CODE_SORT!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"CodeSort2",v.DataTable.dtOrd(v.Local.sret(0)).ORDER_SORT_2!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CodeSort2,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).ORDER_SORT_2!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOTerms",v.DataTable.dtOrd(v.Local.sret(0)).Terms!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOTerms,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).Terms!FIELDVALTRIM)
'			
'			f.Intrinsic.String.Left(v.DataTable.dtOrd(v.Local.sRet(0)).DATE_ORDER!FIELDVAL,2,v.Local.sMonth)
'			f.Intrinsic.String.Right(v.DataTable.dtOrd(v.Local.sRet(0)).DATE_ORDER!FIELDVAL,2,V.Local.sYear)
'			f.Intrinsic.String.Mid(v.DataTable.dtOrd(v.Local.sRet(0)).DATE_ORDER!FIELDVAL,3,2,V.Local.sDay)
'			f.Intrinsic.Date.DateSerial(v.Local.sYear,v.Local.sMonth,v.Local.sDay,v.Local.dDateFull)
'			
'			'Need to format the date properly
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SODate",v.Local.dDateFull)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SODate,"OperValue",v.Local.dDateFull)
'		f.Intrinsic.Control.EndIf
'		
'		'SO lines 1 & 2
'		f.Intrinsic.String.Build("ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER_LINE!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtOrd",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOUSER_3",v.DataTable.dtOrd(v.Local.sret(0)).USER_3!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOUSER_3,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).USER_3!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOUSER_4",v.DataTable.dtOrd(v.Local.sret(0)).USER_4!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOUSER_4,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).USER_4!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOUSER_5",v.DataTable.dtOrd(v.Local.sret(0)).USER_5!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOUSER_5,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).USER_5!FIELDVALTRIM)
'		f.Intrinsic.Control.EndIf
'		
'		'SO Notes
'		f.Intrinsic.String.Build("SO='{0}' AND SOLINE='{1}'",v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER_LINE!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtSONotes",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SONotes",V.DataTable.dtSONotes(v.Local.sret(0)).NOTES!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SONotes,"OperValue",V.DataTable.dtSONotes(v.Local.sret(0)).NOTES!FIELDVALTRIM)
'		f.Intrinsic.Control.EndIf
'		
'		'Material check
'		f.Intrinsic.Control.If(v.Local.iCnt,=,218)
'			'f.Intrinsic.Debug.ShowCallerInfo
'		f.Intrinsic.Control.EndIf
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("JobMat",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","ALL")
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","ALL")
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","ALL")
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","ALL")
'		f.Intrinsic.Control.Else
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.If(v.Local.sRet.UBound,>,0)
'				'Partial material issued, make it a two
'				f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","SOME")
'				f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","SOME")
'				f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","SOME")
'				f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","SOME")
'			F.Intrinsic.Control.Else
'				F.Intrinsic.Control.If(V.DataTable.JobMat(V.Local.sRet(0)).FLAG_CLOSED!FIELDVALTRIM,=,"")
'					f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","NONE")
'					f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","NONE")
'					f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","NONE")
'					f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","NONE")
'				f.Intrinsic.Control.Else
'					f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","ALL")
'					f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","ALL")
'					f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","ALL")
'					f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","ALL")
'				F.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf

'		V.Local.sJob.Set(V.DataTable.dtAll(V.Local.iCnt).JOB!FieldVal)
'		V.Local.sSuffix.Set(V.DataTable.dtAll(V.Local.iCnt).SUFFIX!FieldVal)
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSearch)
'		f.Data.DataTable.Select("JobOp",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.For(v.local.x,0,v.Local.sRet.UBound,1)
'				v.Local.sStep.Set(v.DataTable.JobOp(v.Local.sRet(v.Local.x)).JOBSTEPS!FIELDVALTRIM)
'				
'				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"TASK")
'					v.Local.sStep.Set(v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM)
'				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"~TASK")
'					f.Intrinsic.String.Concat("~",v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM,v.Local.sStep)
'				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.String.Concat(v.Local.sJobsteps,v.Local.sStep," / ",v.Local.sJobSteps)
'			f.Intrinsic.Control.Next(v.Local.x)
'			F.Intrinsic.String.InstrRev(V.Local.sJobSteps,"/",V.Local.lret)
'			f.Intrinsic.Math.Sub(v.Local.lret,1,v.Local.lret)
'			f.Intrinsic.String.Left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
'			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
'		f.Intrinsic.Control.Else
'			v.Local.sJobSteps.Set("")
'		f.Intrinsic.Control.EndIf

'		f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"JobSteps",v.Local.sJobSteps)
'		f.Intrinsic.Control.CallSub(setOperData,"OperColumn",JobSteps,"OperValue",v.Local.sJobSteps)
'		
'		v.Local.sJobSteps.Set("")
'		F.Intrinsic.String.Build("SELECT TOP 2 A.JOB,A.SFX,A.SEQ,A.SEQTYPE,A.SEQRES,A.PCSREMAIN,A.STARTDATE,IF(WORK_GROUP <> '',D.WC_DEPT,B.WC_DEPT) AS DEPT FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2' AND A.JOB = '{0}' AND A.SFX = '{1}' ORDER BY A.JOB,A.SFX,A.SEQ;",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'		F.ODBC.Connection!CON.OpenLocalRecordsetRO("rstInfo",V.Local.sSQL)
'		V.Local.sDept.Set("")
'		V.Local.sCurOper.Set("")
'		V.Local.dCurOperDate.Set(01/01/1900)
'		V.Local.sNextOper.Set("")
'		V.Local.sOutside.Set("")
'		V.Local.dShipDate.Set(01/01/1900)
'		F.Intrinsic.Control.If(V.ODBC.CON!rstInfo.EOF,=,True)
'			V.Local.sCurOper.Set("WIPTOFG")
'			V.Local.fPcsRem.Set(0)
'			V.Local.sNextOper.Set("")
'			V.Local.sDept.Set("")
'		F.Intrinsic.Control.Else
'			F.Intrinsic.Control.DoUntil(V.ODBC.CON!rstInfo.EOF,=,True)
'				F.Intrinsic.Control.SelectCase(V.ODBC.CON!rstInfo.FieldValTrim!SEQTYPE)
'					F.Intrinsic.Control.Case(1)
'						F.Intrinsic.Control.If(V.Local.sCurOper,=,"")
'							V.Local.sDept.Set(V.ODBC.CON!rstInfo.FieldValTrim!DEPT)
'							V.Local.sCurOper.Set(V.ODBC.CON!rstInfo.FieldValTrim!SEQRES)
'							F.Intrinsic.Control.If(V.ODBC.CON!rstInfo.FieldVal!STARTDATE,=,"")
'								V.Local.dCurOperDate.Set(01/01/1900)
'							F.Intrinsic.Control.Else
'								V.Local.dCurOperDate.Set(V.ODBC.CON!rstInfo.FieldVal!STARTDATE)
'							F.Intrinsic.Control.EndIf
'							V.Local.fPcsRem.Set(V.ODBC.CON!rstInfo.FieldValFloat!PCSREMAIN)
'						F.Intrinsic.Control.Else
'							V.Local.sNextOper.Set(V.ODBC.CON!rstInfo.FieldValTrim!SEQRES)
'							V.Local.fPcsRem.Set(V.ODBC.CON!rstInfo.FieldValFloat!PCSREMAIN)
'						F.Intrinsic.Control.EndIf
'					F.Intrinsic.Control.Case(3)
'						F.Intrinsic.Control.If(V.Local.sCurOper,=,"")
'							V.Local.sDept.Set("")
'							V.Local.sCurOper.Set("OUTSIDE")
'							F.Intrinsic.Control.If(V.ODBC.CON!rstInfo.FieldVal!STARTDATE,=,"")
'								V.Local.dCurOperDate.Set(01/01/1900)
'							F.Intrinsic.Control.Else
'								V.Local.dCurOperDate.Set(V.ODBC.CON!rstInfo.FieldVal!STARTDATE)
'							F.Intrinsic.Control.EndIf
'							V.Local.fPcsRem.Set(V.ODBC.CON!rstInfo.FieldValFloat!PCSREMAIN)
'						F.Intrinsic.Control.Else
'							F.Intrinsic.Control.If(V.Local.sOutside,=,"")
'								V.Local.sNextOper.Set("OUTSIDE")
'							F.Intrinsic.Control.Else
'								V.Local.sNextOper.Set("OUTSIDE")
'							F.Intrinsic.Control.EndIf
'						F.Intrinsic.Control.EndIf
'				F.Intrinsic.Control.EndSelect
'			F.ODBC.CON!rstInfo.MoveNext
'			F.Intrinsic.Control.Loop
'		F.Intrinsic.Control.EndIf
'		F.ODBC.CON!rstInfo.Close

'		F.Intrinsic.String.Build("SELECT TOP 1 SEQRES,STARTDATE FROM APSV3_JBLINES WHERE SEQTYPE = '3' AND JOB = '{0}' AND SFX = '{1}' AND COMPLDATE IS NULL ORDER BY SEQ;",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'		F.ODBC.Connection!CON.ExecuteAndReturn(V.Local.sSQL,V.Local.sOutside)
'		F.Intrinsic.String.Split(V.Local.sOutside,"*!*",V.Local.sOutside)
'		F.Intrinsic.Control.If(V.Local.sOutside(1),=,"OOB",OR,V.Local.sOutside(1),=,"")
'			V.Local.dShipDate.Set(01/01/1900)
'		F.Intrinsic.Control.Else
'			V.Local.dShipDate.Set(V.Local.sOutside(1))
'		F.Intrinsic.Control.EndIf
'		V.Local.sOutside.Set(V.Local.sOutside(0))

'		F.Intrinsic.String.Build("SELECT SEQTYPE, CONVERT(HOURSORIG+INITSU,SQL_NUMERIC) AS EST_HRS, IFNULL(COMPLDATE,'1900-01-01') AS COMPLDATENEW, Float, SPM, HoursAppl, (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float) as TotHrsRem,(((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))) as TotHrsRemNoFloat FROM APSV3_JBLINES WHERE (SEQTYPE = '1' OR SEQTYPE='3') AND JOB = '{0}' AND SFX = '{1}'  AND COMPLDATENEW='1900-01-01' ;",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'		f.Intrinsic.Control.If(v.DataTable.dtSeq.Exists)
'			f.Data.DataTable.Close("dtSeq")
'		f.Intrinsic.Control.EndIf
'		f.Data.DataTable.CreateFromSQL("dtSEQ","con",v.Local.sSQL)
'		F.Intrinsic.Control.If(V.Local.SJOB,=,"012391")
'		F.Intrinsic.Control.AndIf(V.Local.sSuffix,=,"001")
''			f.Intrinsic.Debug.ShowCallerInfo
'		F.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.For(v.Local.j,0,v.DataTable.dtSeq.RowCount--,1)
'			F.Intrinsic.Control.If(v.DataTable.dtSeq(v.Local.j).SeqType!fieldvalfloat,=,1)
'				F.Intrinsic.Math.Add(V.Local.fEstHrs,v.DataTable.dtSeq(v.Local.j).EST_HRS!FIELDVAL,V.Local.fEstHrs)
'			F.Intrinsic.Control.EndIf
'			f.Intrinsic.Math.Add(v.Local.fTotRemain,v.datatable.dtSEQ(v.Local.j).TotHrsRem!fieldval,v.Local.fTotRemain)
'			f.Intrinsic.Math.Add(v.Local.fTotRemainNoFloat,v.datatable.dtSEQ(v.Local.j).TotHrsRemNoFloat!fieldval,v.Local.fTotRemainNoFloat)
'		f.Intrinsic.Control.Next(v.Local.j)

'		F.Intrinsic.Control.If(V.Local.fEstHrs,=,0)
'			V.Local.fEstHrs.Set(0.00)
'			V.Local.fRemHrs.Set(0.00)
'		F.Intrinsic.Control.Else
'			F.Intrinsic.Math.Sub(V.Local.fEstHrs,V.DataTable.dtAll(V.Local.iCnt).ACT_HRS!FieldValFloat,V.Local.fRemHrs)
'		F.Intrinsic.Control.EndIf
'		
'		'Set Days Late

'		'Subtract 1 day off from the due date
'		f.Intrinsic.Date.DateAdd("D",-1,v.DataTable.dtAll(v.Local.icnt).DATE_DUE!FIELDVAL,v.Local.dNewDate)
'		'Reciprocal for the total remaining time and rounded
'		f.Intrinsic.Math.Mult(v.Local.fTotRemain,"-1",v.Local.fTotRemainRecip)
'		f.Intrinsic.Math.Mult(v.Local.fTotRemainNoFloat,"-1",v.Local.fTotRemainNoFloatRecip)
'		f.Intrinsic.Control.If(v.Local.fTotRemainRecip,<>,0)
'			F.Intrinsic.Math.Div(V.Local.fTotRemainRecip,8,v.Local.fTotRemainRecip)
'			F.Intrinsic.Math.Round(v.Local.fTotRemainRecip,0,v.Local.fTotRemainRecip)
'		f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.If(v.Local.fTotRemainNoFloatRecip,<>,0)
'			F.Intrinsic.Math.Div(V.Local.fTotRemainNoFloatRecip,8,v.Local.fTotRemainNoFloatRecip)
'			F.Intrinsic.Math.Round(v.Local.fTotRemainNoFloatRecip,0,v.Local.fTotRemainNoFloatRecip)
'		f.Intrinsic.Control.EndIf
'		'Subtract the total remain days
'		f.Intrinsic.Date.DateAdd("D",v.Local.fTotRemainRecip,v.Local.dNewDate,v.Local.dNewDateWithFloat)
'		f.Intrinsic.Date.DateAdd("D",v.Local.fTotRemainNoFloatRecip,v.Local.dNewDate,v.Local.dNewDateNoFloat)
'		'Calculate days behind
'		f.Intrinsic.Date.DateDiff("D",V.Ambient.Date,V.Local.dNewDateWithFloat,V.Local.iDaysLate)
'		f.Intrinsic.Date.DateDiff("D",V.Ambient.Date,V.Local.dNewDateNoFloat,V.Local.iDaysLateNoFloat)
'		'Set the dates one final time
'		f.Intrinsic.Math.Mult(v.Local.iDaysLate,"-1",v.Local.iDaysLateREcip)
'		f.Intrinsic.Math.Mult(v.Local.iDaysLateNoFloat,"-1",v.Local.iDaysLateNoFloatRecip)
'		f.Intrinsic.Date.DateAdd("D",v.Local.iDaysLateRecip,v.Local.dNewDate,v.Local.dNewDateWithFloat)
'		f.Intrinsic.Date.DateAdd("D",v.Local.iDaysLateNoFloatRecip,v.local.dNewDate,v.Local.dNewDateNoFloat)
'		
'		f.Intrinsic.Control.If(v.DataTable.dtAll(v.Local.iCnt).DATE_DUE!FIELDVAL,>,v.Local.dNewDateWithFloat)
'			v.Local.sJobStatus.Set("OKAY")
'		f.Intrinsic.Control.ElseIf(v.DataTable.dtAll(v.Local.iCnt).DATE_DUE!FIELDVAL,<,v.Local.dNewDateWithFloat)
'			f.Intrinsic.Control.If(v.DataTable.dtAll(v.Local.iCnt).DATE_DUE!FIELDVAl,>=,v.Local.dNewDateNoFloat)
'				v.Local.sJobStatus.Set("ATTENTION")
'			F.Intrinsic.Control.Else
'				v.Local.sJobStatus.Set("ISSUE")
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf

'		F.Intrinsic.Control.If(V.Local.dCurOperDate,=,V.Local.dDateCheck)
'		F.Intrinsic.Control.AndIf(V.Local.dShipDate,=,V.Local.dDateCheck)
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)			
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.ElseIf(V.Local.dCurOperDate,=,V.Local.dDateCheck)
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"SHIP_TO_OP",V.Local.dShipDate,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.ElseIf(V.Local.dShipDate,=,V.Local.dDateCheck)
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"CUR_OPER_DATE",V.Local.dCurOperDate,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.Else
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"CUR_OPER_DATE",V.Local.dCurOperDate,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"SHIP_TO_OP",V.Local.dShipDate,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.EndIf
'		V.Local.fEstHrs.Set(0)
'		V.Local.fTotRemain.Set(0)
'		V.Local.fTotRemainNoFloat.Set(0)
'		gui.FrmMaster.prgBar.Value(v.Local.iCnt)
'		'gui.FrmMaster.lbl3.Caption(v.Local.icnt)
'	f.Intrinsic.Control.Next(v.Local.iCnt)
'	v.local.iHolder.Set(v.Local.iCnt)
	'*************************************************************************************************
	
'	Gui.FrmMaster.prgBar.Scrolling(True)

	'SO Terms
	gui.FrmMaster.prgBar.Value(12)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting SO Terms...")
	f.Data.Dictionary.CreateFromSQL("dSOTerms","con","SELECT ORDER_NO AS 'SALES_ORDER', TERMS FROM V_ORDER_HEADER")
	f.Data.Dictionary.SetDefaultReturn("dSOTerms","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOTerms","SALES_ORDER","SOTERMS")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOTerms","SALES_ORDER","SOTERMS")
	F.Data.Dictionary.Close("dSOTerms")
	
	'CodeSort
	gui.FrmMaster.prgBar.Value(13)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Code Sort...")
	f.Data.Dictionary.CreateFromSQL("dCodeSort","con","SELECT ORDER_NO AS 'SALES_ORDER', CODE_SORT FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dCodeSort","")
	F.Data.DataTable.FillFromDictionary("dtAll","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtAllO","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtAllM","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtOper","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.Dictionary.Close("dCodeSort")
	
	'CodeSort2
	gui.FrmMaster.prgBar.Value(14)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Code Sort 2...")
	f.Data.Dictionary.CreateFromSQL("dCodeSort2","con","SELECT ORDER_NO AS 'SALES_ORDER', ORDER_SORT_2 FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dCodeSort2","")
	F.Data.DataTable.FillFromDictionary("dtAll","dCodeSort2","SALES_ORDER","CodeSort2")
	F.Data.DataTable.FillFromDictionary("dtOper","dCodeSort2","SALES_ORDER","CodeSort2")
	F.Data.Dictionary.Close("dCodeSort2")
	
	'SODate
	gui.FrmMaster.prgBar.Value(15)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting SO Date...")
	f.Data.Dictionary.CreateFromSQL("dSodate","con","SELECT ORDER_NO AS 'SALES_ORDER', DATE_ORDER FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dSodate","01/01/1900")
	F.Data.DataTable.FillFromDictionary("dtAll","dSoDATE","SALES_ORDER","SODate")
	F.Data.DataTable.FillFromDictionary("dtOper","dSoDATE","SALES_ORDER","SODate")
	F.Data.Dictionary.Close("dSoDATE")
	
	'SOUSER_3
	gui.FrmMaster.prgBar.Value(16)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting SO User 3...")
	f.Data.Dictionary.CreateFromSQL("dSOUSER_3","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALES_ORDER_LINE', USER_3 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_3","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOUSER_3","SALES_ORDER_LINE","SOUSER_3")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOUSER_3","SALES_ORDER_LINE","SOUSER_3")
	F.Data.Dictionary.Close("dSOUSER_3")
	
	'SOUSER_4
	gui.FrmMaster.prgBar.Value(17)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting SO User 4...")
	f.Data.Dictionary.CreateFromSQL("dSOUSER_4","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALES_ORDER_LINE', USER_4 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_4","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOUSER_4","SALES_ORDER_LINE","SOUSER_4")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOUSER_4","SALES_ORDER_LINE","SOUSER_4")
	F.Data.Dictionary.Close("dSOUSER_4")
	
	'SOUSER_5
	gui.FrmMaster.prgBar.Value(18)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting SO User 5...")
	f.Data.Dictionary.CreateFromSQL("dSOUSER_5","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALES_ORDER_LINE', USER_5 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_5","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOUSER_5","SALES_ORDER_LINE","SOUSER_5")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOUSER_5","SALES_ORDER_LINE","SOUSER_5")
	F.Data.Dictionary.Close("dSOUSER_5")
	
	'SONotes
	gui.FrmMaster.prgBar.Value(19)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting SO Notes...")
	F.Data.Dictionary.CreateFromSQL("dSONotes","con","SELECT CONCAT(SO,CONCAT(SOLINE,'0')) AS 'SALES_ORDER_LINE', NOTES AS 'SONotes' FROM GAB_4167_SO_NOTES")
	F.Data.Dictionary.SetDefaultReturn("dSONotes","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSONotes","JS","SONotes")
	F.Data.DataTable.FillFromDictionary("dtOper","dSONotes","JS","SONotes")
	F.Data.Dictionary.Close("dSONotes")
	
	'Material Status
	gui.FrmMaster.prgBar.Value(20)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Material Status...")
	f.Intrinsic.Control.If(v.DataTable.dtIssue.Exists)
        f.Data.DataTable.close("dtIssue")
    f.Intrinsic.Control.EndIf
    f.Data.DataTable.CreateFromSQL("dtIssue","con","select Job+Suffix as JS,count(*) as SeqCount from Job_Operations where  LMO = 'M' and Seq < '990000' group by job,suffix",True)
	f.Data.Dictionary.CreateFromSQL("dAllReadyIssue","con","select Job+Suffix as JS,count(*) as SeqCount from Job_Operations where  LMO = 'M' and Seq < '990000' and IsNull(Flag_Closed,'') = 'Y' group by job,suffix")
    f.Data.Dictionary.SetDefaultReturn("dAllReadyIssue",0)
    f.Data.DataTable.AddColumn("dtIssue","SeqIssuedNum",Long,0)
    f.Data.DataTable.FillFromDictionary("dtIssue","dAllReadyIssue","JS","SeqIssuedNum")
    f.Data.DataTable.AddExpressionColumn("dtIssue","FlagIssue","String","IIF(SeqIssuedNum = SeqCount,'ALL',IIF(SeqIssuedNum = 0,'NONE','SOME'))")
    f.Data.Dictionary.CreateFromDatatable("dFlagIssue","dtIssue","JS","FlagIssue")
    f.Data.Dictionary.SetDefaultReturn("dFlagIssue","N/A")
    f.Data.DataTable.FillFromDictionary("dtAll","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtOper","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtAllM","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtAllO","dFlagIssue","JS","MaterialIssue")
    f.Data.Dictionary.close("dFlagIssue")
    f.Data.Dictionary.close("dAllReadyIssue")
	
	
	'Create dictionaries from APS table: logic: select top 2 record for each job+suffix. Based on fields to get, will need to first or the second record, so will use the dictionaries differently
	'Before this, they use a record set of top 2 row to find the value for these variables:
	V.Local.sDept.Set("")
	V.Local.sCurOper.Set("")
	V.Local.dCurOperDate.Set(01/01/1900)
	V.Local.sNextOper.Set("")
	V.Local.sOutside.Set("")	
	
	'Department (first row)
	gui.FrmMaster.prgBar.Value(21)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Department...")
	f.Data.Dictionary.CreateFromSQL("dDept","con","Select A.JOB + A.SFX as JS,If(A.SeqType = '3','',IF(WORK_GROUP <> '',D.WC_DEPT,B.WC_DEPT))  AS DEPT FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dDept","")
	f.Data.DataTable.FillFromDictionary("dtAll","dDept","JS","DEPT")	
	f.Data.DataTable.FillFromDictionary("dtOper","dDept","JS","DEPT")	
	f.Data.Dictionary.Close("dDept")
	
	'CurOp (first row)
	gui.FrmMaster.prgBar.Value(22)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Current Operation...")
	f.Data.Dictionary.CreateFromSQL("dCurOp","con"," Select A.JOB + A.SFX as JS,LTRIM(RTRIM(If(A.SeqType = '3','OUTSIDE',SeqRes))) as CUR_OPER FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
'	f.Data.Dictionary.SetDefaultReturn("dCurOp","")
	f.Data.Dictionary.SetDefaultReturn("dCurOp","WIP to FG")
	f.Data.DataTable.FillFromDictionary("dtAll","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtOper","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtAllM","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtAllO","dCurOp","JS","CUR_OPER")
	f.Data.Dictionary.Close("dCurOp")
	
	'dCurOperDate (first row)
	gui.FrmMaster.prgBar.Value(23)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Current Operation Date...")
	f.Data.Dictionary.CreateFromSQL("dCurOperDate","con","Select A.JOB + A.SFX as JS,If(StartDate is Null,Convert('1900-01-01',SQL_Date),StartDate) as CUR_OPER_DATE FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dCurOperDate","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtAll","dCurOperDate","JS","CUR_OPER_DATE")
	f.Data.DataTable.FillFromDictionary("dtOper","dCurOperDate","JS","CUR_OPER_DATE")
	f.Data.Dictionary.Close("dCurOperDate")
	
	'sNextOper (second row)
	gui.FrmMaster.prgBar.Value(24)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Next Operation...")
	f.Data.Dictionary.CreateFromSQL("dNextOper","con","  Select A.JOb + A.SFX as JS,If(A.SeqType = '3','OUTSIDE',SeqRes) as NEXT_OPER   FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP  LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE   left join (select JOB  + SFX as JS,min(Seq) as MinSeq from   APSV3_JBLINES where COMPLDATE IS NULL and SEQTYPE <> '2' group by job,sfx) X on a.JS = x.JS WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    and a.Seq > x.MinSeq   ORDER BY A.JOB,A.SFX,A.SEQ; ")	
	f.Data.Dictionary.SetDefaultReturn("dNextOper","")
	f.Data.DataTable.FillFromDictionary("dtAll","dNextOper","JS","NEXT_OPER")
	f.Data.DataTable.FillFromDictionary("dtOper","dNextOper","JS","NEXT_OPER")
	f.Data.Dictionary.Close("dNextOper")
	
	'sPcsRem (second row)
	gui.FrmMaster.prgBar.Value(25)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Pcs Remaining...")
	f.Data.Dictionary.CreateFromSQL("dPcsRem","con","  Select A.JOb + A.SFX as JS,PcsRemain   FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP  LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE   left join (select JOB  + SFX as JS,min(Seq) as MinSeq from   APSV3_JBLINES where COMPLDATE IS NULL and SEQTYPE <> '2' group by job,sfx) X on a.JS = x.JS WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    and a.Seq > x.MinSeq   ORDER BY A.JOB,A.SFX,A.SEQ; ")	
	f.Data.Dictionary.SetDefaultReturn("dPcsRem",0)	
	f.Data.DataTable.FillFromDictionary("dtAll","dPcsRem","JS","PCS_REM")
	f.Data.DataTable.FillFromDictionary("dtOper","dPcsRem","JS","PCS_REM")
	f.Data.Dictionary.Close("dPcsRem")
	''''''''''''''''''''''''''''''''''''''''''''''
	
	'Est_Hrs
	gui.FrmMaster.prgBar.Value(26)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Est Hours...")
	f.Data.Dictionary.CreateFromSQL("dEst_Hrs","con","SELECT JS, Sum( CONVERT(HOURSORIG+INITSU,SQL_NUMERIC)) AS EST_HRS  FROM APSV3_JBLINES  WHERE (SEQTYPE = '1')  group by JS")
	f.Data.Dictionary.SetDefaultReturn("dEst_Hrs",0)	
	f.Data.DataTable.FillFromDictionary("dtAll","dEst_Hrs","JS","EST_HRS")
	f.Data.DataTable.FillFromDictionary("dtOper","dEst_Hrs","JS","EST_HRS")
	f.Data.Dictionary.Close("dEst_Hrs")
	
	'Rem_Hrs
	gui.FrmMaster.prgBar.Value(27)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Remaining Hours...")
	f.Data.DataTable.AddExpressionColumn("dtAll","Remaining_Hrs","float","EST_HRS - ACT_HRS")
	f.Data.Dictionary.createfromdatatable("dRemHrs","dtAll","JS","Remaining_Hrs")
	f.Data.Dictionary.SetDefaultReturn("dRemHrs",0)
	f.Data.DataTable.FillFromDictionary("dtAll","dRemHrs","JS","REM_HRS")
	f.Data.DataTable.FillFromDictionary("dtOper","dRemHrs","JS","REM_HRS")
	f.Data.Dictionary.Close("dRemHrs")
	
	'Temporary columns to help with calculations
	F.Data.DataTable.AddColumn("dtAll","TOT_HRS_REM_NO_FLOAT",Float,"0")
	F.Data.DataTable.AddColumn("dtAll","TODAYS_DATE",Date,v.Ambient.Date)
	
	'Total hours remaining
	gui.FrmMaster.prgBar.Value(28)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Total Hours Remaining...")
	F.Intrinsic.Control.If(V.DataTable.dtTotHours.Exists)
		F.Data.Datatable.Close("dtTotHours")
	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtTotHours","con","SELECT JS, if((Sum( (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float))*-1)=0,0, (Sum( (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float))*-1)/8) AS TotHrsRem ,if((sum((((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))))*-1)=0,0,(sum((((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))))*-1)/8) AS TotHrsRemNoFloat  FROM APSV3_JBLINES  WHERE (SEQTYPE = '1' or SeqType = '3' )  AND IFNULL(COMPLDATE,'1900-01-01')  = '1900-01-01'  group by JS",True)
	f.Data.Dictionary.CreateFromDatatable("dTotHrsRem","dtTotHours","JS","TotHrsRem")
	f.Data.Dictionary.SetDefaultReturn("dTotHrsRem",0)
	f.Data.DataTable.FillFromDictionary("dtAll","dTotHrsRem","JS","TOT_HRS_REM")
	f.Data.DataTable.FillFromDictionary("dtOper","dTotHrsRem","JS","TOT_HRS_REM")
	f.Data.Dictionary.Close("dTotHrsRem")
	
	'Total hours remaining without float
	gui.FrmMaster.prgBar.Value(29)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Total Hours Remaining Without Float...")
	f.Data.Dictionary.CreateFromDatatable("dTotHrsRemNoFloat","dtTotHours","JS","TotHrsRemNoFloat")
	f.Data.Dictionary.SetDefaultReturn("dTotHrsRemNoFloat",0)
	f.Data.DataTable.FillFromDictionary("dtAll","dTotHrsRemNoFloat","JS","TOT_HRS_REM_NO_FLOAT")
	f.Data.Dictionary.Close("dTotHrsRemNoFloat")
		
	'Subtract the hours converted into days from the due date 
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","TOT_HRS_REM","DATE_DUE_FLOAT")
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","TOT_HRS_REM_NO_FLOAT","DATE_DUE_NO_FLOAT")
	
	'======added for removing Date processing in loop==================
	'dtAll
	f.Data.DataTable.AddColumn("dtAll","Diff1","Long",0)
	f.Data.DataTable.AddColumn("dtAll","Diff2","Long",0)
	f.Data.DataTable.AddColumn("dtAll","Diff3","Long",0)
	
	f.Intrinsic.Control.If(V.Screen.FrmMaster!chkClosed.Value,=,"0")
		f.Data.DataTable.DateDiff("dtAll","SCHEDULED_DUE_DATE","DATE_DUE","d","Diff1")
	f.Intrinsic.Control.Else
		f.Data.DataTable.DateDiff("dtAll","DATE_CLOSED","DATE_DUE","d","Diff1")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CopyColumn("dtAll","Diff1","DAYS_LATE")
	
	f.Data.DataTable.DateDiff("dtAll","DATE_DUE_FLOAT","TODAYS_DATE","d","Diff1")	
	f.Data.DataTable.DateDiff("dtAll","DATE_DUE_NO_FLOAT","TODAYS_DATE","d","Diff2")	
	
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","Diff1","DATE_DUE_FLOAT")
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","Diff2","DATE_DUE_NO_FLOAT")
	
	f.Data.DataTable.DateDiff("dtAll","DATE_DUE_NO_FLOAT","DATE_DUE","d","Diff3")
	F.Data.DataTable.CopyColumn("dtAll","Diff3","DAYS_LATE_NO_FLOAT")
	
	f.Data.DataTable.AddExpressionColumn("dtAll","Status2","String","IIF(DATE_DUE > DATE_DUE_FLOAT,'OKAY',IIF(DATE_DUE >= DATE_DUE_NO_FLOAT,'ATTENTION','ISSUE'))")
	f.Data.DataTable.CopyColumn("dtAll","Status2","JobStatus")
	
	F.Data.DataTable.RemoveColumn("dtAll","Diff1")
	F.Data.DataTable.RemoveColumn("dtAll","Diff2")
	F.Data.DataTable.RemoveColumn("dtAll","Diff3")
	F.Data.Datatable.RemoveColumn("dtAll","Status2")
	
	'dtOper
	f.Data.DataTable.AddColumn("dtOper","Diff1","Long",0)
	
	f.Intrinsic.Control.If(V.Screen.FrmMaster!chkClosed.Value,=,"0")
		f.Data.DataTable.DateDiff("dtOper","SCHEDULED_DUE_DATE","DATE_DUE","d","Diff1")
	f.Intrinsic.Control.Else
		f.Data.DataTable.DateDiff("dtOper","DATE_CLOSED","DATE_DUE","d","Diff1")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CopyColumn("dtOper","Diff1","DAYS_LATE")
	
	F.Data.DataTable.RemoveColumn("dtOper","Diff1")
	'====================================================================
	
	'Modified by TDjohan - BEGIN - 01/31/2022
'	gui.FrmMaster.prgBar.Value(30)
'	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Job Steps...")
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtAll.RowCount--,1)
'		V.Local.sJob.Set(V.DataTable.dtAll(V.Local.iCnt).JOB!FieldVal)
'		V.Local.sSuffix.Set(V.DataTable.dtAll(V.Local.iCnt).SUFFIX!FieldVal)
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSearch)
'		f.Data.DataTable.Select("JobOp",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.For(v.local.x,0,v.Local.sRet.UBound,1)
'				v.Local.sStep.Set(v.DataTable.JobOp(v.Local.sRet(v.Local.x)).JOBSTEPS!FIELDVALTRIM)
'				
''				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"TASK")
''					v.Local.sStep.Set(v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM)
''				f.Intrinsic.Control.EndIf
''				
''				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"~TASK")
''					f.Intrinsic.String.Concat("~",v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM,v.Local.sStep)
''				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.String.Concat(v.Local.sJobsteps,v.Local.sStep," / ",v.Local.sJobSteps)
'			f.Intrinsic.Control.Next(v.Local.x)
'			F.Intrinsic.String.InstrRev(V.Local.sJobSteps,"/",V.Local.lret)
'			f.Intrinsic.Math.Sub(v.Local.lret,1,v.Local.lret)
'			f.Intrinsic.String.Left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
'			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
'		f.Intrinsic.Control.Else
'			v.Local.sJobSteps.Set("")
'		f.Intrinsic.Control.EndIf

'		f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"JobSteps",v.Local.sJobSteps)
''		f.Intrinsic.Control.CallSub(setOperData,"OperColumn",JobSteps,"OperValue",v.Local.sJobSteps)
'		
'		v.Local.sJobSteps.Set("")
'	f.Intrinsic.Control.Next(v.Local.iCnt)
'	
'	F.Data.Dictionary.CreateFromDataTable("dJobSteps","dtAll","JS","JobSteps")
'	F.Data.DataTable.FillFromDictionary("dtOper","dJobSteps","JS","JobSteps")
'	F.Data.Dictionary.Close("dJobSteps")
	
	gui.FrmMaster.prgBar.Value(30)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Job Steps...")
	f.Intrinsic.String.Build("Select Job + Suffix as JS, IF(Flag_Closed = 'Y', CONCAT('~#!',rtrim(Part)), rtrim(Part)) as JobStep from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '995000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("dtJobOperationSteps","CON",v.Local.sSQL,True)
	
	'Get the check mark sign
	f.Intrinsic.String.Concat(v.Caller.GasDir,"\GAB_6271_COMPLETION.txt",v.Local.sCMarkFile)
	f.Intrinsic.File.File2String(v.Local.sCMarkFile,v.Local.sMark)
	
	'1/Add empty column JSBuffer
	f.Data.DataTable.AddColumn("dtJobOperationSteps","JsBuffer","String","")
	'2/SetValueOnNextLine with key JS, the start of the group will be blank
	f.Data.DataTable.SetValueOnNextLine("dtJobOperationSteps","JS","JsBuffer","JS")
	'3/Based on blank start of the group, create an expression column
	f.Data.DataTable.AddExpressionColumn("dtJobOperationSteps","StepFormat","String","IIF(JsBuffer = '','@!@' + JS + '#$%' + JobStep,JobStep)")
	'4/Get string from step 3
	f.Data.DataTable.ColumnToString("dtJobOperationSteps","StepFormat",v.Local.sRet)
	'5/Replace with delimiter " / "
	f.Intrinsic.String.Replace(v.Local.sRet,"*!*"," / ",v.Local.sRet)
	f.Intrinsic.String.Replace(v.Local.sRet," / @!@","@!@",v.Local.sRet)
	f.Intrinsic.String.Replace(v.Local.sRet,"~#!",v.Local.sMark,v.Local.sRet)
	'6/Create final table dtSteps
	f.Data.DataTable.CreateFromString("dtJobSteps",v.Local.sRet,"JS*!*JobSteps","String*!*String","#$%","@!@",True)
	f.Data.DataTable.DeleteRow("dtJobSteps",0)
	'Delete dtJobOperationSteps
	f.Data.DataTable.Close("dtJobOperationSteps")
	'Match the JobSteps to the dtAll and dtOper based on Job+Suffix (JS)
	f.Data.Dictionary.CreateFromDataTable("dJobSteps","dtJobSteps","JS","JobSteps")
	f.Data.Dictionary.SetDefaultReturn("dJobSteps","")
	f.Data.DataTable.FillFromDictionary("dtAll","dJobSteps","JS","JobSteps")
	f.Data.DataTable.FillFromDictionary("dtOper","dJobSteps","JS","JobSteps")
	f.Data.Dictionary.Close("dJobSteps")
	'Delete dtJobSteps
	f.Data.DataTable.Close("dtJobSteps")
	'Modified by TDjohan - END - 01/31/2022
	
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtOper.RowCount--,1)
'		V.Local.sJob.Set(V.DataTable.dtOper(V.Local.iCnt).JOB!FieldVal)
'		V.Local.sSuffix.Set(V.DataTable.dtOper(V.Local.iCnt).SUFFIX!FieldVal)
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSearch)
'		f.Data.DataTable.Select("JobOp",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.For(v.local.x,0,v.Local.sRet.UBound,1)
'				v.Local.sStep.Set(v.DataTable.JobOp(v.Local.sRet(v.Local.x)).JOBSTEPS!FIELDVALTRIM)
'				
''				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"TASK")
''					v.Local.sStep.Set(v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM)
''				f.Intrinsic.Control.EndIf
''				
''				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"~TASK")
''					f.Intrinsic.String.Concat("~",v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM,v.Local.sStep)
''				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.String.Concat(v.Local.sJobsteps,v.Local.sStep," / ",v.Local.sJobSteps)
'			f.Intrinsic.Control.Next(v.Local.x)
'			F.Intrinsic.String.InstrRev(V.Local.sJobSteps,"/",V.Local.lret)
'			f.Intrinsic.Math.Sub(v.Local.lret,1,v.Local.lret)
'			f.Intrinsic.String.Left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
'			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
'		f.Intrinsic.Control.Else
'			v.Local.sJobSteps.Set("")
'		f.Intrinsic.Control.EndIf

'		f.Data.DataTable.SetValue("dtOper",v.Local.iCnt,"JobSteps",v.Local.sJobSteps)
'		
'		v.Local.sJobSteps.Set("")
'	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	'Fill Job Status for Outside Process Tab
	gui.FrmMaster.prgBar.Value(31)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Job Status...")
	f.Data.Dictionary.createfromdatatable("dJobStatus","dtAll","JS","JobStatus")
	f.Data.Dictionary.SetDefaultReturn("dJobStatus","")
	f.Data.DataTable.FillFromDictionary("dtAllM","dJobStatus","JS","JobStatus")
	f.Data.DataTable.FillFromDictionary("dtAllO","dJobStatus","JS","JobStatus")
	f.Data.Dictionary.Close("dJobStatus")
	
	'Remove unnecessary columns
	f.Data.DataTable.RemoveColumn("dtAll","TODAYS_DATE")
	f.Data.DataTable.RemoveColumn("dtAll","DATE_DUE_NEW")
	f.Data.DataTable.RemoveColumn("dtAll","REMAINING_HRS")
	f.Data.DataTable.RemoveColumn("dtAll","TOT_HRS_REM_NO_FLOAT")
	
	'Create dtAll2 from dtAll
	f.Data.DataView.Create("dtAll","dvAll")
	F.Data.DataView.ToDataTable("dtAll","dvAll","dtAll2",True)
	
	gui.FrmMaster.prgBar.Value(32)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting doc control...")
	'Doc control for part
'	F.Data.DataTable.SetValue("dtAll2",-1,"PrtDocCntrl","DCS-OFF")
	F.Data.DataTable.SetValue("dtAll2",-1,"PrtDocCntrl","X")
'	F.Data.Dictionary.CreateFromSQL("dDCC","con","select DISTINCT rtrim(A.ID) AS Part, 'DCS-ON' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030'")
'	F.Data.Dictionary.CreateFromSQL("dDCC","con","select DISTINCT rtrim(A.ID) AS Part, 'O' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030'")
	F.Data.Dictionary.CreateFromSQL("dDCC","con","select rtrim(A.ID) AS Part, 'O' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030' GROUP BY Part, DCC")
'	F.Data.Dictionary.SetDefaultReturn("dDCC","DCS-OFF")
	F.Data.Dictionary.SetDefaultReturn("dDCC","X")
	F.Data.DataTable.FillFromDictionary("dtAll","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtAll2","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtAllM","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtAllO","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtOper","dDCC","Part","PrtDocCntrl")
	F.Data.Dictionary.Close("dDCC")
	
	gui.FrmMaster.prgBar.Value(33)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Inv Extra Text...")
	'Get Inventory Extra Text
	F.Data.Dictionary.CreateFromSQL("dInvExtraText","con","Select RTrim(PART) As PART,RTrim(TEXT) AS TEXT From V_INV_EXTRA_TEXT Order By PART;")
	F.Data.Dictionary.SetDefaultReturn("dInvExtraText","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dInvExtraText","MatPart","INV_EXTRA_TEXT")
	F.Data.DataTable.FillFromDictionary("dtAllO","dInvExtraText","MatPart","INV_EXTRA_TEXT")
	F.Data.Dictionary.Close("dInvExtraText")
	
	gui.FrmMaster.prgBar.Value(34)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting vendor currency...")
	'Get Vendor Currency
	F.Data.Dictionary.CreateFromSQL("dVendorCurrency","con","Select RTrim(Vendor) As Vendor,RTrim(Default_Currency) From V_VENDOR_INTL Where Vendor <> '' Order By Vendor;")
'	F.Data.Dictionary.SetDefaultReturn("dVendorCurrency","")
	F.Data.Dictionary.SetDefaultReturn("dVendorCurrency",V.Global.sComCurr)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendorCurrency","Vendor","VendorCurrency")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendorCurrency","Vendor","VendorCurrency")
	F.Data.Dictionary.Close("dVendorCurrency")
	
	gui.FrmMaster.prgBar.Value(35)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting vendor names...")
	'Vendor Master
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER where RTRIM(VENDOR) <> '';")
	F.Data.Dictionary.SetDefaultReturn("dVend","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVend","Vendor","VendorName")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVend","Vendor","VendorName")
	F.Data.Dictionary.Close("dVend")
	
	'Modified by TDjohan - BEGIN (04/01/2022)
	gui.FrmMaster.prgBar.Value(36)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting vendor quote cost...")
	'Vendor Quote
'	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select DISTINCT RTRIM(H.PART) AS Part, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.VENDOR, H.SEQ, H.LEAD_TIME")
'	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select DISTINCT RTRIM(H.PART) AS Part, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost, H.PUR_UM, H.CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.VENDOR, H.SEQ, H.LEAD_TIME, H.PUR_UM, H.CONVERSION")
'	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select DISTINCT RTRIM(H.PART) AS Part, H.PART AS PartWoTrim, RTRIM(H.PART_DESC) AS PART_DESC, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost, H.PUR_UM, H.CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.PART_DESC, H.VENDOR, H.SEQ, H.LEAD_TIME, H.PUR_UM, H.CONVERSION")
	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select RTRIM(H.PART) AS Part, H.PART AS PartWoTrim, RTRIM(H.PART_DESC) AS PART_DESC, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost, H.PUR_UM, H.CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.PART_DESC, H.VENDOR, H.SEQ, H.LEAD_TIME, H.PUR_UM, H.CONVERSION")
	F.Data.DataTable.AddColumn("dtVendorQuote","Exists","Boolean")
	F.Data.DataTable.AddExpressionColumn("dtVendorQuote","PartVendor","String","[Part]+'*!*'+[Vendor]")
	F.Data.DataTable.AddExpressionColumn("dtVendorQuote","PartVendorOutsideService","String","[PartWoTrim]+'*!*'+[PART_DESC]+'*!*'+[Vendor]")
	'Set the value of Exists column to True
	F.Data.DataTable.SetValue("dtVendorQuote",-1,"Exists",True)
	
	'Create dictionary Vendor Quote Cost
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteCost","dtVendorQuote","PartVendor","Cost")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteCost",0.000000)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteCost","PartVendor","COST")
	F.Data.Dictionary.Close("dVendQuoteCost")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteCost","dtVendorQuote","PartVendorOutsideService","Cost")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteCost",0.000000)
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteCost","PartVendorOutsideService","COST")
	F.Data.Dictionary.Close("dVendQuoteCost")
	
	'Create dictionary Vendor Quote Pur UM
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurUM","dtVendorQuote","PartVendor","PUR_UM")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurUM","")
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_PUR_UM","String")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuotePurUM","PartVendor","VEND_QTE_PUR_UM")
	'If the PO NO is blank then use the Vendor Quote Pur UM else use the Pur UM from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllM","FinalPurUM","String","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_UM <> '',VEND_QTE_PUR_UM,PURUM)")
	f.Data.DataTable.CopyColumn("dtAllM","FinalPurUM","PURUM")
	f.Data.DataTable.RemoveColumn("dtAllM","FinalPurUM")
	f.Data.DataTable.RemoveColumn("dtAllM","VEND_QTE_PUR_UM")
	F.Data.Dictionary.Close("dVendQuotePurUM")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurUM","dtVendorQuote","PartVendorOutsideService","PUR_UM")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurUM","")
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_PUR_UM","String")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuotePurUM","PartVendorOutsideService","VEND_QTE_PUR_UM")
	'If the PO NO is blank then use the Vendor Quote Pur UM else use the Pur UM from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllO","FinalPurUM","String","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_UM <> '',VEND_QTE_PUR_UM,PURUM)")
	f.Data.DataTable.CopyColumn("dtAllO","FinalPurUM","PURUM")
	f.Data.DataTable.RemoveColumn("dtAllO","FinalPurUM")
	f.Data.DataTable.RemoveColumn("dtAllO","VEND_QTE_PUR_UM")
	F.Data.Dictionary.Close("dVendQuotePurUM")
	
	'Create dictionary Vendor Quote Pur Conversion Factor
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurCnv","dtVendorQuote","PartVendor","CONVERSION")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurCnv",0.00000)
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_PUR_CNV","Float")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuotePurCnv","PartVendor","VEND_QTE_PUR_CNV")
	'If the PO NO is blank then use the Vendor Quote Pur Conversion else use the Pur Conversion from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllM","FinalPurCnv","Float","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_CNV <> 0.00000,VEND_QTE_PUR_CNV,PUR_CNV_FACTOR)")
	f.Data.DataTable.CopyColumn("dtAllM","FinalPurCnv","PUR_CNV_FACTOR")
	f.Data.DataTable.RemoveColumn("dtAllM","FinalPurCnv")
	f.Data.DataTable.RemoveColumn("dtAllM","VEND_QTE_PUR_CNV")
	F.Data.Dictionary.Close("dVendQuotePurCnv")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurCnv","dtVendorQuote","PartVendorOutsideService","CONVERSION")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurCnv",0.00000)
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_PUR_CNV","Float")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuotePurCnv","PartVendorOutsideService","VEND_QTE_PUR_CNV")
	'If the PO NO is blank then use the Vendor Quote Pur Conversion else use the Pur Conversion from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllO","FinalPurCnv","Float","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_CNV <> 0.00000,VEND_QTE_PUR_CNV,PUR_CNV_FACTOR)")
	f.Data.DataTable.CopyColumn("dtAllO","FinalPurCnv","PUR_CNV_FACTOR")
	f.Data.DataTable.RemoveColumn("dtAllO","FinalPurCnv")
	f.Data.DataTable.RemoveColumn("dtAllO","VEND_QTE_PUR_CNV")
	F.Data.Dictionary.Close("dVendQuotePurCnv")
	
	'Create dictionary Vendor Quote Sequence
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteSeq","dtVendorQuote","PartVendor","Seq")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteSeq","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteSeq","PartVendor","VendorQuoteSeq")
	F.Data.Dictionary.Close("dVendQuoteSeq")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteSeq","dtVendorQuote","PartVendorOutsideService","Seq")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteSeq","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteSeq","PartVendorOutsideService","VendorQuoteSeq")
	F.Data.Dictionary.Close("dVendQuoteSeq")
	
	gui.FrmMaster.prgBar.Value(37)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting vendor quote lead time...")
	'Add column to hold Lead Time from Vendor Quote
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_LEAD_TIME","Long")
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_EXISTS","Boolean")
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_LEAD_TIME","Long")
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_EXISTS","Boolean")
	'Create dictionary Vendor Quote Exists
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteExists","dtVendorQuote","PartVendor","Exists")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteExists",False)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteExists","PartVendor","VEND_QTE_EXISTS")
	F.Data.Dictionary.Close("dVendQuoteExists")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteExists","dtVendorQuote","PartVendorOutsideService","Exists")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteExists",False)
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteExists","PartVendorOutsideService","VEND_QTE_EXISTS")
	F.Data.Dictionary.Close("dVendQuoteExists")
	'Create dictionary Vendor Quote Lead Time
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteLeadTime","dtVendorQuote","PartVendor","LEAD_TIME")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteLeadTime",0)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteLeadTime","PartVendor","VEND_QTE_LEAD_TIME")
	F.Data.Dictionary.Close("dVendQuoteLeadTime")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteLeadTime","dtVendorQuote","PartVendorOutsideService","LEAD_TIME")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteLeadTime",0)
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteLeadTime","PartVendorOutsideService","VEND_QTE_LEAD_TIME")
	F.Data.Dictionary.Close("dVendQuoteLeadTime")
	'Close datatable
	F.Data.DataTable.Close("dtVendorQuote")
	'Create Expression Column for LEAD_TIME  
	F.Data.DataTable.AddExpressionColumn("dtAllM","LEAD_TIME","Long","IIF(VEND_QTE_EXISTS and VEND_QTE_LEAD_TIME > 0, VEND_QTE_LEAD_TIME, MATL_LEAD_TIME)")
	
	'Create Expression Column 
	'For dtAllM
	F.Data.DataTable.AddExpressionColumn("dtAllM","PartVendorQuoteSeq","String","[PartVendor]+'*!*'+[VendorQuoteSeq]")
	'Create DataTable
	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select RTRIM(PART) + '*!*' + RTRIM(VENDOR) + '*!*' + RTRIM(SEQ) AS PartVendorQuoteSeq, RTRIM(MFG_PART_NO) AS MfgPart, RTRIM(MFG_NAME) AS MfgName from V_VEND_QTE_HEADER")
	'Create dictionary Vendor Quote Mfg Part
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteMfg","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Create dictionary Vendor Quote Mfg Name
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteMfg","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Close datatable
	F.Data.DataTable.Close("dtVendorQuote")
	'Remove Expression Column
	F.Data.DataTable.RemoveColumn("dtAllM","PartVendorQuoteSeq")
	
	'For dtAllO
	F.Data.DataTable.AddExpressionColumn("dtAllO","PartVendorQuoteSeq","String","[PartVendorOutsideService]+'*!*'+[VendorQuoteSeq]")
	'Create DataTable
	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select PART + '*!*' + RTRIM(PART_DESC) + '*!*' + RTRIM(VENDOR) + '*!*' + RTRIM(SEQ) AS PartVendorQuoteSeq, RTRIM(MFG_PART_NO) AS MfgPart, RTRIM(MFG_NAME) AS MfgName from V_VEND_QTE_HEADER")
	'Create dictionary Vendor Quote Mfg Part
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteMfg","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Create dictionary Vendor Quote Mfg Name
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteMfg","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Close datatable
	F.Data.DataTable.Close("dtVendorQuote")
	'Remove Expression Column
	F.Data.DataTable.RemoveColumn("dtAllO","PartVendorQuoteSeq")
	
	'Added by TDjohan - BEGIN (04/01/2022)
	gui.FrmMaster.prgBar.Value(38)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting last purchase cost...")
	'Last Purchase Cost
	'Add new LastPurchaseCost & VendorQuoteCost Columns to dtAllM & dtAllO
	F.Data.DataTable.AddColumn("dtAllM","VendorQuoteCost","Float",0.00)
	F.Data.DataTable.AddColumn("dtAllO","VendorQuoteCost","Float",0.00)
	F.Data.DataTable.AddColumn("dtAllM","LastPurchaseCost","Float",0.00)
	F.Data.DataTable.AddColumn("dtAllO","LastPurchaseCost","Float",0.00)
	'VendorQuoteCost is already retrieved into COST column, so make a copy the value of COST column to VendorQuoteCost column
	F.Data.DataTable.CopyColumn("dtAllM","COST","VendorQuoteCost")
	F.Data.DataTable.CopyColumn("dtAllO","COST","VendorQuoteCost")
	'Create Dictionary for Last Purchase Cost
	'For dtAllM
'	F.Data.Dictionary.CreateFromSQL("dPOHistoryCost","con","select RTRIM(A.PART) AS Part, A.COST AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' ORDER BY A.PART;") 
	f.Intrinsic.String.Build("select RTRIM(A.PART)+'*!*'+RTRIM(A.VENDOR)+'*!*'+RTRIM(A.UM_INVENTORY), IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' ORDER BY A.PART;",v.Global.sComCurr,v.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("dPOHistoryCost","con",v.Local.sSQL) 
	F.Data.Dictionary.SetDefaultReturn("dPOHistoryCost",0.00)
	F.Data.DataTable.AddExpressionColumn("dtAllM","PartVendorPurUM","String","[MATPART]+'*!*'+[VENDOR]+'*!*'+[PURUM]")
	F.Data.DataTable.FillFromDictionary("dtAllM","dPOHistoryCost","PartVendorPurUM","LastPurchaseCost")
	F.Data.Dictionary.Close("dPOHistoryCost")
	F.Data.DataTable.RemoveColumn("dtAllM","PartVendorPurUM")
	'For dtAllO
	f.Intrinsic.String.Build("select A.PART+'*!*'+RTRIM(A.DESCRIPTION)+'*!*'+RTRIM(A.VENDOR)+'*!*'+RTRIM(A.UM_INVENTORY), IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' AND SUBSTRING(A.PART,17,1) = '*' ORDER BY A.PART;",v.Global.sComCurr,v.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("dPOHistoryCost","con",v.Local.sSQL) 
	F.Data.Dictionary.SetDefaultReturn("dPOHistoryCost",0.00)
	F.Data.DataTable.AddExpressionColumn("dtAllO","PartVendorPurUM","String","[OutsideServicePart]+'*!*'+TRIM([DESCR])+'*!*'+TRIM([VENDOR])+'*!*'+TRIM([PURUM])")
	F.Data.DataTable.FillFromDictionary("dtAllO","dPOHistoryCost","PartVendorPurUM","LastPurchaseCost")
	F.Data.Dictionary.Close("dPOHistoryCost")
	F.Data.DataTable.RemoveColumn("dtAllO","PartVendorPurUM")
	
	'Set the Purch Cost with this hierarchy
	'1. Use Vendor Quote Cost if a Vendor Quote exists
	'2. Use Last Purchase Cost
	'3. Use Burden Cost on WO Sequence
	F.Data.DataTable.AddExpressionColumn("dtAllM","ExprMaterialCost","Float","IIF(VEND_QTE_EXISTS, VendorQuoteCost, IIF(LastPurchaseCost > 0, LastPurchaseCost, BURDEN))")
	F.Data.DataTable.AddExpressionColumn("dtAllO","ExprMaterialCost","Float","IIF(VEND_QTE_EXISTS, VendorQuoteCost, IIF(LastPurchaseCost > 0, LastPurchaseCost, BURDEN))")
	
	'Copy the ExprMaterialCost into COST column
	F.Data.DataTable.CopyColumn("dtAllM","ExprMaterialCost","COST")
	F.Data.DataTable.CopyColumn("dtAllO","ExprMaterialCost","COST")
		
	'Remove the Columns
	F.Data.DataTable.RemoveColumn("dtAllM","ExprMaterialCost")
	F.Data.DataTable.RemoveColumn("dtAllM","VendorQuoteCost")
	F.Data.DataTable.RemoveColumn("dtAllM","LastPurchaseCost")
	F.Data.DataTable.RemoveColumn("dtAllO","ExprMaterialCost")
	F.Data.DataTable.RemoveColumn("dtAllO","VendorQuoteCost")
	F.Data.DataTable.RemoveColumn("dtAllO","LastPurchaseCost")
	'Added by TDjohan - END (04/01/2022)
	
	'Calculate the Purchase Qty
	'if Purchase according to WO Required Qty is active then Purchase Qty = WO Required Qty
	'Also convert to Purchase UM if the UM is different
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
		f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSTOPROD] / [PUR_CNV_FACTOR], [PCSTOPROD])")
		f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSTOPROD] / [PUR_CNV_FACTOR], [PCSTOPROD])")
	f.Intrinsic.Control.Else
		f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSREMAIN] / [PUR_CNV_FACTOR], [PCSREMAIN])")
		f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQty","Float","IIF([PURUM] <> [INVUM] AND [PUR_CNV_FACTOR] > 0.00000, [PCSREMAIN] / [PUR_CNV_FACTOR], [PCSREMAIN])")
	f.Intrinsic.Control.EndIf
	
	'Needs the Pur Qty to be in two decimals for correct Extension Amount
	f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQtyInteger","Long","[CalcPurQty]*100")
	f.Data.DataTable.AddExpressionColumn("dtAllM","CalcPurQtyTwoDecimal","Float","[CalcPurQtyInteger]/100")
	f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQtyInteger","Long","[CalcPurQty]*100")
	f.Data.DataTable.AddExpressionColumn("dtAllO","CalcPurQtyTwoDecimal","Float","[CalcPurQtyInteger]/100")
	
	f.Data.DataTable.CopyColumn("dtAllM","CalcPurQtyTwoDecimal","PUR_QTY")
	f.Data.DataTable.CopyColumn("dtAllO","CalcPurQtyTwoDecimal","PUR_QTY")

	f.Data.DataTable.RemoveColumn("dtAllM","CalcPurQtyTwoDecimal")
	f.Data.DataTable.RemoveColumn("dtAllM","CalcPurQtyInteger")
	f.Data.DataTable.RemoveColumn("dtAllM","CalcPurQty")
	f.Data.DataTable.RemoveColumn("dtAllO","CalcPurQtyTwoDecimal")
	f.Data.DataTable.RemoveColumn("dtAllO","CalcPurQtyInteger")
	f.Data.DataTable.RemoveColumn("dtAllO","CalcPurQty")
	
	'Added by TDjohan - BEGIN (04/01/2022)
	'Add Expression Column 'Extension'
'	F.Data.DataTable.AddExpressionColumn("dtAllM","EXTENSION","Float","COST*PCSTOPROD")
'	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PCSTOPROD")
	F.Data.DataTable.AddExpressionColumn("dtAllM","EXTENSION","Float","COST*PUR_QTY")
	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PUR_QTY")
	'Added by TDjohan - END (04/01/2022)
	
	'Getting Est Material Cost
	gui.FrmMaster.prgBar.Value(39)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Est Material Cost...")
	F.Data.Dictionary.CreateFromSQL("dEstMaterialCost","con","select CONCAT(JOB,SUFFIX) AS JS, SUM(DOLLARS_ESTIMATED) AS EstMaterialCost from V_JOB_OPERATIONS where LMO = 'M' group by JOB, SUFFIX;")
	F.Data.Dictionary.SetDefaultReturn("dEstMaterialCost",0.00)
	F.Data.DataTable.FillFromDictionary("dtAll","dEstMaterialCost","JS","EST_AMT_MATERIAL")
	F.Data.DataTable.FillFromDictionary("dtAll2","dEstMaterialCost","JS","EST_AMT_MATERIAL")
	F.Data.Dictionary.Close("dEstMaterialCost")
	
	'Getting Est Total Cost
	gui.FrmMaster.prgBar.Value(40)
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Est Total Cost...")
	F.Data.Dictionary.CreateFromSQL("dEstTotalCost","con","select CONCAT(JOB,SUFFIX) AS JS, SUM(DOLLARS_ESTIMATED) AS EstMaterialCost from V_JOB_OPERATIONS where LMO <> 'Z' and LMO <> 'C' group by JOB, SUFFIX;")
	F.Data.Dictionary.SetDefaultReturn("dEstTotalCost",0.00)
	F.Data.DataTable.FillFromDictionary("dtAll","dEstTotalCost","JS","EST_TOTALCOST")
	F.Data.DataTable.FillFromDictionary("dtAll2","dEstTotalCost","JS","EST_TOTALCOST")
	F.Data.Dictionary.Close("dEstTotalCost")
	
'	Gui.FrmMaster.lblProgBarStatus.Caption("Calculating Order Required Date...")
'	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtAllM.RowCount--,1)
'		V.Local.sTempDate.Set(V.DataTable.dtAllM(V.Local.iCnt).LINEDUE!FieldVal)
'		F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"MM/DD/YYYY",V.Local.dTempDate)
'		F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Local.iCnt).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
'		F.Data.DataTable.SetValue("dtAllM",V.Local.iCnt,"ORDER_REQD_DATE",V.Local.dTempDate)
'	F.Intrinsic.Control.Next(V.Local.iCnt)

	gui.FrmMaster.prgBar.Value(41)
	Gui.FrmMaster.lblProgBarStatus.Caption("Calculating Order Required Date...")
	F.Intrinsic.Control.If(V.DataTable.dtLineDueLeadTime.Exists)
		F.Data.DataTable.Close("dtLineDueLeadTime")
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Create("dtAllM","dvLineDueLeadTime")
	F.Data.DataView.ToDataTableDistinct("dtAllM","dvLineDueLeadTime","dtLineDueLeadTime","LINEDUE*!*LEAD_TIME",True)
	F.Data.Datatable.AddColumn("dtLineDueLeadTime","ORDER_REQD_DATE","Date")
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtLineDueLeadTime.RowCount--,1)
		F.Intrinsic.String.DateString(V.DataTable.dtLineDueLeadTime(V.Local.iCnt).LINEDUE!FieldVal,v.Local.sTempDate)
		F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
			F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
			F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtLineDueLeadTime(V.Local.iCnt).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
			F.Data.DataTable.SetValue("dtLineDueLeadTime",V.Local.iCnt,"ORDER_REQD_DATE",V.Local.dTempDate)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
		
	F.Data.Datatable.AddExpressionColumn("dtLineDueLeadTime","LINE_DUE_LEAD_TIME","String","[LINEDUE]+'*!*'+[LEAD_TIME]")
	F.Data.Dictionary.CreateFromDataTable("dOrderReqdDate","dtLineDueLeadTime","LINE_DUE_LEAD_TIME","ORDER_REQD_DATE")
	
	F.Data.Datatable.AddExpressionColumn("dtAllM","LINE_DUE_LEAD_TIME","String","[LINEDUE]+'*!*'+[LEAD_TIME]")
	F.Data.DataTable.FillFromDictionary("dtAllM","dOrderReqdDate","LINE_DUE_LEAD_TIME","ORDER_REQD_DATE")
	
	F.Data.Dictionary.Close("dOrderReqdDate")
	F.Data.DataTable.RemoveColumn("dtAllM","LINE_DUE_LEAD_TIME")
	F.Intrinsic.Control.If(V.DataTable.dtLineDueLeadTime.Exists)
		F.Data.DataTable.Close("dtLineDueLeadTime")
	F.Intrinsic.Control.EndIf

	gui.FrmMaster.prgBar.Value(42)
	Gui.FrmMaster.lblProgBarStatus.Caption("Calculating Material Part Usage Truncated Mean...")
'	F.Data.Dictionary.CreateFromSQL("dTruncatedMean","con","select RTRIM(A.PART) AS 'MatPart', CONVERT(ROUND((SUM(QTY_USAGE)-MAX(A.QTY_USAGE)-MIN(A.QTY_USAGE))/10,0), SQL_INTEGER) AS USAGE_TRUNCATED_MEAN FROM (select PART, 1 AS MTH, QTY_USAGE_MO_01 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 2 AS MTH, QTY_USAGE_MO_02 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 3 AS MTH, QTY_USAGE_MO_03 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 4 AS MTH, QTY_USAGE_MO_04 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 5 AS MTH, QTY_USAGE_MO_05 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 6 AS MTH, QTY_USAGE_MO_06 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 7 AS MTH, QTY_USAGE_MO_07 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 8 AS MTH, QTY_USAGE_MO_08 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 9 AS MTH, QTY_USAGE_MO_09 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 10 AS MTH, QTY_USAGE_MO_10 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 11 AS MTH, QTY_USAGE_MO_11 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 12 AS MTH, QTY_USAGE_MO_12 AS QTY_USAGE FROM V_INVENTORY_MSTR) AS A GROUP BY A.PART ORDER BY A.PART;")
	F.Data.Dictionary.CreateFromSQL("dTruncatedMean","con","SELECT RTRIM(PART) AS 'MatPart', CONVERT(ROUND((SUM(CASE MTH WHEN 1 THEN QTY_USAGE_MO_01 WHEN 2 THEN QTY_USAGE_MO_02 WHEN 3 THEN QTY_USAGE_MO_03 WHEN 4 THEN QTY_USAGE_MO_04 WHEN 5 THEN QTY_USAGE_MO_05 WHEN 6 THEN QTY_USAGE_MO_06 WHEN 7 THEN QTY_USAGE_MO_07 WHEN 8 THEN QTY_USAGE_MO_08 WHEN 9 THEN QTY_USAGE_MO_09 WHEN 10 THEN QTY_USAGE_MO_10 WHEN 11 THEN QTY_USAGE_MO_11 WHEN 12 THEN QTY_USAGE_MO_12 END) - MAX(CASE MTH WHEN 1 THEN QTY_USAGE_MO_01 WHEN 2 THEN QTY_USAGE_MO_02 WHEN 3 THEN QTY_USAGE_MO_03 WHEN 4 THEN QTY_USAGE_MO_04 WHEN 5 THEN QTY_USAGE_MO_05 WHEN 6 THEN QTY_USAGE_MO_06 WHEN 7 THEN QTY_USAGE_MO_07 WHEN 8 THEN QTY_USAGE_MO_08 WHEN 9 THEN QTY_USAGE_MO_09 WHEN 10 THEN QTY_USAGE_MO_10 WHEN 11 THEN QTY_USAGE_MO_11 WHEN 12 THEN QTY_USAGE_MO_12 END) - MIN(CASE MTH WHEN 1 THEN QTY_USAGE_MO_01 WHEN 2 THEN QTY_USAGE_MO_02 WHEN 3 THEN QTY_USAGE_MO_03 WHEN 4 THEN QTY_USAGE_MO_04 WHEN 5 THEN QTY_USAGE_MO_05 WHEN 6 THEN QTY_USAGE_MO_06 WHEN 7 THEN QTY_USAGE_MO_07 WHEN 8 THEN QTY_USAGE_MO_08 WHEN 9 THEN QTY_USAGE_MO_09 WHEN 10 THEN QTY_USAGE_MO_10 WHEN 11 THEN QTY_USAGE_MO_11 WHEN 12 THEN QTY_USAGE_MO_12 END)) / 10, 0), SQL_INTEGER) AS USAGE_TRUNCATED_MEAN FROM INVENTORY_MSTR CROSS JOIN (SELECT 1 AS MTH UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12) AS Months GROUP BY PART ORDER BY PART;")
	F.Data.Dictionary.SetDefaultReturn("dTruncatedMean",0)
	F.Data.DataTable.FillFromDictionary("dtAllM","dTruncatedMean","MatPart","TRUNCATED_MEAN")
	F.Data.Dictionary.Close("dTruncatedMean")
	
	'MaterialManage Status
	gui.FrmMaster.prgBar.Value(43)
	Gui.FrmMaster.lblProgBarStatus.Caption("Calculating Material Status...")
	F.Data.DataTable.AddExpressionColumn("dtAllM","StockStatus","String","IIF([QTY_ONHAND] >= [PCSTOPROD],'In Stock',IIF([PURCHASE_ORDER] <> '','On Order','Out of Stock'))")
	F.Data.DataTable.CopyColumn("dtAllM","StockStatus","MaterialManage")
	F.Data.DataTable.RemoveColumn("dtAllM","StockStatus")
	
	'Set row ID for dtAllM and dtAllO
'	f.Intrinsic.Control.CallSub(setRowID)
	f.Data.DataTable.SetSeries("dtAllM","MyRowID",0,1)
	f.Data.DataTable.SetSeries("dtAllO","MyRowID",0,1)
	
	'Check DataTable: dtOper, dtAllO, dtAllM, dtChildMat, dtChildLabr, dtChildOuts whether there are WOs that do not exist in dtAll.
	'Remove the WOs if they exist
	'Add temp column to dtAll, dtOper, dtAllO, dtAllM, dtChildMat, dtChildLabr, dtChildOuts
	F.Data.DataTable.AddColumn("dtAll2","WOExists","Boolean",True)
	F.Data.DataTable.AddColumn("dtOper","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtAllO","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtAllM","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtChildMat","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtChildLabr","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtChildOuts","WOExists","Boolean")
	'Create Dictionary
	F.Data.Dictionary.CreateFromDataTable("dictWO","dtAll2","JS","WOExists")
	F.Data.Dictionary.SetDefaultReturn("dictWO",False)
	'Fill the DataTable from Dictionary
	F.Data.DataTable.FillFromDictionary("dtOper","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtAllO","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtAllM","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtChildMat","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtChildLabr","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtChildOuts","dictWO","JS","WOExists")
	'Close Dictionary
	F.Data.Dictionary.Close("dictWO")
	'Create temporary DataView
	F.Data.DataView.Create("dtOper","dvOperRemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtAllO","dvAllORemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtAllM","dvAllMRemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtChildMat","dvChildMatRemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtChildLabr","dvChildLabrRemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtChildOuts","dvChildOutsRemoveWO",22,"WOExists = True","")
	'Create datatable from DataView
	F.Data.DataView.ToDataTable("dtOper","dvOperRemoveWO","dtOperRemoveWO",True)
	F.Data.DataView.ToDataTable("dtAllO","dvAllORemoveWO","dtAllORemoveWO",True)
	F.Data.DataView.ToDataTable("dtAllM","dvAllMRemoveWO","dtAllMRemoveWO",True)
	F.Data.DataView.ToDataTable("dtChildMat","dvChildMatRemoveWO","dtChildMatRemoveWO",True)
	F.Data.DataView.ToDataTable("dtChildLabr","dvChildLabrRemoveWO","dtChildLabrRemoveWO",True)
	F.Data.DataView.ToDataTable("dtChildOuts","dvChildOutsRemoveWO","dtChildOutsRemoveWO",True)
	'Remove columns
	F.Data.DataTable.RemoveColumn("dtAll2","WOExists")
	F.Data.DataTable.RemoveColumn("dtOperRemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtAllORemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtAllMRemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtChildMatRemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtChildLabrRemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtChildOutsRemoveWO","WOExists")
	
	'Delete Rows from DataTable
	F.Data.DataTable.DeleteRow("dtOper")
	F.Data.DataTable.DeleteRow("dtAllO")
	F.Data.DataTable.DeleteRow("dtAllM")
	F.Data.DataTable.DeleteRow("dtChildMat")
	F.Data.DataTable.DeleteRow("dtChildLabr")
	F.Data.DataTable.DeleteRow("dtChildOuts")
	'Merge the DataTable
	F.Data.DataTable.Merge("dtOperRemoveWO","dtOper",True,1)
	F.Data.DataTable.Merge("dtAllORemoveWO","dtAllO",True,1)
	F.Data.DataTable.Merge("dtAllMRemoveWO","dtAllM",True,1)
	F.Data.DataTable.Merge("dtChildMatRemoveWO","dtChildMat",True,1)
	F.Data.DataTable.Merge("dtChildLabrRemoveWO","dtChildLabr",True,1)
	F.Data.DataTable.Merge("dtChildOutsRemoveWO","dtChildOuts",True,1)
	'Delete DataTable
	F.Data.DataTable.Close("dtOperRemoveWO")
	F.Data.DataTable.Close("dtAllORemoveWO")
	F.Data.DataTable.Close("dtAllMRemoveWO")
	F.Data.DataTable.Close("dtChildMatRemoveWO")
	F.Data.DataTable.Close("dtChildLabrRemoveWO")
	F.Data.DataTable.Close("dtChildOutsRemoveWO")
	
	'Remove columns
'	F.Data.DataTable.RemoveColumn("dtOper","WOExists")
'	F.Data.DataTable.RemoveColumn("dtAllO","WOExists")
'	F.Data.DataTable.RemoveColumn("dtAllM","WOExists")
	F.Data.DataTable.RemoveColumn("dtChildMat","WOExists")
	F.Data.DataTable.RemoveColumn("dtChildLabr","WOExists")
	F.Data.DataTable.RemoveColumn("dtChildOuts","WOExists")
	
	'Load from XML, creating new data table, add relation
'	f.Data.DataTable.CreateFromXML("dtAll2$dtChildMat",v.Local.sfileMatl,true)
'	F.Data.DataView.Create("dtAll2$dtChildMat","dvMatl")
	F.Data.DataTable.Clone("dtChildMat","dtAll2$dtChildMat",True)
	F.Data.DataTable.Merge("dtChildMat","dtAll2$dtChildMat",True,1)
	F.Data.DataTable.Close("dtChildMat")
	F.Data.DataView.Create("dtAll2$dtChildMat","dvMatl")
	F.Data.DataTable.AddRelation("dtAll2","JS","dtAll2$dtChildMat","JS","Material")

'	f.Data.DataTable.CreateFromXML("dtAll2$dtChildLabr",v.Local.sfilelabr,true)
'	F.Data.DataView.Create("dtAll2$dtChildLabr","dvLabr")
	F.Data.DataTable.Clone("dtChildLabr","dtall2$dtChildLabr",True)
	F.Data.DataTable.Merge("dtChildLabr","dtall2$dtChildLabr",True,1)
	F.Data.DataTable.Close("dtChildLabr")
	F.Data.DataView.Create("dtAll2$dtChildLabr","dvLabr")
	F.Data.DataTable.AddRelation("dtAll2","JS","dtall2$dtChildLabr","JS","Labour")
	
'	f.Data.DataTable.CreateFromXML("dtAll2$dtChildOuts",v.Local.sfileouts,true)
'	F.Data.DataView.Create("dtAll2$dtChildOuts","dvOuts")
	F.Data.DataTable.Clone("dtChildOuts","dtall2$dtChildOuts",True)
	F.Data.DataTable.Merge("dtChildOuts","dtall2$dtChildOuts",True,1)
	F.Data.DataTable.Close("dtChildOuts")
	F.Data.DataView.Create("dtAll2$dtChildOuts","dvOuts")
	F.Data.DataTable.AddRelation("dtAll2","JS","dtall2$dtChildOuts","JS","Outside")
	
	'Create a Dataview to filter days late
	f.Data.DataView.Create("dtAll2","dvLate",22,"DAYS_LATE > 0","WO_Label ASC")
	
'	GUI.FrmMaster.prgBar.Value(0)
F.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.ProgramData.End

Program.Sub.setRowID.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	v.Local.sPc.Declare
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllM.RowCount--,1)
		f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MyRowID",V.Local.I)
		f.Intrinsic.Control.If(v.DataTable.dtAllM(v.Local.i).COST!FIELDVAL,=,0)
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"Cost",v.DataTable.dtAllM(v.Local.i).BURDEN!FIELDVAL)
		f.Intrinsic.Control.EndIf
		
		'Cleanup pcs to produce, set to 0 if blank
		v.Local.sPc.Set(V.DataTable.dtAllM(v.Local.i).PCSTOPROD!fieldvaltrim)
		f.Intrinsic.Control.If(v.Local.sPc,=,"")		
			v.Local.sPc.Set(0)
		f.Intrinsic.Control.EndIf
		
		'Simple logic check for the material management tab
		f.Intrinsic.Control.If(v.DataTable.dtAllM(v.Local.i).QTY_ONHAND!FIELDVAL,>=,V.local.sPc)
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MaterialManage","In Stock")
		f.Intrinsic.Control.ElseIf(v.DataTable.dtAllM(v.Local.i).PURCHASE_ORDER!FIELDVALTRIM,<>,"")
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MaterialManage","On Order")
		f.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("dtAllM",v.Local.i,"MaterialManage","Out of Stock")
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllO.RowCount--,1)
		f.Data.DataTable.SetValue("dtAllO",v.Local.i,"MyRowID",V.Local.I)
		f.Intrinsic.Control.If(v.DataTable.dtAllO(v.Local.i).COST!FIELDVAL,=,0)
			f.Data.DataTable.SetValue("dtAllO",v.Local.i,"Cost",v.DataTable.dtAllO(v.Local.i).BURDEN!FIELDVAL)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.setRowID.End

Program.Sub.CheckPermissions.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare
v.Local.bChecked.Declare(boolean,false)
	
	'Check User Permissions: View
	F.Global.Security.CheckUserAccessIPM(131, 0, V.Global.bViewSO)'Order Entry > View > Sales Orders
	F.Global.Security.CheckUserAccessIPM(536, 0, V.Global.bViewWO)'Shop Floor Control > View > Work Orders
	F.Global.Security.CheckUserAccessIPM(321, 0, V.Global.bViewPart)'Inventory > View > Supply and Demand
	F.Intrinsic.Control.If(V.Global.bViewWO, =, True, "OR", V.Global.bViewPart, =, True,V.Global.bViewSO,=,True)
		Gui.FrmMaster.optView.Enabled(True)
		f.Intrinsic.Control.If(v.Local.bChecked,=,False)
			Gui.FrmMaster.optView.Value(True)
			v.Local.bChecked.Set(True)
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.Else
		Gui.FrmMaster.optView.Enabled(False)
		Gui.FrmMaster.optView.Value(False)
		v.Local.bChecked.Set(False)
	F.Intrinsic.Control.EndIf
	
	'Check User Permissions: Edit
	F.Global.Security.CheckUserAccessIPM(132, 1, V.Global.bEditSO)'Order Entry > File > Sales Orders > Open
	F.Global.Security.CheckUserAccessIPM(527, 1, V.Global.bEditWO)'Shop Floor Control > File > Work Orders > Open
	F.Global.Security.CheckUserAccessIPM(371, 0, V.Global.bEditPart)'Inventory > View > Supply and Demand with Edit
	F.Intrinsic.Control.If(V.Global.bEditWO, =, True, "OR", V.Global.bEditPart, =, True,V.Global.bEditSO,=,True)
		Gui.FrmMaster.optEdit.Enabled(True)
		f.Intrinsic.Control.If(v.Local.bChecked,=,False)
			gui.FrmMaster.optEdit.Value(True)
			v.Local.bChecked.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		Gui.FrmMaster.optEdit.Enabled(False)
		Gui.FrmMaster.optEdit.Value(False)
		v.Local.bChecked.Set(False)
	F.Intrinsic.Control.EndIf
	
	F.Global.Security.CheckUserAccessIPM(533, 0, V.Global.bIssue)'Shop Floor Control > Transactions > Issue Material
	F.Intrinsic.Control.If(v.Global.bIssue,=,True)
		Gui.FrmMaster.optIssue.Enabled(True)
		f.Intrinsic.Control.If(v.Local.bChecked,=,False)
			gui.FrmMaster.optIssue.Value(True)
			v.Local.bChecked.Set(True)	
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		Gui.FrmMaster.optIssue.Enabled(False)
		gui.FrmMaster.optIssue.Value(False)
		v.Local.bChecked.Set(False)
		Gui.FrmMaster.accMat.SetElementVisible(aceIssueMat,False)
	F.Intrinsic.Control.EndIf

	F.Global.Security.CheckUserAccessIPM(544, 0, V.Global.bWipToFG)'Shop Floor Control > Transactions > WIP To Finished Goods
	F.Intrinsic.Control.If(v.Global.bWipToFG,=,True)
		Gui.FrmMaster.optWiptoFG.Enabled(True)
		f.Intrinsic.Control.If(v.Local.bChecked,=,False)
			gui.FrmMaster.optWiptoFG.Value(True)
			v.Local.bChecked.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		Gui.FrmMaster.optWiptoFG.Enabled(False)
		gui.FrmMaster.optWiptoFG.Value(False)
		v.Local.bChecked.Set(False)
		Gui.FrmMaster.accAllWO.SetElementVisible(aceAllWIPFGE,False)
	F.Intrinsic.Control.EndIf
	
	'Check User Permissions
	F.Global.Security.CheckUserAccessIPM(265, 2, V.Global.bCreatePO)  'Purchasing > Purchase Orders > File > New 
	F.Intrinsic.Control.If(V.Global.bCreatePO,=,False)
		Gui.FrmMaster.accMat.SetElementVisible(aceMatAutoPO,False)
		Gui.FrmMaster.accOut.SetElementVisible(aceOutAutoPO,False)
	F.Intrinsic.Control.EndIf
	F.Global.Security.CheckUserAccessIPM(265, 1, V.Global.bEditPO)  'Purchasing > Purchase Orders > File > Open 

	'Check Replace Update Dashboard Access
	F.Global.Security.CheckUserAccessIPM(1027, 0, V.Global.bReplUpdReschedUtility)'Shop Floor Control > File > Replace, Update and Reschedule Job Utility
	
	'Shop Floor Control > Administration > Add/Delete Operation Closed Date
	F.Global.Security.CheckUserAccessIPM(611, 0, V.Global.bCloseWOSeq)   
	F.Intrinsic.Control.If(V.Global.bCloseWOSeq,=,False)
		Gui.FrmMaster.accAllWO.SetElementVisible(aceAllCloseSeq,False)
	F.Intrinsic.Control.EndIf
	
	'Shop Floor Control > Transactions > Tasks
	F.Global.Security.CheckUserAccessIPM(578, 0, V.Global.bTasksSignoff)   
	F.Intrinsic.Control.If(V.Global.bTasksSignoff,=,False)
		Gui.FrmMaster.accAllWO.SetElementVisible(aceAllCompleteTask,False)
	F.Intrinsic.Control.EndIf
	
	'Shop Floor Control > File > Work Orders > New
	F.Global.Security.CheckUserAccessIPM(527, 2, V.Global.bCreateNewWO)   
	F.Intrinsic.Control.If(V.Global.bCreateNewWO,=,False)
		Gui.FrmMaster.accAllWO.SetElementVisible(aceAllNewWO,False)
	F.Intrinsic.Control.EndIf
	
	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.CheckPermissions.End

Program.Sub.SetContextMenus.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.bNewWO.Declare	
	
	Gui.FrmMaster..ContextMenuCreate("ctxAll")
	Gui.FrmMaster..ContextMenuCreate("ctxOper")
	Gui.FrmMaster..ContextMenuCreate("ctxAllM")
	Gui.FrmMaster..ContextMenuCreate("ctxAllO")
	Gui.FrmMaster.GsGCAll.ContextMenuAttach("ctxAll")
	Gui.FrmMaster.gsgcOper.ContextMenuAttach("ctxOper")
	gui.FrmMaster.gsgcAllM.ContextMenuAttach("ctxAllM")
	gui.FrmMaster.gsgcAllO.ContextMenuAttach("ctxAllO")
	
	Gui.FrmMaster..ContextMenuAddItem("ctxOper","ResetColumns",0,"Reset Columns")
	Gui.FrmMaster..ContextMenuAddItem("ctxAllM","ResetColumns",0,"Reset Columns")
	Gui.FrmMaster..ContextMenuAddItem("ctxAllO","ResetColumns",0,"Reset Columns")
	Gui.FrmMaster..ContextMenuAddItem("ctxAll","ResetColumns",0,"Reset Columns")
	
	f.Intrinsic.Control.If(v.Caller.CompanyCode,=,"MET")
		Gui.FrmMaster..ContextMenuAddItem("ctxAll","Boost",0,"Boost Export")
		Gui.FrmMaster..ContextMenuSetItemEventHandler("ctxAll","Boost","BoostExport")
	f.Intrinsic.Control.EndIf

	Gui.FrmMaster..ContextMenuSetItemEventHandler("ctxAll","ResetColumns","MenuClickResetColumns")
	Gui.FrmMaster..ContextMenuSetItemEventHandler("ctxOper","ResetColumns","MenuClickResetColumns")
	Gui.FrmMaster..ContextMenuSetItemEventHandler("ctxAllM","ResetColumns","MenuClickResetColumns")
	Gui.FrmMaster..ContextMenuSetItemEventHandler("ctxAllO","ResetColumns","MenuClickResetColumns")
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.SetContextMenus.End

Program.Sub.BoostExport.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Intrinsic.Control.CallSub(resched,"sSwitch","B")

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.BoostExport.End

Program.Sub.Resched.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sSwitch.Declare(string)
	v.Local.SSQL.Declare(STRING)
	v.Local.irows.Declare(long)
	V.Local.iRows.Set(0)
	v.Local.i.Declare(long)
	v.Local.ddate.Declare(date)
	v.Local.sdate.Declare(string)
	V.Local.SDATELong.declare(string)
	V.Local.sDateUS.Declare(string)
	V.Local.DDATEUS.Declare(date)
	V.Local.SDUE.Declare(STRING)
	v.Local.sDateSched.declare(string)
	v.Local.sparams.Declare(string)
	v.Local.sMessage.Declare(string)
	v.Local.sret.Declare(string)
	v.Local.lret.Declare(long)
	V.Local.sFilename.Declare(string)
	V.Local.sfilename.Set("ROUTERHD.TXT")
	V.Local.sFilenameBOM.Declare(string)
	V.Local.sfilenameBOM.Set("BOMHDR.txt")
	v.Local.sFileDir.Declare(string)
	V.Local.spart.Declare(string)
	V.Local.spartrev.Declare(string)
	v.Local.fSuffix.Declare(float)
	v.Local.sSuffix.Declare(string)
	v.Local.lID.Declare(long)
	V.Local.sNames.Declare(string)
	v.Local.sName.Declare(string)
	v.Local.scustsql.Declare(string)
	v.Local.sValues.Declare(string)
	v.Local.sVal.Declare(string)
	v.Local.sBoostID.Declare(string)
	v.Local.scustpart.Declare(string)
	v.Local.scustrev.Declare(string)
	v.Local.x.Declare(long)
	v.Local.y.Declare(long)
	v.Local.bExit.Declare(boolean)
	v.Local.lHid.Declare
	V.Local.p.Declare(long)
	v.Local.o.Declare(long)
	v.Local.sRouter.Declare
	v.Local.sretPH.Declare
	v.Local.sSplit.Declare
	v.Local.sGssPart.Declare

	v.Local.sSwitch.Set(v.Args.sSwitch)
	f.ODBC.Connection!conx.openconnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass)
			
	f.Intrinsic.Control.If(v.DataTable.dtWO.Exists)
		f.Data.DataTable.Close("dtWO")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.dtWOP.Exists)
		f.Data.DataTable.Close("dtWOP")
	f.Intrinsic.Control.EndIf
	
	'Datatable for storing original work orders' position in the grid control
	f.Data.DataTable.Create("dtWO")
	f.Data.DataTable.AddColumn("dtWO","SO","string")
	f.Data.DataTable.AddColumn("dtWO","SOLine","string")
	f.Data.DataTable.AddColumn("dtWO","SODueDate","string")
	f.Data.DataTable.AddColumn("dtWO","OrigRow","long")
	
	'Datatable for printing work orders
	f.Data.DataTable.Create("dtWOP")
	f.Data.DataTable.AddColumn("dtWOP","WO","String")
	f.Data.DataTable.AddColumn("dtWOP","Suffix","string")
	
	'Blank the Router & BOM File
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Local.sfilename,V.Local.sFileDir)
	f.Intrinsic.File.STRING2FILE(V.Local.sFileDir,"")
	V.Local.sFileDir.Set("")
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Local.sFilenameBOM,V.Local.sFileDir)
	f.Intrinsic.File.STRING2FILE(V.Local.sFileDir,"")
	
	'Start the process of formatting the files for BOM/ROUTER for upload into Global Shop
	f.Intrinsic.Control.If(v.Local.sSwitch,=,"N")
		f.Intrinsic.String.Concat("Create work orders for sales orders: ",V.Ambient.NewLine,v.Local.sMessage)
	F.Intrinsic.Control.ElseIf(v.Local.sSwitch,=,"B")
		f.Intrinsic.String.Concat("Export work orders to boost: ",V.Ambient.NewLine,v.Local.sMessage)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Concat("Reschedule work orders: ",v.Ambient.NewLine,v.Local.sMessage)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAll2.RowCount--,1)
		f.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.i).SelectWO!fieldval,=,"True")
			f.Intrinsic.String.Concat(v.Local.sMessage," ",v.DataTable.dtAll2(v.Local.i).Job!fieldval,"-",v.DataTable.dtAll2(v.Local.i).Suffix!fieldval," ",V.DataTable.dtAll2(V.Local.I).qty_order!FIELDVALTrim," of ",V.DataTable.dtAll2(V.Local.I).Display_part!FieldvalTrim," ",v.Ambient.NewLine,V.Local.sMessage)
			f.Intrinsic.String.Mid(v.DataTable.dtAll2(v.Local.i).Display_part!FIELDVAL,18,3,v.Local.spartrev)
			f.Intrinsic.String.mid(v.DataTable.dtAll2(v.Local.i).Display_part!FIELDVAL,1,17,v.Local.spart)
			f.Data.DataTable.AddRow("dtWO","SO",v.DataTable.dtAll2(v.Local.i).SALES_ORDER!FIELDVAL,"SOLine",v.DataTable.dtAll2(v.Local.i).SALES_ORDER_LINE!Fieldval,"SODueDate",v.DataTable.dtAll2(v.Local.i).DATE_DUE!FIELDVALString,"OrigRow",v.Local.i)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.UI.Msgbox(v.Local.sMessage,"Confirmation",4,v.Local.lret)
	'Reset i before continuing on
	v.Local.i.Set(0)
	
	f.Intrinsic.Control.If(v.Local.lret,=,6)
		f.Intrinsic.UI.InvokeWaitDialog("Generating.")
		
		'Bumped this out after the fact, let the scheduling happen as is for speed reasons
		'AFter WO creation, grab the WO number
		F.Intrinsic.Control.For(V.Local.i,0,v.DataTable.dtWO.RowCount--,1)
			v.Local.ddate.Set(V.DataTable.dtWO(v.Local.i).SODueDate!FieldValString)
			'Get Work Order and Suffix
			f.Intrinsic.String.Build("SELECT JOB, SUFFIX, PART FROM V_ORDER_TO_WO WHERE ORDER_NO='{0}' AND ORDER_LINE='{1}0'",v.DataTable.dtWO(v.local.i).SO!fieldvaltrim,v.DataTable.dtWO(v.local.i).SOLine!fieldvaltrim,v.Local.SSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.SSQL,v.Local.sret)
			f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
			
			f.Intrinsic.Control.If(v.Local.sSwitch,=,"B")
				f.Intrinsic.Control.CallSub(createBoostTable)
				'Add Parent Row
				f.Intrinsic.String.Build("SELECT JOB, Suffix, Part, Description, parent_wo as ParentJob, parent_suffix_parent as ParentSuffix, Customer, customer_po, sales_order, Qty_Order, Priority, date_due  FROM V_JOB_HEADER WHERE JOB='{0}' AND SUFFIX='{1}'",v.Local.sret(0),v.Local.sret(1),v.Local.SSQL)
				f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.sval)
				f.Intrinsic.String.Split(v.Local.sVal,"*!*",v.Local.sVal)
				f.Intrinsic.String.build("SELECT NAME_CUSTOMER FROM V_CUSTOMER_MASTER WHERE CUSTOMER='{0}'",v.Local.sVal(6),v.Local.scustsql)
				f.ODBC.Connection!conx.executeandreturn(v.Local.scustsql,v.Local.sname)
				F.Intrinsic.String.Mid(V.Local.sVal(2),18,3,V.LOCAL.scustrev)
				F.Intrinsic.String.Mid(V.Local.sVal(2),1,17,V.Local.scustpart)
				f.Intrinsic.String.Build("SELECT ROUTER FROM GAB_4486_QRE_HEAD WHERE CUST_PART='{0}' and CUST_REV='{1}'",v.Local.scustpart.Trim,v.Local.scustrev.Trim,v.Local.ssql)
				f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.sBoostID)
				F.Data.DataTable.AddRow("dt","Draw",v.Local.sVal(2),"BoostID",v.Local.sBoostID,"JOB",v.Local.sVal(0),"Suffix",v.Local.sVal(1),"Part",v.Local.sVal(2),"Description",v.Local.sVal(3),"ParentJob",v.Local.sVal(4),"ParentSuffix",v.Local.sVal(5),"Customer",v.Local.sVal(6),"Customer_PO",v.Local.sVal(7),"Sales_Order",v.DataTable.dtWO(v.local.i).SO!fieldvaltrim,"Sales_Order_Line",v.DataTable.dtWO(v.local.i).SOLine!fieldvaltrim,"Qty_Order",v.Local.sVal(9),"PRIORITY",v.Local.sVal(10),"DATE_DUE",v.Local.sVal(11),"NAME_CUSTOMER",V.Local.sName.Trim)
				'Get Children
				F.Intrinsic.Control.CallSub(loadbomlevel,"sWOH",v.Local.sret(0),"sWOS",v.Local.sret(1))
				'Add in parent assembly
				f.Data.DataTable.AddColumn("dt","Assembly","string",v.Local.sret(2))
				f.Intrinsic.Control.CallSub(BoostGen)
			f.Intrinsic.Control.EndIf
			
			'If Suffix = '000' then it is a BOM and need to grab the others
			f.Intrinsic.Control.If(v.Local.sret.UBound,>=,1)
				F.Intrinsic.Control.If(V.Local.sret(1),=,"000")
					f.Intrinsic.string.Build("select max(suffix) from V_JOB_HEADER  where job='{0}'",v.Local.sret(0),v.Local.SSQL)
					f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.fSuffix)
					f.Intrinsic.Control.For(v.Local.x,1,v.Local.fSuffix,1)
						f.Intrinsic.String.LPad(v.Local.x,"0",3,v.Local.sSuffix)
						f.Data.DataTable.AddRow("dtWOP","WO",v.Local.sret(0),"Suffix",v.Local.sSuffix)
					f.Intrinsic.Control.next(v.Local.x)
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			v.Local.fSuffix.Set(1)
		f.Intrinsic.Control.Next(v.Local.i)

		f.Intrinsic.UI.CloseWaitDialog
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Close

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.endtry
Program.Sub.Resched.End

Program.Sub.BoostGen.Start
f.Intrinsic.Control.Try
V.Local.sError.Declare
v.Local.sSQL.Declare(string)
v.Local.sret.Declare(string)
V.Local.sJob.Declare(string)
v.Local.sSuf.Declare(string)
v.Local.sSeq.Declare(string)
v.Local.sDtD.Declare(String)
v.Local.sPrt.Declare(string)
v.Local.sJSS.Declare(string)
v.Local.sMat.Declare(string)
v.Local.sXML.Declare(string)
V.Local.sMsg.Declare(string)
v.Local.sRev.Declare(string)
v.Local.sRtr.Declare(string)
V.Local.sPart.Declare(string)
V.Local.shold.Declare(string)
v.Local.sPath.Declare(string)
v.Local.sTime.Declare(string)
v.Local.sSQL2.Declare(string)
V.Local.sFileName.Declare(string)
v.Local.sBoostID.Declare
v.Local.fRet.Declare(float)
v.Local.i.Declare(long)
f.Intrinsic.String.Format(v.Ambient.Now,"YYMMDDHHNNSS",v.Local.sTime)
f.Intrinsic.String.Concat("xmlDoc",v.Local.sTime,v.Local.sXML)

' create the document
F.global.xml.createDocument(v.local.sXML,False,True,False,False)
F.global.xml.SetRoot(v.local.sXML,"PPSImport")
F.Global.XML.CreateAttributeNode(v.local.sXML,"Version","1.1")
F.Global.XML.SetAttributeToRoot(v.local.sXML,"Version")
F.Intrinsic.String.Concat(V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
F.global.xml.appendNode(v.local.sXML,"PPSImport",V.Local.shold)
F.Global.XML.AppendTextNode(v.local.sXML,"PPSImport",V.Ambient.NewLine)

F.Global.XML.CreateElementNode(v.local.sXML,"ProductionOrders","")
F.Global.XML.AppendNodeToRoot(v.local.sXML,"ProductionOrders")
F.global.xml.appendNode(v.local.sXML,"ProductionOrders",V.Local.shold)
F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrders",V.Ambient.NewLine)
f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dt.RowCount--,1)
	'Check if work order created
	F.Intrinsic.Control.If(v.DataTable.dt(v.Local.i).JOB!FIELDVALTRIM,=,"")
		f.Intrinsic.String.Build("No work order found for sales order line {0}-{1}.  Skipping record.",v.DataTable.dt(v.Local.i).SALES_ORDER!FIELDVALTRIM,v.DataTable.dt(v.Local.i).SALES_ORDER_LINE!FIELDVALTRIM,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg)
	f.Intrinsic.Control.else

		'Check for operation sequence
		f.Intrinsic.String.Build("SELECT SEQ FROM V_JOB_OPERATIONS WHERE JOB='{0}' AND SUFFIX='{1}' AND PART='PROJ'",v.DataTable.dt(v.Local.i).JOB!FIELDVALTRIM,v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,V.Local.SSQL)
		F.ODBC.Connection!CON.Executeandreturn(v.Local.sSQL,v.Local.sSeq)
		f.Intrinsic.Control.If(v.Local.sSeq.Trim,<>,"")
			' ======================== PRODUCTION ORDER
			'Grab the router number from QRE if it is the parent
			f.Intrinsic.Control.If(v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,=,"000")
				f.Intrinsic.string.Left(v.DataTable.dt(v.Local.i).PART!Fieldval,17,v.Local.spart)
				f.Intrinsic.String.Mid(v.DataTable.dt(v.Local.i).Part!fieldval,18,3,v.Local.srev)
				f.Intrinsic.String.Build("SELECT ROUTER FROM GAB_4486_QRE_HEAD WHERE CUST_PART='{0}' and CUST_REV='{1}'",v.Local.spart.Trim,v.Local.srev.Trim,v.Local.sSQL2)
				f.ODBC.Connection!conx.executeandreturn(v.Local.sSQL2,v.Local.sRtr)
				F.Intrinsic.String.Replace(v.Local.sRtr,"-","_",v.Local.sRtr)
			F.Intrinsic.Control.Else
				v.Local.sRtr.Set(v.DataTable.dt(v.Local.i).PART!FIELDVALTRIM)
			F.Intrinsic.Control.EndIf
			
			' create ProductionOrder node, with attribute
			f.Intrinsic.String.Concat(v.DataTable.dt(v.Local.i).JOB!FIELDVAL,"-",v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,"-",v.Local.sSeq,v.Local.sJSS)
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			F.Global.XML.CreateElementNode(v.local.sXML,"ProductionOrder","")
			F.Global.XML.CreateAttributeNode(v.local.sXML,"OrderNo",v.Local.sJSS)
			F.Global.XML.SetAttributeToNode(v.local.sXML,"ProductionOrder","OrderNo")
			F.Global.XML.DestroyNode(v.local.sXML,"OrderNo")
			F.global.xml.appendNode(v.local.sXML,"ProductionOrder",V.Local.shold)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrders","ProductionOrder")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Description
			F.Global.XML.CreateElementNode(v.local.sXML,"Description",v.DataTable.dt(v.Local.i).DESCRIPTION!FIELDVAL)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Description")
			F.global.xml.appendNode(v.local.sXML,"Description",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Description")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Barcode
			F.Global.XML.CreateElementNode(v.local.sXML,"Barcode","")
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Barcode")
			F.global.xml.appendNode(v.local.sXML,"Barcode",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Barcode")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Sales Order
			F.Global.XML.CreateElementNode(v.local.sXML,"CustomerOrderNo",v.DataTable.dt(v.Local.i).SALES_ORDER!FIELDVAL)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerOrderNo")
			F.global.xml.appendNode(v.local.sXML,"CustomerOrderNo",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"CustomerOrderNo")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Customer PO
			F.Global.XML.CreateElementNode(v.local.sXML,"CustomerBookingNo",v.DataTable.dt(v.Local.i).JOB!FIELDVAL)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerBookingNo")
			F.global.xml.appendNode(v.local.sXML,"CustomerBookingNo",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"CustomerBookingNo")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Customer Name
			F.Global.XML.CreateElementNode(v.local.sXML,"CustomerName",v.DataTable.dt(v.Local.i).NAME_CUSTOMER!FIELDVALTRIM)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerName")
			F.global.xml.appendNode(v.local.sXML,"CustomerName",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"CustomerName")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Customer No
			F.Global.XML.CreateElementNode(v.local.sXML,"CustomerNo",v.DataTable.dt(v.Local.i).CUSTOMER!FIELDVALTRIM)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CustomerNo")
			F.global.xml.appendNode(v.local.sXML,"CustomerNo",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"CustomerNo")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Part
			'This needs to be BOOST ID number
			f.Intrinsic.String.Replace(v.DataTable.dt(v.Local.i).BoostID!FIELDVALTRIM,"-","_",v.Local.sBoostID)
			F.Global.XML.CreateElementNode(v.local.sXML,"PartNo",v.Local.sBoostID)
			'F.Global.XML.CreateElementNode(v.local.sXML,"PartNo",v.Local.sRtr.Trim)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","PartNo")
			F.global.xml.appendNode(v.local.sXML,"PartNo",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"PartNo")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Part Description
			'Changed to be Part Number Value to overcome boost bug
			F.Global.XML.CreateElementNode(v.local.sXML,"PartDescription",v.DataTable.dt(v.Local.i).DESCRIPTION!FIELDVALTRIM)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","PartDescription")
			F.global.xml.appendNode(v.local.sXML,"PartDescription",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"PartDescription")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Note 2	
			F.Global.XML.CreateElementNode(v.local.sXML,"Note2","")
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Note2")
			F.global.xml.appendNode(v.local.sXML,"Note2",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Note2")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' DrawingNo
			F.Global.XML.CreateElementNode(v.local.sXML,"DrawingNo",v.DataTable.dt(v.Local.i).DRAW!FIELDVALTRIM)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","DrawingNo")
			F.global.xml.appendNode(v.local.sXML,"DrawingNo",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"DrawingNo")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' CAD File	
			F.Global.XML.CreateElementNode(v.local.sXML,"CADFilename","")
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","CADFilename")
			F.global.xml.appendNode(v.local.sXML,"CADFilename",V.Local.Shold)
			F.Global.XML.DestroyNode(v.local.sXML,"CADFilename")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Assembly
			F.Global.XML.CreateElementNode(v.local.sXML,"Assembly",v.DataTable.dt(v.Local.i).ASSEMBLY!FIELDVALTRIM)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Assembly")
			F.Global.Xml.AppendNode(v.local.sXML,"Assembly",V.Local.Shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Assembly")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Due Date
			F.Global.XML.CreateElementNode(v.local.sXML,"DueDate",v.DataTable.dt(v.Local.i).DATE_DUE!FIELDVAL)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","DueDate")
			F.global.xml.appendNode(v.local.sXML,"DueDate",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"DueDate")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Priority
			'Divide by 10 to cope with boost
			F.Intrinsic.Control.If(v.DataTable.dt(v.Local.i).PRIORITY!FIELDVALTRIM,=,"")
				V.Local.fRET.Set("0")
			F.Intrinsic.Control.ElseIf(v.DataTable.dt(v.Local.i).PRIORITY!FIELDVALTRIM,=,"0")
				V.Local.fRET.Set("0")
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Right(v.DataTable.dt(v.Local.i).PRIORITY!FIELDVALTRIM,2,V.Local.fRET)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CreateElementNode(v.local.sXML,"Priority",V.Local.fRET)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Priority")
			F.global.xml.appendNode(v.local.sXML,"Priority",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Priority")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Qty
			F.Global.XML.CreateElementNode(v.local.sXML,"DesiredQuantity",v.DataTable.dt(v.Local.i).Qty_Order!FIELDVAL)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","DesiredQuantity")
			F.global.xml.appendNode(v.local.sXML,"DesiredQuantity",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"DesiredQuantity")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Status
			'Per Metco Status should be 10, 30 later
			F.Global.XML.CreateElementNode(v.local.sXML,"Status","10")
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Status")
			F.global.xml.appendNode(v.local.sXML,"Status",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Status")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Workcenter
			F.Global.XML.CreateElementNode(v.local.sXML,"WorkplanName","")
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","WorkplanName")
			F.global.xml.appendNode(v.local.sXML,"WorkplanName",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"WorkplanName")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' Material
			'Find the material from QRE
			f.Intrinsic.String.Build("SELECT PART FROM V_JOB_OPERATIONS WHERE JOB='{0}' AND SUFFIX='{1}' AND CODE_SORT_OPER='MAT'",v.datatable.dt(v.Local.i).job!FIELDVAL,v.datatable.dt(v.Local.i).SUFFIX!FIELDVAL,v.Local.ssql)
			f.ODBC.Connection!conx.executeandreturn(v.Local.sSQL,v.Local.sMat)
			F.Global.XML.CreateElementNode(v.local.sXML,"Material",V.Local.sMat.Trim)
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","Material")
			F.global.xml.appendNode(v.local.sXML,"Material",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"Material")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			' FillerPartsOrder
			F.Global.XML.CreateElementNode(v.local.sXML,"FillerPartsOrder","")
			F.Global.XML.AppendNode(v.local.sXML,"ProductionOrder","FillerPartsOrder")
			F.global.xml.appendNode(v.local.sXML,"FillerPartsOrder",V.Local.shold)
			F.Global.XML.DestroyNode(v.local.sXML,"FillerPartsOrder")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
			
			F.Global.XML.DestroyNode(v.local.sXML,"ProductionOrder")
			F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrder",V.Ambient.NewLine)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Error: Programming Laser (PROJ) workcentre step missing from work order {0}-{1}.  Skipping boost export.",v.DataTable.dt(v.Local.i).JOB!FIELDVALTRIM,v.DataTable.dt(v.Local.i).SUFFIX!FIELDVALTRIM,v.Local.sMsg)
			f.Intrinsic.UI.Msgbox(v.Local.sMsg)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.i)
F.Global.XML.AppendNodeToRoot(v.local.sXML,"ProductionOrders")
F.Global.XML.AppendTextNode(v.local.sXML,"ProductionOrders",V.Ambient.NewLine)
F.Global.XML.DestroyNode(v.local.sXML,"ProductionOrders")
F.Global.XML.DestroyNode(v.local.sXML,"ErpExchange")

'Create File Name
F.Intrinsic.String.Build("ProdOrderImp{0}.xml",V.Local.sJSS,V.Local.sFileName)
'f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Local.sPath)
f.Intrinsic.String.Concat("\\vmetcott1\pps\prodAuftrag\import\","",v.Local.sPath)
F.global.xml.saveDocument(v.local.sXML,V.local.sPath,V.Local.sFileName)
'close document
F.global.xml.CloseDocument(v.local.sXML)
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.BoostGen.End

Program.Sub.createBoostTable.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Intrinsic.Control.If(v.DataTable.dt.Exists)
		f.Data.DataTable.Close("dt")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.Create("dt",true)
	f.Data.DataTable.AddColumn("dt","Job","string")
	f.Data.DataTable.AddColumn("dt","Suffix","string")
	f.Data.DataTable.AddColumn("dt","Part","string")
	f.Data.DataTable.AddColumn("dt","Description","string")
	f.Data.DataTable.AddColumn("dt","ParentJob","string")
	f.Data.DataTable.AddColumn("dt","ParentSuffix","string")
	f.Data.DataTable.AddColumn("dt","Customer","string")
	f.Data.DataTable.AddColumn("dt","Customer_PO","string")
	f.Data.DataTable.AddColumn("dt","Sales_Order","string")
	f.Data.DataTable.AddColumn("dt","DATE_DUE","string")
	f.Data.DataTable.AddColumn("dt","NAME_CUSTOMER","string")
	f.Data.DataTable.AddColumn("dt","PRIORITY","string")
	f.Data.DataTable.AddColumn("dt","Qty_Order","string")
	f.Data.DataTable.AddColumn("dt","Draw","string")
	f.Data.DataTable.AddColumn("dt","BoostID","string")
	f.Data.DataTable.AddColumn("dt","Sales_Order_Line","string")

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.createBoostTable.End

Program.Sub.LoadBOMLevel.Start
V.Local.sError.Declare
V.Local.bDT.Declare(Boolean,False)
V.Local.fAct.Declare
V.Local.fEst.Declare
V.Local.i.Declare
V.Local.iCLevel.Declare
V.Local.iLevel.Declare
V.Local.sDTName.Declare
V.Local.sFilter.Declare
V.Local.sParentSuffix.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.sWOH.Declare
v.Local.sWOS.Declare
v.Local.sJobI.Declare
v.Local.sCustSQL.Declare
v.Local.sName.Declare
v.Local.sBoostID.Declare
v.Local.sCustrev.Declare
v.locaL.scustpart.declare

v.Local.sWOH.Set(v.Args.sWOH)
v.Local.sWOS.Set(v.Args.sWOS)

f.Intrinsic.Control.If(v.DataTable.dtJobTemp.Exists)
	f.Data.DataTable.Close("dtJobTemp")
f.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select JOB, Suffix, Qty_Order, Priority, Part, Description, parent_wo as ParentJob, parent_suffix_parent as ParentSuffix, Customer, customer_po, sales_order, date_due, drawing_customer from V_JOB_HEADER where parent_wo = '{0}' and parent_suffix_parent = '{1}' order by suffix ASC",V.Local.sWOH,V.Local.sWOS,V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtJobTemp","conx",V.Local.sSQL,true)
f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtJobTemp.RowCount--,1)
	'Get Name Customer
	f.Intrinsic.String.Build("SELECT NAME_CUSTOMER FROM V_CUSTOMER_MASTER WHERE CUSTOMER='{0}'",v.DataTable.dtJobTemp(v.Local.i).CUSTOMER!fieldvaltrim,v.Local.sCustSQL)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sCustSQL,V.Local.sName)
	
	'Get Boost ID
	F.Intrinsic.String.Mid(V.DataTable.dtJobTemp(v.Local.i).PART!FIELDVALTRIM,18,3,V.LOCAL.scustrev)
	F.Intrinsic.String.Mid(V.DataTable.dtJobTemp(v.Local.i).PART!FIELDVALTRIM,1,17,V.Local.scustpart)
	f.Intrinsic.String.Build("SELECT ROUTER FROM GAB_4486_QRE_HEAD WHERE CUST_PART='{0}' and CUST_REV='{1}'",v.Local.scustpart.Trim,v.Local.scustrev.Trim,v.Local.ssql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.SSQL,v.Local.sBoostID)
	
	'Add to Datatable
	F.Data.DataTable.AddRow("dt","BoostID",v.Local.sBoostID,"Draw",v.DataTable.dtJobTemp(v.Local.i).Drawing_Customer!FIELDVAL,"Qty_Order",v.DataTable.dtJobTemp(v.Local.i).QTY_ORDER!FIELDVAL,"PRIORITY",v.DataTable.dtJobTemp(v.Local.i).PRIORITY!FIELDVALTRIM,"NAME_CUSTOMER",V.Local.sName.Trim,"DATE_DUE",V.DataTable.dtJobTemp(V.Local.i).DATE_DUE!FieldValTrim,"JOB",V.DataTable.dtJobTemp(V.Local.i).JOB!FieldValTrim,"Suffix",V.DataTable.dtJobTemp(V.Local.i).Suffix!FieldValTrim,"Part",V.DataTable.dtJobTemp(V.Local.i).Part!FieldValTrim,"Description",V.DataTable.dtJobTemp(V.Local.i).Description!FieldValTrim,"ParentJob",V.DataTable.dtJobTemp(V.Local.i).ParentJob!FieldValTrim,"ParentSuffix",V.DataTable.dtJobTemp(V.Local.i).ParentSuffix!FieldValTrim,"Customer",V.DataTable.dtJobTemp(V.Local.i).customer!FieldValTrim,"Customer_PO",V.DataTable.dtJobTemp(V.Local.i).Customer_PO!FieldValTrim,"Sales_Order",V.DataTable.dtJobTemp(V.Local.i).sales_order!FieldValTrim)
	
	F.Intrinsic.String.Build("select distinct job, suffix,part,description from v_job_header where parent_wo = '{0}' and parent_suffix_parent = '{1}'",V.DataTable.dtJobTemp(V.Local.i).JOB!FieldValTrim,V.DataTable.dtJobTemp(V.Local.i).Suffix!FieldValTrim,V.Local.sSQL)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSQL,v.Local.sret)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,<>,"")
		F.Intrinsic.Control.CallSub(loadbomlevel,"sWOH",V.DataTable.dtJobTemp(V.Local.i).JOB!FieldValTrim,"sWOS",v.DataTable.dtJobTemp(v.Local.i).SUFFIX!FIELDVALTRIM)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.i)

Program.Sub.LoadBOMLevel.End

Program.Sub.MenuClickWIPFG.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.lFlag.Declare
	v.Local.sMessage.Declare
	v.Local.ssql.Declare
	V.Local.sParams.Declare
	V.Local.sRet.Declare
	v.Local.sFile.Declare
	v.Local.bFileLock.Declare
	V.Local.iCnt.Declare
	V.Local.i.Declare(long)
	v.Local.j.Declare(long)
	v.Local.k.Declare(long)
	f.Intrinsic.Control.If(v.DataTable.dtWPTemp.Exists)
		f.Data.DataTable.Close("dtWPTemp")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.Create("dtWPTemp",true)
	f.Data.DataTable.AddColumn("dtWPTemp","Job","string")
	f.Data.DataTable.AddColumn("dtWPTemp","Suffix","string")
	f.Data.DataTable.AddColumn("dtWPTemp","RowIndex","integer")
	
	f.Intrinsic.String.Concat("WIP to FG the following work orders?",v.Ambient.NewLine,v.Local.sMessage)
	gui.FrmMaster.GsGCAll.enabled(false)
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAll2.RowCount--,1)
		f.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.i).SELECTWO!FIELDVAL)
			f.Intrinsic.String.Concat(v.Local.sMessage,v.DataTable.dtAll2(v.Local.i).JOB!FIELDVALTRIM,"-",v.DataTable.dtAll2(v.Local.i).SUFFIX!FIELDVALTRIM," ",v.DataTable.dtAll2(v.Local.i).DESCRIPTION!FIELDVALTRIM,v.Ambient.NewLine,v.Local.sMessage)
			f.Data.DataTable.AddRow("2003","WONum",v.DataTable.dtAll2(v.Local.i).JOB!FIELDVALTRIM,"WOSuffix",V.DataTable.dtAll2(v.Local.i).SUFFIX!FIELDVALTRIM,"Quantity",V.DataTable.dtAll2(v.Local.i).QTY_ORDER!FIELDVAL,"CloseWO","Y","PrintLabels","Y")
			f.Data.DataTable.AddRow("dtWPTemp","Job",v.DataTable.dtAll2(v.Local.i).JOB!FIELDVALTRIM,"Suffix",V.DataTable.dtAll2(v.Local.i).SUFFIX!FIELDVALTRIM,"RowIndex",v.Local.i)
			'Check if Material has been issued
			f.Intrinsic.String.Build("SELECT DISTINCT JOB, SUFFIX FROM V_JOB_OPERATIONS WHERE JOB='{0}' AND SUFFIX='{1}' AND LMO='M' AND FLAG_CLOSED<>'Y' AND SEQ<'995000'",v.DataTable.dtAll2(v.Local.i).JOB!FIELDVALTRIM,v.DataTable.dtAll2(v.Local.i).SUFFIX!FIELDVALTRIM,v.Local.ssql)
			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
			f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"")
				'Material requirements unfulfilled
				f.Intrinsic.Control.If(v.DataTable.dtJBTemp.Exists)
					f.Data.DataTable.Close("dtJBTemp")
				f.Intrinsic.Control.EndIf
				f.Data.DataTable.CreateFromSQL("dtJBTemp","con",v.Local.ssql)
				f.Intrinsic.Control.For(v.Local.j,0,v.DataTable.dtJBTemp.RowCount--,1)
					F.Intrinsic.String.Build("{0}!*!{1}!*! !*! !*! !*! !*! ",v.DataTable.dtJBTemp(v.Local.j).JOB!FIELDVALTRIM,v.DataTable.dtJBTemp(v.Local.j).SUFFIX!FIELDVALTRIM,V.Local.sParams)
					F.Global.General.CallWrapperSync(450150,V.Local.sParams)
				f.Intrinsic.Control.Next(v.Local.j)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)

	f.Intrinsic.UI.Msgbox(v.Local.sMessage,"WIP to FG",4,v.Local.lFlag)
	f.Intrinsic.Control.If(v.Local.lFlag,=,6)
		f.Intrinsic.Control.CallSub(2003Sync)
		'Delete rows
		f.Intrinsic.Control.For(v.Local.k,0,v.DataTable.dtWPTemp.RowCount--,1)
			f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtWPTemp(v.Local.k).JOB!FIELDVALTRIM,v.DataTable.dtWPTemp(v.Local.k).SUFFIX!FIELDVALTRIM,v.Local.ssql)
			f.Data.DataTable.Select("dtAll2",v.Local.ssql,v.Local.sRet)
			gui.FrmMaster.GsGCAll.SetRowAppearance("gvall",v.Local.sRet,"FontStrikeOut","True")
			f.Data.DataTable.SetValue("dtall2",v.Local.sRet,"SelectWO","false")
		f.Intrinsic.Control.Next(v.Local.k)
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.DeleteRow("2003")
	
	gui.FrmMaster.GsGCAll.enabled(true)
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickWIPFG.End

Program.Sub.MenuCloseSeq.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Global.General.CallWrapperSync(50,"JB0988")
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuCloseSeq.End

Program.Sub.MenuClickRefresh.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	F.Intrinsic.Control.CallSub(cmdProcess_Click)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickRefresh.End

Program.Sub.enableAll.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.cmdProcess.Enabled(true)
	gui.FrmMaster.cmdBrowseCust.Enabled(true)
	gui.FrmMaster.cmdBrowseSO.Enabled(true)
	'gui.FrmMaster.cmdSave.Enabled(true)
	GUI.FrmMaster.gsgcAllM.Enabled(true)
	gui.FrmMaster.tabProd.Visible(true)
	gui.FrmMaster.chkClosed.Enabled(true)
	gui.FrmMaster.optEdit.Enabled(true)
	gui.FrmMaster.optIssue.Enabled(true)
	gui.FrmMaster.optView.Enabled(true)
	gui.FrmMaster.optWiptoFG.Enabled(true)
	gui.FrmMaster.cmdBrowseCust.Enabled(true)
	gui.FrmMaster.cmdBrowseSO.Enabled(true)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.enableAll.End

Program.Sub.disableAll.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.tabProd.Visible(false)
	GUI.FrmMaster.gsgcAllM.Enabled(false)
	gui.FrmMaster.cmdProcess.Enabled(false)
	gui.FrmMaster.cmdBrowseCust.Enabled(false)
	gui.FrmMaster.cmdBrowseSO.Enabled(false)
	'gui.FrmMaster.cmdSave.Enabled(false)
	gui.FrmMaster.chkClosed.Enabled(false)
	gui.FrmMaster.optEdit.Enabled(false)
	gui.FrmMaster.optIssue.Enabled(false)
	gui.FrmMaster.optView.Enabled(false)
	gui.FrmMaster.optWiptoFG.Enabled(false)
	gui.FrmMaster.cmdBrowseCust.Enabled(false)
	gui.FrmMaster.cmdBrowseSO.Enabled(false)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.disableAll.End

Program.Sub.PONotes.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.ssql.Declare
	v.Local.sPO.Declare
	v.Local.sLine.Declare
	v.Local.sText.Declare
	
	v.Local.sPO.Set(v.Args.PO)
	v.Local.sLine.Set(v.args.Line)
	v.Local.sText.Set(v.Args.Text)
	
	f.Intrinsic.String.RPad(v.Local.sLine,"0",4,v.Local.sLine)
	f.Intrinsic.String.LPad(v.Local.sPO,"0",7,v.Local.sPO)
	f.Intrinsic.String.Build("INSERT INTO PO_LN_TEXT VALUES ('{0}','{1}','{2}')",v.local.sPO,v.local.sLine,v.Local.sText,v.Local.ssql)
	f.ODBC.Connection!con.Execute(v.Local.ssql)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.PONotes.End

Program.Sub.MenuClickCreatePO.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	v.Local.iLine.Declare
	v.Local.sVend.Declare
	v.Local.sVendName.Declare
	v.Local.sPart.Declare
	v.Local.sDesc.Declare
	v.Local.sPurU.Declare
	v.Local.fPurC.Declare
	v.Local.fPurQ.Declare
	v.Local.sPrdL.Declare
	v.Local.sMfgP.Declare
	v.Local.sMfgN.Declare
	v.Local.sGenL.Declare
	v.Local.sSrch.Declare
	v.Local.sLine.Declare
	V.Local.sFile.Declare
	v.Local.sDueD.Declare
	v.Local.dDueD.Declare
	v.Local.iPONum.Declare
	v.Local.iCol.Declare
	v.Local.iColCost.Declare
	V.Local.iColVend.Declare
	v.Local.irow.Declare
	V.Local.iret.Declare
	V.Local.sJob.Declare
	v.Local.sSuf.Declare
	v.Local.sSeq.Declare
	v.Local.sSQL.Declare
	v.Local.sret.Declare
	v.Local.sPrm.Declare
	v.Local.sPOP.Declare
	v.Local.sMsg.Declare
	v.Local.sText.Declare
	v.Local.bFlag.Declare
	V.Local.iLastPONum.Declare
	V.Local.sExchDate.Declare
	V.Local.dExchDate.Declare
	V.Local.fExchCost.Declare
	V.Local.fExchRate.Declare
	V.Local.sExchCurr.Declare
	V.Local.fExchExtension.Declare	
	V.Local.sName.Declare
	V.Local.sNameSplit.Declare
	V.Local.sBuyerCode.Declare
	V.Local.sBuyerName.Declare
	V.Local.iPONum1.Declare(Long)
	V.Local.iPONum2.Declare(Long)
	V.Local.sPONum1.Declare(String)
	v.Local.sOverrideConv.Declare
	v.Local.fInvQ.Declare
	v.Local.sInvU.Declare
	v.Local.fPurCostinVendCurr.Declare
	v.Local.sPartNo.Declare
	v.Local.sPartRev.Declare
	
	
'	f.Intrinsic.Control.CallSub(disableAll)
	'Modified by TDjohan - BEGIN (04/01/2022)
'	GUI.FrmMaster.[V.Args.GC].GetColumnIndexByName(v.Args.GV,"COST",v.Local.iColCost)
'	GUI.FrmMaster.[v.Args.GC].GetColumnIndexByName(v.Args.GV,"VENDOR",v.Local.iColVend)
	'Modified by TDjohan - END (04/01/2022)
			
	F.Intrinsic.Control.If(V.DataTable.dtPartsVendor.Exists)
		f.Data.Datatable.Close("dtPartsVendor")
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataView.[v.Args.dt]!dvAllSorted.Exists)
		f.Data.DataView.Close(v.Args.dt,"dvAllSorted")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataView.[v.Args.dt]!dvAllSelected.Exists)
		f.Data.DataView.close(v.Args.dt,"dvAllSelected")
	f.Intrinsic.Control.EndIf
	
	'TDJOHAN - BEGIN - 1/23/2024
'	f.Data.DataView.Create(v.Args.dt,"dvAllSelected",22,"SelectWO=True","Vendor ASC")
	Gui.FrmMaster.[v.Args.GC].GetGridviewProperty(v.Args.GV,"ActiveSortString",v.Local.sret)
	F.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
		v.Local.sret.Set("VENDOR ASC")
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Replace(v.Local.sret.UCase,"VENDOR ASC,","",v.Local.sret)
		F.Intrinsic.String.Replace(v.Local.sret.UCase,"VENDOR DESC,","",v.Local.sret)
		F.Intrinsic.String.Replace(v.Local.sret.UCase,",VENDOR ASC","",v.Local.sret)
		F.Intrinsic.String.Replace(v.Local.sret.UCase,",VENDOR DESC","",v.Local.sret)
		F.Intrinsic.String.Replace(v.Local.sret.UCase,"VENDOR ASC","",v.Local.sret)
		F.Intrinsic.String.Replace(v.Local.sret.UCase,"VENDOR DESC","",v.Local.sret)
		F.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
			v.Local.sret.Set("VENDOR ASC")
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Concat("VENDOR ASC,",v.Local.sret,v.Local.sret)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	f.Data.DataView.Create(v.Args.dt,"dvAllSelected",22,"SelectWO=True",v.Local.sret)
	'TDJOHAN - END - 1/23/2024
	
	'Do a check first for missing vendors or ones that already have a purchase order
	f.Intrinsic.Control.For(v.Local.i,v.DataView.[v.args.dt]!dvAllSelected.RowCount--,0,-1)
		f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SelectWO!Fieldval)
			f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Vendor!FIELDVALTRIM,=,"")
				f.Intrinsic.String.Concat("Vendor selection missing from work order: ",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Job!FIELDVALTRIM,"-",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Suffix!FIELDVALTRIM,"-",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SEQ!FIELDVALTRIM,v.Local.sMsg)
				f.Data.DataView.SetValue(v.args.dt,"dvAllSelected",v.Local.i,"SelectWO",false)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.ElseIf(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PURCHASE_ORDER!FIELDVALTRIM,<>,"")
				f.Intrinsic.String.Concat("Purchase Order already exists for work order: ",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Job!FIELDVALTRIM,"-",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Suffix!FIELDVALTRIM,"-",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SEQ!FIELDVALTRIM,v.Local.sMsg)
				f.Data.DataView.SetValue(v.args.dt,"dvAllSelected",v.Local.i,"SelectWO",false)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.ElseIf(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Vendor!FIELDVALTRIM,<>,"")
				'Double check that it is a valid vendor
				f.Intrinsic.String.Build("SELECT A.VENDOR, B.APPROVED_SUPPL FROM V_VENDOR_MASTER A LEFT JOIN V_VENDOR_ADDL B ON B.VENDOR = A.VENDOR WHERE A.VENDOR='{0}'",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Vendor!FIELDVALTRIM,v.Local.ssql)
				f.ODBC.Connection!CON.ExecuteAndReturn(v.Local.ssql,v.Local.sret)
				f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
					f.Intrinsic.String.Concat("Vendor code is invalid for work order: ",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Job!FIELDVALTRIM,"-",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Suffix!FIELDVALTRIM,"-",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SEQ!FIELDVALTRIM,v.Local.sMsg)
					f.Data.DataView.SetValue(v.args.dt,"dvAllSelected",v.Local.i,"SelectWO",false)
					f.Intrinsic.UI.Msgbox(v.Local.sMsg)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
					f.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
					f.Intrinsic.Control.AndIf(v.Local.sRet(1).Trim,<>,"Y")
						f.Intrinsic.String.Build("Vendor: {0} is not an approved supplier for work order: {1}-{2}-{3}",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Vendor!FIELDVALTRIM,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Job!FIELDVALTRIM,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Suffix!FIELDVALTRIM,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SEQ!FIELDVALTRIM,v.Local.sMsg)
						f.Data.DataView.SetValue(v.args.dt,"dvAllSelected",v.Local.i,"SelectWO",false)
						f.Intrinsic.UI.Msgbox(v.Local.sMsg)
						f.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	'Filter to seperate table
	f.Data.DataView.ToDataTableDistinct(v.args.dt,"dvAllSelected","dtPartsVendor","SelectWO*!*Vendor")
	f.Data.DataTable.AddColumn("dtPartsVendor","PO","String")
	
'	f.Intrinsic.Control.If(v.DataTable.dtPartsVendor.RowCount,>,0)
'		'Get Last PO Number
'		F.ODBC.Connection!CON.ExecuteAndReturn("Select F_LONG From OP_HEADER Where ID = '400301' AND SEQUENCE = '0000';",V.Local.iPONum)
''		F.ODBC.Connection!CON.ExecuteAndReturn("Select Last_PO_Num From Last_PO Where Ass_Sys = 'PUR' And Ass_Sub_Sys = 'CTL';",V.Local.iPONum)
'		
'		'Update Last PO Number
'		F.Intrinsic.Math.Add(V.Local.iPONum,v.DataTable.dtPartsVendor.RowCount,V.Local.iLastPONum)
'		F.Intrinsic.String.LPad(V.Local.iLastPONum,"0",7,V.Local.sPOP)
'		F.Intrinsic.String.Build("Update OP_HEADER Set F_LONG = {0} Where ID = '400301' AND SEQUENCE = '0000';",V.Local.iLastPONum,V.Local.sSQL)
'		F.ODBC.Connection!CON.Execute(V.Local.sSQL)
'		F.Intrinsic.String.Build("Update Last_PO Set Last_PO_Num = '{0}' Where Ass_Sys = 'PUR' And Ass_Sub_Sys = 'CTL';",V.Local.sPOP,V.Local.sSQL)
'		F.ODBC.Connection!CON.Execute(V.Local.sSQL)
'		
'		'Get Buyer Code
'		F.Global.Security.GetFullName(V.Caller.User,V.Local.sName)
'		F.Intrinsic.String.Split(V.Local.sName," ",V.Local.sNameSplit)
'		F.Intrinsic.Control.If(V.Local.sNameSplit.UBound,=,2)
'			F.Intrinsic.String.Build("{0} {1}",V.Local.sNameSplit(0),V.Local.sNameSplit(2),V.Local.sName)
'		F.Intrinsic.Control.EndIf
'		F.Intrinsic.String.Build("Select Buyer_Code From V_Buyers Where Upper(Buyer) = Upper('{0}');",V.Local.sName,V.Local.sSQL)
'		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sBuyerCode)
'	f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.If(v.DataTable.dtPartsVendor.RowCount,>,0)		
		'Get Buyer Code
		F.Global.Security.GetFullName(V.Caller.User,V.Local.sName)
		F.Intrinsic.String.Split(V.Local.sName," ",V.Local.sNameSplit)
		F.Intrinsic.Control.If(V.Local.sNameSplit.UBound,=,2)
			F.Intrinsic.String.Build("{0} {1}",V.Local.sNameSplit(0),V.Local.sNameSplit(2),V.Local.sName)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Build("Select RTRIM(Buyer_Code) AS BUYER_CODE, RTRIM(UPPER(BUYER)) AS BUYER_NAME From V_Buyers Where Upper(Buyer) = Upper('{0}');",V.Local.sName,V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sBuyerCode)
		F.Intrinsic.Control.If(v.Local.sBuyerCode.Trim,=,"","OR",v.Local.sBuyerCode.Trim,=,"OOB")
			v.Local.sBuyerCode.Set("")
			v.Local.sBuyerName.Set("")
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Split(v.Local.sBuyerCode.Trim,"*!*",v.Local.sret)
			v.Local.sBuyerCode.Set(v.Local.sret(0).Trim)
			v.Local.sBuyerName.Set(v.Local.sret(1).Trim)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	

	'Vendor Header
	f.Intrinsic.Control.For(v.Local.i,0,v.datatable.dtPartsVendor.RowCount--,1)
		f.Intrinsic.Control.If(v.datatable.dtPartsVendor(v.Local.i).SelectWO!Fieldval)
			'Set Vendor Code
			v.Local.sVend.Set(v.datatable.dtPartsVendor(v.Local.i).Vendor!FieldvalTRIM)
			
			'Get Last PO Number
			F.ODBC.Connection!CON.ExecuteAndReturn("Select Last_PO_Num From Last_PO Where Ass_Sys = 'PUR' And Ass_Sub_Sys = 'CTL';",V.Local.sPONum1)
			V.Local.iPONum1.Set(V.Local.sPONum1.Long)
			F.ODBC.Connection!CON.ExecuteAndReturn("Select F_LONG From OP_HEADER Where ID = '400301' AND SEQUENCE = '0000';",V.Local.iPONum2)
			F.Intrinsic.Control.If(V.Local.iPONum1,>,V.Local.iPONum2)
				V.Local.iPONum.Set(V.Local.iPONum1)
			F.Intrinsic.Control.Else
				V.Local.iPONum.Set(V.Local.iPONum2)
			F.Intrinsic.Control.EndIf
			
			'Validate that PO Number does not exist in PO_HEADER table
			F.Intrinsic.Control.Do
				F.Intrinsic.Math.Add(V.Local.iPONum,1,V.Local.iPONum)
				F.Intrinsic.String.LPad(V.Local.iPONum,"0",7,V.Local.sPOP)
				F.Intrinsic.String.Build("select PURCHASE_ORDER from V_PO_HEADER where PURCHASE_ORDER = '{0}'",V.Local.sPOP,V.Local.sSQL)
				F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPOExists",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstPOExists.EOF,=,True)
					F.Intrinsic.String.Build("Update OP_HEADER Set F_LONG = {0} Where ID = '400301' AND SEQUENCE = '0000';",V.Local.iPONum,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.String.Build("Update Last_PO Set Last_PO_Num = '{0}' Where Ass_Sys = 'PUR' And Ass_Sub_Sys = 'CTL';",V.Local.sPOP,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.ODBC.con!rstPOExists.Close
					F.Intrinsic.Control.ExitDo
				F.Intrinsic.Control.Else
					F.ODBC.con!rstPOExists.Close
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Loop
			
			f.Data.DataTable.SetValue("dtPartsVendor",v.Local.i,"PO",v.Local.iPONum)
			f.Intrinsic.Control.CallSub(getVendorSetHeader,"Vend",v.Local.sVend,"PONum",v.Local.iPONum,"BuyerCode",V.Local.sBuyerCode)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)	
	
	'Reset sVend variable
	V.Local.sVend.Set("")
	'Vendor Lines
	f.Intrinsic.Control.For(v.Local.i,0,v.DataView.[v.args.dt]!dvAllSelected.RowCount--,1)
		f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SelectWO!Fieldval)			
			
			'Add one to the line and set flag for processing
			f.Intrinsic.Math.Add(v.Local.iLine,1,v.Local.iLine)
			v.Local.bFlag.Set(true)
			
			'Different vendor, reset line
			f.Intrinsic.Control.If(v.Local.sVend.Trim,<>,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Vendor!FIELDVALTRIM)
				v.Local.sVend.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Vendor!FIELDVALTRIM)
				v.Local.sVendName.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).VendorName!FIELDVALTRIM)
				V.Local.iLine.Set(1)				
				
				'Get Exhange Rate Information for Foreign Currency Vendor
				F.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).VendorCurrency!FIELDVALTRIM,<>,v.Global.sComCurr)
					F.Intrinsic.String.Build("select top 1 date_exch_rate as Exch_Date, exchange_rate as Exch_Rate from v_exchange_rates where from_iso_code = '{0}' and to_iso_code = '{1}' and date_exch_rate <= '{2}' and exchange_rate > 0.00000 order by date_exch_rate desc",V.Global.sComCurr,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).VendorCurrency!FIELDVALTRIM,V.Ambient.Date.PervasiveDate,V.Local.sSQL)
					F.ODBC.Connection!con.OpenLocalRecordsetRO("rstExchRate",V.Local.sSQL)
					F.Intrinsic.Control.If(V.ODBC.con!rstExchRate.EOF,=,False)
						V.Local.dExchDate.Set(v.ODBC.con!rstExchRate.FieldVal!Exch_Date)
						V.Local.fExchRate.Set(v.ODBC.con!rstExchRate.FieldValFloat!Exch_Rate)
					F.Intrinsic.Control.Else
						V.Local.dExchDate.Set("1900-01-01")
						V.Local.fExchRate.Set(0.00000)
					F.Intrinsic.Control.EndIf
					f.ODBC.con!rstExchRate.Close
				F.Intrinsic.Control.Else
					V.Local.dExchDate.Set("1900-01-01")
					V.Local.fExchRate.Set(0.00000)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Format(V.Local.dExchDate,"YYYY-MM-DD",V.Local.sExchDate)
				F.Intrinsic.Control.If(V.Local.sExchDate,=,"1900-01-01")
					V.Local.sExchDate.Set("")
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Format(V.Local.dExchDate,"YYYYMMDD",V.Local.sExchDate)
				F.Intrinsic.Control.EndIf
'				F.Intrinsic.String.Format(V.Local.dExchDate,"YYYYMMDD",V.Local.sExchDate)
			f.Intrinsic.Control.EndIf
			
			'Set variables
			v.Local.sExchCurr.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).VendorCurrency!FIELDVALTRIM)
			v.Local.sDesc.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).DESCR!FIELDVALTRIM)
			v.Local.sPurU.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PURUM!FIELDVALTRIM)
			'Modified by TDjohan - BEGIN (04/13/2022)
'			v.Local.fPurQ.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PCSREMAIN!fieldval)
			v.Local.fPurQ.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PUR_QTY!fieldval)
			'Modified by TDjohan - END (04/13/2022)
			v.Local.sPrdL.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).pl!fieldvaltrim)
			v.Local.sJob.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Job!fieldvaltrim)
			v.Local.sSuf.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Suffix!fieldvaltrim)
			v.Local.sSeq.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Seq!fieldvaltrim)
			V.Local.dDueD.Set(V.DataView.[v.args.dt]!dvAllSelected(v.Local.i).LINEDUE!FIELDVAL)
			f.Intrinsic.String.Format(v.Local.dDueD,"MMDDYY",v.Local.sDueD)		

			f.Intrinsic.Math.Round(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Cost!fieldval,6,1,v.Local.fPurCostinVendCurr)
			
			f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PUR_CNV_FACTOR!fieldval,<>,0.00000)
				f.Intrinsic.Math.Mult(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PUR_QTY!fieldval,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PUR_CNV_FACTOR!fieldval,v.Local.fInvQ)
			f.Intrinsic.Control.Else
				v.Local.fInvQ.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PUR_QTY!fieldval)
			f.Intrinsic.Control.EndIf
			v.Local.sInvU.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).INVUM!fieldval)
			
			'Get the Purchasing UM, Inventory UM, and Factor Conversion from Inventory Master
			f.Intrinsic.String.Build("select PART, UM_INVENTORY, UM_PURCHASING, CAST(FACTOR_CONVERSION AS NUMERIC(18,5)) AS FACTOR_CONVERSION from INVENTORY_MSTR where PART = '{0}';",v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MATPART!fieldvaltrim,v.Local.sSQL)
			f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sSQL)
			f.Intrinsic.Control.If(v.ODBC.con!rst.EOF)
				v.Local.sOverrideConv.Set("")
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.ODBC.con!rst.FieldVal!FACTOR_CONVERSION,<>,v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).PUR_CNV_FACTOR!fieldval)
					v.Local.sOverrideConv.Set("Y")
				f.Intrinsic.Control.Else
					v.Local.sOverrideConv.Set("")
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			f.ODBC.con!rst.Close
			
			F.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).VendorCurrency!FIELDVALTRIM,<>,v.Global.sComCurr)
				v.Local.fExchCost.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Cost!fieldval)
				f.Intrinsic.Control.If(V.Local.fExchRate,<>,0)
					f.Intrinsic.Math.Div(V.Local.fExchCost,V.Local.fExchRate,V.Local.fPurC)
				f.Intrinsic.Control.Else
					V.Local.fPurC.Set(V.Local.fExchCost)
				f.Intrinsic.Control.EndIf
				f.Intrinsic.Math.Mult(V.Local.fExchCost,V.Local.fPurQ,V.Local.fExchExtension)
			F.Intrinsic.Control.Else
				v.Local.fPurC.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).Cost!fieldval)	
				v.Local.fExchCost.Set(0.00)
				v.Local.fExchExtension.Set(0.00)
			F.Intrinsic.Control.EndIf
			
			V.Local.iRow.Set(v.DataView.[v.args.dt]!dvAllSelected(v.Local.i).MyrowID!fieldval)
			
'			F.Intrinsic.Control.If(V.Args.DT,=,"dtAllO")
'				f.Intrinsic.String.Build("SELECT PART FROM V_JOB_HEADER WHERE JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuf,v.Local.sSQL)
'				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sret)
'				f.Intrinsic.String.Trim(v.Local.sret,v.Local.sret)
'				f.Intrinsic.Control.If(V.Global.bUseRevision)
'					f.Intrinsic.String.RPad(v.Local.sret," ",20,v.Local.sret)
'					f.Intrinsic.String.Left(v.Local.sret,17,v.Local.sPartNo)
'					f.Intrinsic.String.Right(v.Local.sret,3,v.Local.sPartRev)
'					f.Intrinsic.String.RPad(v.Local.sPartNo," ",16,v.Local.sPartNo)
'					f.Intrinsic.String.Concat(v.Local.sPartNo,"*",v.Local.sPartRev,v.Local.sPart)
'				f.Intrinsic.Control.Else
'					f.Intrinsic.String.RPad(v.Local.sret," ",19,v.Local.sret)
'					f.Intrinsic.String.Concat(v.Local.sret,"*",v.Local.sPart)
'				f.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.Else
'				v.Local.sPart.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MatPart!FIELDVALTRIM)
'			F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.If(V.Args.DT,=,"dtAllO")
				v.Local.sPart.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).OutsideServicePart!FIELDVALTRIM)
			f.Intrinsic.Control.Else
				v.Local.sPart.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MatPart!FIELDVALTRIM)
			F.Intrinsic.Control.EndIf
			
'			'MFG Part #
'			f.Intrinsic.String.Build("select MFG_PART from INV_CROSS_REF WHERE VENDOR='{0}' AND PART='{1}'",V.Local.sVend,v.Local.sPart,v.Local.sSQL)
'			f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sMfgP)
'			
'			'MFG Name
'			f.Intrinsic.String.Build("select MFG_NAME from INV_CROSS_REF WHERE VENDOR='{0}' AND PART='{1}'",V.Local.sVend,v.Local.sPart,v.Local.sSQL)
'			f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sMfgN)

			'Mfg Part No 
			f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MfgPart!FIELDVALTRIM,=,"")
				v.Local.sMfgP.Set("")
			f.Intrinsic.Control.Else
				v.Local.sMfgP.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MfgPart!FIELDVALTRIM)
			f.Intrinsic.Control.EndIf
			
			'Mfg Part Name
			f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MfgName!FIELDVALTRIM,=,"")
				v.Local.sMfgN.Set("")
			f.Intrinsic.Control.Else
				v.Local.sMfgN.Set(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).MfgName!FIELDVALTRIM)
			f.Intrinsic.Control.EndIf			
			
			'GL Code
			f.Intrinsic.Control.If(v.Args.dt,=,"dtAllM")
				f.Intrinsic.String.Build("SELECT GL_ACCT FROM PL_GL_ACCOUNTS WHERE PROD_LINE='{0}' AND TYPE='2'",v.Local.sPrdL.Trim,v.Local.sSQL)
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sGenL)
			f.Intrinsic.Control.ElseIf(v.Args.dt,=,"dtAllO")
				f.Intrinsic.Control.If(v.Global.bUseProdLineFromWO)
					f.Intrinsic.String.Build("SELECT GL_ACCT FROM PL_GL_ACCOUNTS WHERE PROD_LINE='{0}' AND TYPE='3'",v.Local.sPrdL.Trim,v.Local.sSQL)
					f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sGenL)
					f.Intrinsic.Control.If(v.Local.sGenL.Trim,=,"")
						v.Local.sGenL.Set(v.Global.sWIPAcct)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.Else
					'Use the WIP Account in Company Options (standard) > Inventory Accountion Options > Purchasing Options
					f.Intrinsic.Control.If(v.Global.sWIPAcct.Trim,=,"")
						f.Intrinsic.UI.Msgbox("WIP Account in Company Options (standard) > Inventory Accountion Options > Purchasing Options is BLANK")
						f.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.Else
						v.Local.sGenL.Set(v.Global.sWIPAcct)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
			'Select PO #
			f.Intrinsic.String.Build("Vendor='{0}' AND PO<>''",v.Local.sVend,v.Local.sSrch)
			f.Data.Datatable.Select("dtPartsVendor",v.Local.sSrch,v.Local.sret)
			
			'Set line & add row
			f.Intrinsic.String.LPad(v.Local.iLine,"0",3,v.local.sLine)
'			F.Data.DataTable.AddRow("UPLPURORL","PONum",v.DataTable.dtpartsvendor(v.Local.sret).PO!fieldvaltrim,"RecType",v.Local.sLine,"WONum",v.Local.sJob,"WOSeq",v.Local.sSeq,"WOSuffix",v.Local.sSuf,"PartNum",v.Local.sPart,"MfgPartNum",v.Local.sMfgP,"MfgName",v.Local.sMfgN,"PartDesc",v.Local.sDesc,"PurchQtyOrdered",v.Local.fPurQ,"PurchCost",v.Local.fPurC,"POUM",v.Local.sPurU,"PL",v.Local.sPrdL,"GLAcct",v.Local.sGenL,"DueDate",v.Local.sDueD,"ExchDate",V.Local.sExchDate,"ExchRate",V.Local.fExchRate,"ExchCurr",V.Local.sExchCurr,"ExchCost",V.Local.fExchCost,"ExchExt",V.Local.fExchExtension)
			F.Intrinsic.Control.If(v.Local.sOverrideConv,=,"Y")
				F.Data.DataTable.AddRow("UPLPURORL","PONum",v.DataTable.dtpartsvendor(v.Local.sret).PO!fieldvaltrim,"RecType",v.Local.sLine,"WONum",v.Local.sJob,"WOSeq",v.Local.sSeq,"WOSuffix",v.Local.sSuf,"PartNum",v.Local.sPart,"MfgPartNum",v.Local.sMfgP,"MfgName",v.Local.sMfgN,"PartDesc",v.Local.sDesc,"PurchQtyOrdered",v.Local.fPurQ,"PurchCost",v.Local.fPurC,"POUM",v.Local.sPurU,"PL",v.Local.sPrdL,"GLAcct",v.Local.sGenL,"DueDate",v.Local.sDueD,"ExchDate",V.Local.sExchDate,"ExchRate",V.Local.fExchRate,"ExchCurr",V.Local.sExchCurr,"ExchCost",V.Local.fExchCost,"ExchExt",V.Local.fExchExtension,"InvQtyOrdered",v.Local.fInvQ,"InvUM",v.Local.sInvU,"OverrideConv",v.Local.sOverrideConv)
			F.Intrinsic.Control.Else
				F.Data.DataTable.AddRow("UPLPURORL","PONum",v.DataTable.dtpartsvendor(v.Local.sret).PO!fieldvaltrim,"RecType",v.Local.sLine,"WONum",v.Local.sJob,"WOSeq",v.Local.sSeq,"WOSuffix",v.Local.sSuf,"PartNum",v.Local.sPart,"MfgPartNum",v.Local.sMfgP,"MfgName",v.Local.sMfgN,"PartDesc",v.Local.sDesc,"PurchQtyOrdered",v.Local.fPurQ,"PurchCost",v.Local.fPurC,"POUM",v.Local.sPurU,"PL",v.Local.sPrdL,"GLAcct",v.Local.sGenL,"DueDate",v.Local.sDueD,"ExchDate",V.Local.sExchDate,"ExchRate",V.Local.fExchRate,"ExchCurr",V.Local.sExchCurr,"ExchCost",V.Local.fExchCost,"ExchExt",V.Local.fExchExtension)
			F.Intrinsic.Control.EndIf
			
			'Add WO Comments to PO if company option turned on and there are comments
			f.Intrinsic.Control.If(v.Global.bPONotes)
				f.Intrinsic.String.Build("SELECT TEXT FROM WO_SEQ_COMMENTS WHERE WO='{0}' AND WO_SUFFIX='{1}' AND WO_SEQ='{2}'",v.Local.sJob,v.local.sSuf,v.Local.sSeq,v.Local.sSQL)
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sText)
				f.Intrinsic.Control.If(v.Local.sText.Trim,<>,"")
					f.Intrinsic.Control.CallSub(PONotes,"PO",v.DataTable.dtpartsvendor(v.Local.sret).PO!fieldvaltrim,"LINE",v.Local.sLine,"Text",v.Local.sText)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		
			f.Intrinsic.String.LPad(v.DataTable.dtpartsvendor(v.Local.sret).PO!fieldvaltrim,"0",7,v.Local.sPOP)
'			f.Data.DataView.SetValue(v.Args.dt,"dvAllSelected",v.Local.i,"PURCHASE_ORDER",v.Local.sPOP,"LINE",v.Local.sLine,"DATE_DUE_LINE",v.Local.dDueD,"Text",v.Local.sText)
			f.Data.DataView.SetValue(v.Args.dt,"dvAllSelected",v.Local.i,"PURCHASE_ORDER",v.Local.sPOP,"LINE",v.Local.sLine,"DATE_DUE_LINE",v.Local.dDueD,"Text",v.Local.sText,"LAST_PO_VENDOR",V.Local.sVend,"LAST_PO_VENDOR_NAME",v.Local.sVendName,"LAST_PO_BUYER_CODE",V.Local.sBuyerCode,"LAST_PO_BUYER_NAME",v.Local.sBuyerName,"PO_COST",v.Local.fPurCostinVendCurr)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.Control.If(v.Local.bFlag)
		
		f.Intrinsic.UI.InvokeWaitDialog("Generating Purchase Orders")
		'Upload purchase orders
		F.Intrinsic.Control.CallSub(UPLPURORSync)
		
		F.Intrinsic.Control.If(V.Global.sGabPoApproval,<>,"")
			f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtPartsVendor.RowCount--,1)
				F.Intrinsic.String.LPad(v.DataTable.dtPartsVendor(v.Local.i).PO!fieldvaltrim,"0",7,v.Local.sPOP)
				F.Intrinsic.Control.CallSub(GeneratePOApproval,"PO",v.Local.sPOP)
			f.Intrinsic.Control.Next(v.Local.i)
		F.Intrinsic.Control.EndIf
		
'		'Open each purchase order
'		f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtPartsVendor.RowCount--,1)
'			F.Intrinsic.Control.If(v.DataTable.dtpartsvendor(v.Local.i).SELECTwo!FIELDVAL)
'				f.Data.DataTable.AddRow("175200","Mode","O","PONum",v.DataTable.dtPartsVendor(v.Local.i).PO!fieldvaltrim)
'			F.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.Next(v.Local.i)
'		f.Intrinsic.Control.CallSub(175200ASync)

		f.Intrinsic.UI.CloseWaitDialog
		
		'Lock the cells
		'Have to omit lock cells for now for the sake of speed. 11th September 2020
		f.Intrinsic.Control.For(v.Local.i,v.DataView.[v.args.dt]!dvAllSelected.RowCount--,0,-1)
			f.Intrinsic.Control.If(v.DATAVIEW.[v.args.dt]!dvAllSelected(v.Local.i).SelectWO!Fieldval)
				V.Local.iRow.Set(v.DataView.[v.args.dt]!dvAllSelected(v.Local.i).MyrowID!fieldval)
				'GUI.FrmMaster.gsgcAllM.setcellproperty("gvAllM",v.Local.iColCost,v.Local.irow,"READONLY",true)
				'GUI.FrmMaster.gsgcAllM.setcellproperty("gvAllM",v.Local.iColVend,v.Local.irow,"READONLY",true)
				f.Data.DataView.SetValue(v.Args.dt,"dvAllSelected",v.Local.i,"SelectWO",False)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.i)
	f.Intrinsic.Control.EndIf
	
'	f.Intrinsic.Control.CallSub(enableAll)
	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickCreatePO.End

Program.Sub.getVendorSetHeader.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.ssql.Declare
	v.Local.sret.Declare
	v.Local.sVend.Declare
	v.Local.iPONum.Declare
	v.Local.sBuyerCode.Declare
	
	v.Local.sVendName.Declare
	v.Local.sVendAddr1.Declare
	v.Local.sVendAddr2.Declare
	v.Local.sVendAddr3.Declare
	v.Local.sVendAddr4.Declare
	v.Local.sVendAddr5.Declare
	v.Local.sVendCity.Declare
	v.Local.sVendState.Declare
	v.Local.sVendZip.Declare
	v.Local.sVendCountry.Declare
	v.Local.sVendCounty.Declare
	v.Local.sVendAttn.Declare
	v.Local.sIntlFlag.Declare
	v.Local.sShipVendName.Declare
	v.Local.sShipVendAddr1.Declare
	v.Local.sShipVendAddr2.Declare
	v.Local.sShipVendAddr3.Declare
	v.Local.sShipVendAddr4.Declare
	v.Local.sShipVendAddr5.Declare
	v.Local.sShipVendCity.Declare
	v.Local.sShipVendState.Declare
	v.Local.sShipVendZip.Declare
	v.Local.sShipVendCountry.Declare
	v.Local.sShipVendCounty.Declare 
	v.Local.sShipVendAttn.Declare
	v.Local.sShipIntlFlag.Declare
	v.Local.sFOB.Declare
	v.Local.sTrms.Declare
	v.Local.sBuyC.Declare
	v.Local.sTaxable.Declare
	
	v.Local.sVend.Set(v.Args.Vend)
	v.Local.iPONum.Set(v.Args.PONum)
	v.Local.sBuyerCode.Set(v.Args.BuyerCode)

	f.Intrinsic.String.Build("SELECT NAME_VENDOR, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, CITY, STATE, CODE_ZIP, COUNTRY, COUNTY, ATTENTION, BUYER, INTL_ADRS FROM V_VENDOR_MASTER3 WHERE VENDOR='{0}'",v.Local.sVend.Trim,v.Local.sSQL)
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	v.Local.sVendName.Set(v.Local.sRet(0))
	v.Local.sVendAddr1.Set(v.Local.sRet(1))
	v.Local.sVendAddr2.Set(v.Local.sRet(2))
	v.Local.sVendAddr3.Set(v.Local.sRet(3))
	v.Local.sVendAddr4.Set(v.Local.sRet(4))
	v.Local.sVendAddr5.Set(v.Local.sRet(5))
	v.Local.sVendCity.Set(v.Local.sRet(6))
	v.Local.sVendState.Set(v.Local.sRet(7))
	v.Local.sVendZip.Set(v.Local.sRet(8))
	v.Local.sVendCountry.Set(v.Local.sRet(9))
	v.Local.sVendCounty.Set(v.Local.sRet(10))
	v.Local.sVendAttn.Set(v.Local.sRet(11))
	v.Local.sBuyC.Set(v.Local.sRet(12))
	v.Local.sIntlFlag.Set(v.Local.sRet(13))
	
	f.Intrinsic.Control.If(V.Local.sBuyerCode.Trim,<>,"")
		V.Local.sBuyC.Set(v.Local.sBuyerCode.Trim)
	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!con.ExecuteAndReturn("SELECT NAME_VENDOR, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, CITY, STATE, CODE_ZIP, COUNTRY, COUNTY, ATTENTION, INTL_ADRS FROM V_VENDOR_MASTER3 WHERE RESV='1'",v.Local.sRet)
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	v.Local.sShipVendName.Set(v.Local.sRet(0))
	v.Local.sShipVendAddr1.Set(v.Local.sRet(1))
	v.Local.sShipVendAddr2.Set(v.Local.sRet(2))
	v.Local.sShipVendAddr3.Set(v.Local.sRet(3))
	v.Local.sShipVendAddr4.Set(v.Local.sRet(4))
	v.Local.sShipVendAddr5.Set(v.Local.sRet(5))
	v.Local.sShipVendCity.Set(v.Local.sRet(6))
	v.Local.sShipVendState.Set(v.Local.sRet(7))
	v.Local.sShipVendZip.Set(v.Local.sRet(8))
	v.Local.sShipVendCountry.Set(v.Local.sRet(9))
	v.Local.sShipVendCounty.Set(v.Local.sRet(10))
	v.Local.sShipVendAttn.Set(v.Local.sRet(11))
	v.Local.sShipIntlFlag.Set(v.Local.sRet(12))
	
	F.Intrinsic.String.Build("select A.PAYMENT_TERMS AS TERMS_CODE, A.CODE_FOB, B.TERMS_MESSAGE AS TERMS_DESC from V_VENDOR_PAY_TO A, V_AP_TERMS B WHERE A.VENDOR = '{0}' AND A.PAYMENT_TERMS = B.TERMS_CODE;",v.Local.sVend.Trim,V.Local.sSQL)
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"")
		v.Local.sFOB.Set("")
		v.Local.sTrms.Set("")
	F.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sFOB.Set(v.Local.sRet(1))
		v.Local.sTrms.Set(v.Local.sRet(2))
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("select SUBJECT_TO_VAT_STAT AS TAXABLE from V_VAT_VEND_TAX WHERE VENDOR_ID = '{0}';",v.Local.sVend.Trim,V.Local.sSQL)
	F.ODBC.Connection!con.OpenLocalRecordsetRO("rstVendTax",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.con!rstVendTax.EOF,=,False)
		F.Intrinsic.Control.If(v.ODBC.con!rstVendTax.FieldVal!TAXABLE,=,True)
			V.Local.sTaxable.Set("T")
		F.Intrinsic.Control.Else
			V.Local.sTaxable.Set("E")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		V.Local.sTaxable.Set("E")
	F.Intrinsic.Control.EndIf
	F.ODBC.con!rstVendTax.Close
		
	F.Data.DataTable.AddRow("UPLPURORA","PONum",v.Local.iPONum,"VendNum",v.Local.sVend,"OrderTaxCode",V.Local.sTaxable,"Terms",v.Local.sTrms,"BuyerCode",v.Local.sBuyC,"FOBInfo",v.Local.sFOB)
	f.Data.DataTable.AddRow("UPLPURORBC","PONum",v.Local.iPONum,"RecType","B","VendName",v.Local.sVendName,"VendAddr1",v.Local.sVendAddr1,"VendAddr2",v.Local.sVendAddr2,"VendAddr3",v.Local.sVendAddr3,"VendAddr4",v.Local.sVendAddr4,"VendAddr5",v.Local.sVendAddr5,"VendCity",v.Local.sVendCity,"VendState",v.Local.sVendState,"VendZip",v.Local.sVendZip,"VendCountry",v.Local.sVendCountry,"VendAttn",v.Local.sVendAttn,"IntlFlag",v.Local.sIntlFlag)
	F.Data.DataTable.AddRow("UPLPURORBC","PONum",v.Local.iPONum,"RecType","C","VendName",v.Local.sShipVendName,"VendAddr1",v.Local.sShipVendAddr1,"VendAddr2",v.Local.sShipVendAddr2,"VendAddr3",v.Local.sShipVendAddr3,"VendAddr4",v.Local.sShipVendAddr4,"VendAddr5",v.Local.sShipVendAddr5,"VendCity",v.Local.sShipVendCity,"VendState",v.Local.sShipVendState,"VendZip",v.Local.sShipVendZip,"VendCountry",v.Local.sShipVendCountry,"VendAttn",v.Local.sShipVendAttn,"IntlFlag",v.Local.sShipIntlFlag)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry

Program.Sub.getVendorSetHeader.End

Program.Sub.MenuClickIssue.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.i.Declare
	f.Intrinsic.String.Format(v.Ambient.Date,"YYYYMMDD",v.Local.sDate)
	f.Intrinsic.String.Format(v.Ambient.Now,"HHNNSSss",v.Local.sTime)
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllM.RowCount--,1)
		f.Intrinsic.Control.If(v.DataTable.dtAllM(v.Local.i).SelectWO!fieldval)
			f.Data.DataTable.AddRow("450150","WONum",v.DataTable.dtAllM(v.Local.i).JOB!FIELDVALTRIM,"WOSuffix",V.DataTable.dtAllM(v.Local.i).Suffix!fieldvaltrim)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	f.Intrinsic.Control.CallSub(450150Sync)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickIssue.End

Program.Sub.MenuClickExport.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sFileExport.Declare
	V.Local.bExcel.Declare
	V.Local.bFileLocked.Declare
	V.Local.sMsg.Declare
	V.Local.sControl.Declare
	V.Local.iColumnCnt.Declare
	V.Local.iCol.Declare
	V.Local.sColumnName.Declare
	V.Local.sRet.Declare
	
	F.Intrinsic.Control.If(v.Screen.FrmMaster!tabProd.Visible,=,False)
		f.Intrinsic.UI.Msgbox("No data loaded, unable to export.")
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.SelectCase(V.Screen.FrmMaster!tabProd.Tab)
		F.Intrinsic.Control.Case("0")
			V.Local.sControl.Set("GsGcAll")
		F.Intrinsic.Control.Case("1")
			V.Local.sControl.Set("GsGcAllM")
		F.Intrinsic.Control.Case("2")
			V.Local.sControl.Set("GsGcAllO")
		F.Intrinsic.Control.Case("3")
			V.Local.sControl.Set("GsGcOper")
	F.Intrinsic.Control.EndSelect
	
	F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
	F.Intrinsic.Control.If(V.Local.bExcel)
'		F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
'		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
'		F.Intrinsic.Control.If(V.Local.bFileLocked)
'			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
'			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
'		F.Intrinsic.Control.Else
''			F.Intrinsic.Control.If(V.Local.sControl,=,"GsGCAll")
''				Gui.FrmMaster.[V.Local.sControl].GetGridViewProperty("gvAll","ActiveFilterString",V.Local.sRet)
''				Gui.FrmMaster.[V.Local.sControl].SetGridViewProperty("gvMatl","ActiveFilterString",V.Local.sRet)
''			F.Intrinsic.Control.EndIf
'			
'			Gui.FrmMaster.[V.Local.sControl].ExportDetails("xlsx",V.Local.sFileExport,1)
''			Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
'			
'			F.Intrinsic.Control.If(V.Local.sControl,=,"GsGCAll")
'				F.Automation.MSExcel.CreateAppObject("oExcel")
'				F.Automation.MSExcel.OpenWorkbook("oExcel","owbExcel",V.Local.sFileExport)
'				
'				'All Work Orders Sheet
'				F.Automation.MSExcel.OpenWorksheet("owbExcel","owsExcel",1)
'				'Rename the worksheet name
'				F.Automation.MSExcel.NameWorksheet("owsExcel","All Work Orders")
'				F.Automation.Generic.DestroyObject("owsExcel")
'				
'				'Material Sheet
'				F.Automation.MSExcel.OpenWorksheet("owbExcel","owsExcel",2)
'				'Rename the worksheet name
'				F.Automation.MSExcel.NameWorksheet("owsExcel","Material")
'				'Set the column headers 
'				Gui.FrmMaster.[V.Local.sControl].GetColumnCount("gvMatl",V.Local.iColumnCnt)
'				F.Intrinsic.Control.For(V.Local.iCol,1,V.Local.iColumnCnt,1)
'					F.Automation.MSExcel.ReadCell("owsExcel",1,V.Local.iCol,V.Local.sColumnName)
'					Gui.FrmMaster.[V.Local.sControl].GetColumnProperty("gvMatl",V.Local.sColumnName,"Caption",V.Local.sRet)
'					F.Automation.MSExcel.WriteCell("owsExcel",1,V.Local.iCol,V.Local.sRet)
'				F.Intrinsic.Control.Next(V.Local.iCol)
'				F.Automation.Generic.DestroyObject("owsExcel")
'				
'				'Labor Sheet
'				F.Automation.MSExcel.OpenWorksheet("owbExcel","owsExcel",3)
'				'Rename the worksheet name
'				F.Automation.MSExcel.NameWorksheet("owsExcel","Labor")
'				'Set the column headers 
'				Gui.FrmMaster.[V.Local.sControl].GetColumnCount("gvLabr",V.Local.iColumnCnt)
'				F.Intrinsic.Control.For(V.Local.iCol,1,V.Local.iColumnCnt,1)
'					F.Automation.MSExcel.ReadCell("owsExcel",1,V.Local.iCol,V.Local.sColumnName)
'					Gui.FrmMaster.[V.Local.sControl].GetColumnProperty("gvLabr",V.Local.sColumnName,"Caption",V.Local.sRet)
'					F.Automation.MSExcel.WriteCell("owsExcel",1,V.Local.iCol,V.Local.sRet)
'				F.Intrinsic.Control.Next(V.Local.iCol)
'				F.Automation.Generic.DestroyObject("owsExcel")
'				
'				'Outside Sheet
'				F.Automation.MSExcel.OpenWorksheet("owbExcel","owsExcel",4)
'				'Rename the worksheet name
'				F.Automation.MSExcel.NameWorksheet("owsExcel","Outside")
'				'Set the column headers 
'				Gui.FrmMaster.[V.Local.sControl].GetColumnCount("gvOut",V.Local.iColumnCnt)
'				F.Intrinsic.Control.For(V.Local.iCol,1,V.Local.iColumnCnt,1)
'					F.Automation.MSExcel.ReadCell("owsExcel",1,V.Local.iCol,V.Local.sColumnName)
'					Gui.FrmMaster.[V.Local.sControl].GetColumnProperty("gvOut",V.Local.sColumnName,"Caption",V.Local.sRet)
'					F.Automation.MSExcel.WriteCell("owsExcel",1,V.Local.iCol,V.Local.sRet)
'				F.Intrinsic.Control.Next(V.Local.iCol)
'				
'				'Save the changes to the workbook
'				F.Automation.MSExcel.SaveWorkbook("owbExcel")		
'				
'				'Destroy 
'				F.Automation.MSExcel.DestroyAllObjects("oExcel","owbExcel","owsExcel")
'			F.Intrinsic.Control.EndIf
			
'			Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
'			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			
		F.Intrinsic.Control.If(V.Local.sControl,=,"GsGcAll")
			'Check the Parent Files
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check the Child File - Material
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Matl_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check the Child File - Labor
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Labr_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check the Child File - Outside
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Outs_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			
			'Export to Excel files
			Gui.FrmMaster.[V.Local.sControl].GetGridViewProperty("gvAll","ActiveFilterString",V.Local.sRet)
			
			'Export Parent
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			'Export Children Material
			Gui.FrmMaster.gsgcExport.AddGridViewFromDataTable("gvMatlExport","dtAll2$dtChildMat")
			f.Intrinsic.Control.CallSub(SetColumnPropertiesMatl,"Grid","gsgcExport","GridView","gvMatlExport")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvMatlExport","WO_Label","Visible",True)
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvMatlExport","WO_Label","Fixed","Left")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvMatlExport","WO_Label","VisibleIndex",0)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvMatlExport","ActiveFilterString",V.Local.sRet)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvMatlExport","ActiveSortString","WO_Label")
			Gui.FrmMaster.gsgcExport.MainView("gvMatlExport")
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Matl_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.gsgcExport.Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			'Export Children Labor
			Gui.FrmMaster.gsgcExport.AddGridViewFromDataTable("gvLabrExport","dtAll2$dtChildLabr")
			f.Intrinsic.Control.CallSub(SetColumnPropertiesLabr,"Grid","gsgcExport","GridView","gvLabrExport")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvLabrExport","WO_Label","Visible",True)
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvLabrExport","WO_Label","Fixed","Left")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvLabrExport","WO_Label","VisibleIndex",0)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvLabrExport","ActiveFilterString",V.Local.sRet)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvLabrExport","ActiveSortString","WO_Label")
			Gui.FrmMaster.gsgcExport.MainView("gvLabrExport")
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Labr_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.gsgcExport.Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			'Export Children Outside
			Gui.FrmMaster.gsgcExport.AddGridViewFromDataTable("gvOutsExport","dtAll2$dtChildOuts")
			f.Intrinsic.Control.CallSub(SetColumnPropertiesOuts,"Grid","gsgcExport","GridView","gvOutsExport")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvOutsExport","WO_Label","Visible",True)
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvOutsExport","WO_Label","Fixed","Left")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvOutsExport","WO_Label","VisibleIndex",0)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvOutsExport","ActiveFilterString",V.Local.sRet)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvOutsExport","ActiveSortString","WO_Label")
			Gui.FrmMaster.gsgcExport.MainView("gvOutsExport")
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Outs_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.gsgcExport.Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
		F.Intrinsic.Control.Else
		
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.xlsx",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
			F.Intrinsic.Control.Else
				Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
				F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
'		F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
'		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
'		F.Intrinsic.Control.If(V.Local.bFileLocked)
'			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
'			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
'		F.Intrinsic.Control.Else
'			Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"csv")
'		F.Intrinsic.Control.EndIf
'		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
		
		
		F.Intrinsic.Control.If(V.Local.sControl,=,"GsGcAll")
			'Check the Parent Files
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check the Child File - Material
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Matl_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check the Child File - Labor
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Labr_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check the Child File - Outside
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Outs_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			
			'Export to csv files
			Gui.FrmMaster.[V.Local.sControl].GetGridViewProperty("gvAll","ActiveFilterString",V.Local.sRet)
			
			'Export Parent
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"csv")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			'Export Children Material
			Gui.FrmMaster.gsgcExport.AddGridViewFromDataTable("gvMatlExport","dtAll2$dtChildMat")
			f.Intrinsic.Control.CallSub(SetColumnPropertiesMatl,"Grid","gsgcExport","GridView","gvMatlExport")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvMatlExport","WO_Label","Visible",True)
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvMatlExport","WO_Label","Fixed","Left")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvMatlExport","WO_Label","VisibleIndex",0)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvMatlExport","ActiveFilterString",V.Local.sRet)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvMatlExport","ActiveSortString","WO_Label")
			Gui.FrmMaster.gsgcExport.MainView("gvMatlExport")
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Matl_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.gsgcExport.Export(V.Local.sFileExport,"csv")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			'Export Children Labor
			Gui.FrmMaster.gsgcExport.AddGridViewFromDataTable("gvLabrExport","dtAll2$dtChildLabr")
			f.Intrinsic.Control.CallSub(SetColumnPropertiesLabr,"Grid","gsgcExport","GridView","gvLabrExport")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvLabrExport","WO_Label","Visible",True)
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvLabrExport","WO_Label","Fixed","Left")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvLabrExport","WO_Label","VisibleIndex",0)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvLabrExport","ActiveFilterString",V.Local.sRet)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvLabrExport","ActiveSortString","WO_Label")
			Gui.FrmMaster.gsgcExport.MainView("gvLabrExport")
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Labr_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.gsgcExport.Export(V.Local.sFileExport,"csv")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
			'Export Children Outside
			Gui.FrmMaster.gsgcExport.AddGridViewFromDataTable("gvOutsExport","dtAll2$dtChildOuts")
			f.Intrinsic.Control.CallSub(SetColumnPropertiesOuts,"Grid","gsgcExport","GridView","gvOutsExport")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvOutsExport","WO_Label","Visible",True)
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvOutsExport","WO_Label","Fixed","Left")
			Gui.FrmMaster.gsgcExport.SetColumnProperty("gvOutsExport","WO_Label","VisibleIndex",0)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvOutsExport","ActiveFilterString",V.Local.sRet)
			Gui.FrmMaster.gsgcExport.SetGridviewProperty("gvOutsExport","ActiveSortString","WO_Label")
			Gui.FrmMaster.gsgcExport.MainView("gvOutsExport")
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Outs_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			Gui.FrmMaster.gsgcExport.Export(V.Local.sFileExport,"csv")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			
		F.Intrinsic.Control.Else
		
			F.Intrinsic.String.Build("{0}\GAB_6271_OpenWorkOrders_{1}_Export.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sFileExport)
			F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
			F.Intrinsic.Control.If(V.Local.bFileLocked)
				F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
			F.Intrinsic.Control.Else
				Gui.FrmMaster.[V.Local.sControl].Export(V.Local.sFileExport,"csv")
				F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.Control.If(V.Object.owsExcel!IsNothing,=,False)
			F.Automation.Generic.DestroyObject("owsExcel")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.Object.owbExcel!IsNothing,=,False)
			F.Automation.Generic.DestroyObject("owbExcel")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.Object.oExcel!IsNothing,=,False)
			F.Automation.Generic.DestroyObject("oExcel")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickExport.End

Program.Sub.MenuClickResetColumns.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.MenuName.UCase)
		F.Intrinsic.Control.Case("CTXALL")
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVALL",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
		F.Intrinsic.Control.Case("CTXOPER")
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVOPER",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
		F.Intrinsic.Control.Case("CTXALLM")
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVALLM",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
		F.Intrinsic.Control.Case("CTXALLO")
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVALLO",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
	F.Intrinsic.Control.EndSelect
	V.Global.bLoadData.Set(False)
	F.Intrinsic.Control.CallSub(cmdProcess_Click)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickResetColumns.End

Program.Sub.MenuClickNew.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.frmNewWO..Show
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.MenuClickNew.End

Program.Sub.frmNewWO_UnLoad.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.frmNewWO..Visible(False)

	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.frmNewWO_UnLoad.End

Program.Sub.cmdManualWO_Click.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.iRet.Declare
	
	Gui.frmNewWO..Visible(False)
	F.Global.General.LaunchMenuTask(527,2,V.Local.iRet)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.cmdManualWO_Click.End

Program.Sub.cmdAutoWO_Click.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.iRet.Declare
	
	Gui.frmNewWO..Visible(False)
	F.Global.General.LaunchMenuTask(540,0,V.Local.iRet)

	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.cmdAutoWO_Click.End

Program.Sub.FrmMaster_Resize.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	'Let Form grow larger than 15375, but not lower
	F.Intrinsic.Control.If(V.Screen.FrmMaster.Width,<,15360)
		Gui.FrmMaster..Size(15360,V.Screen.FrmMaster.Height)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload) 
	F.Intrinsic.Control.EndTry
Program.Sub.FrmMaster_Resize.End

Program.Sub.FrmMaster_UnLoad.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.lRet.Declare
	
'	f.Intrinsic.Control.If(v.Global.sRows.Trim,<>,"")
'		f.Intrinsic.UI.Msgbox("Save all changes?","Save Changes?",4,v.Local.lRet)
'		f.Intrinsic.Control.If(v.local.lRet,=,6)
'			f.Intrinsic.Control.CallSub(cmdSave_click)
'			F.Intrinsic.Control.If(V.Global.bLoadData)
'				F.Intrinsic.Control.CallSub(Serialize)
'			F.Intrinsic.Control.EndIf
'			F.ODBC.Connection!con.Close
'			F.Intrinsic.Control.End
'		F.Intrinsic.Control.ElseIf(v.Local.lRet,=,2)
'			f.Intrinsic.Control.ExitSub
'		f.Intrinsic.Control.Else
'			F.Intrinsic.Control.If(V.Global.bLoadData)
'				F.Intrinsic.Control.CallSub(Serialize)
'			F.Intrinsic.Control.EndIf
'			F.ODBC.Connection!con.Close
'			F.Intrinsic.Control.End
'		f.Intrinsic.Control.EndIf
'	f.Intrinsic.Control.Else
'		F.Intrinsic.Control.If(V.Global.bLoadData)
'			F.Intrinsic.Control.CallSub(Serialize)
'		F.Intrinsic.Control.EndIf
'		F.ODBC.Connection!con.Close
'		F.Intrinsic.Control.End
'	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(V.Global.bLoadData)
		F.Intrinsic.Control.CallSub(Serialize)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtAll.Exists)
		f.Data.DataTable.Close("dtAll")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtOper.Exists)
		f.Data.DataTable.Close("dtOper")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtAllO.Exists)
		f.Data.DataTable.Close("dtAllO")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtAllM.Exists)
		f.Data.DataTable.Close("dtAllM")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildMat.Exists)
		f.Data.DataTable.Close("dtChildMat")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildMatMisc.Exists)
		f.Data.DataTable.Close("dtChildMatMisc")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildLabr.Exists)
		f.Data.DataTable.Close("dtChildLabr")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildOuts.Exists)
		f.Data.DataTable.Close("dtChildOuts")
	f.Intrinsic.Control.EndIf
	
'	f.Intrinsic.Control.If(v.DataTable.dtOperIds.Exists)
'		f.Data.Datatable.close("dtOperIds")
'	f.Intrinsic.Control.EndIf

'	f.Intrinsic.Control.If(v.DataTable.dtAllMIds.Exists)
'		f.Data.Datatable.close("dtAllMIds")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.dtAllOIds.Exists)
'		f.Data.Datatable.close("dtAllOIds")
'	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtProfileLayout.Exists)
		f.Data.Datatable.close("dtProfileLayout")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtProfileUser.Exists)
		f.Data.Datatable.close("dtProfileUser")
	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!CommonCon.Close
	f.ODBC.Connection!con.Close
	f.Intrinsic.Control.End
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End 
	F.Intrinsic.Control.EndTry
Program.Sub.FrmMaster_UnLoad.End

Program.Sub.CheckTable.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	v.Local.bTable.Declare(Boolean)

	F.ODBC.Connection!con.TableExists("GAB_4169_WO_NOTES",V.Local.bTable)
	F.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_4169_WO_NOTES (JOB CHAR(6),SUFFIX CHAR(3),NOTES LONGVARCHAR);")
		F.ODBC.Connection!Con.Execute("CREATE INDEX GAB_4169_WO_NOTES01 USING 1 ON GAB_4169_WO_NOTES(JOB);")
		F.ODBC.Connection!Con.Execute("CREATE INDEX GAB_4169_WO_NOTES02 USING 2 ON GAB_4169_WO_NOTES(SUFFIX);")
	F.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!con.TableExists("GAB_4169_WO_NOTESLOG",V.Local.bTable)
	f.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_4169_WO_NOTESLOG ( JOB CHAR(6), SUFFIX CHAR(3), NOTES LONGVARCHAR, USERID VARCHAR(8), DATECHANGE DATETIME DEFAULT NOW(), FIELD VARCHAR(50) );")
		f.ODBC.Connection!con.Execute("CREATE INDEX GAB_4169_WO_NOTESL01 USING 1 ON GAB_4169_WO_NOTESLOG ( JOB );")
		f.ODBC.Connection!con.Execute("CREATE INDEX GAB_4169_WO_NOTESL02 USING 2 ON GAB_4169_WO_NOTESLOG ( SUFFIX );")
	f.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!con.TableExists("GAB_6271_WO_NOTES",V.Local.bTable)
	F.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_6271_WO_NOTES (JOB CHAR(6), SUFFIX CHAR(3), SEQ CHAR(6), NOTES LONGVARCHAR);")
		F.ODBC.Connection!Con.Execute("CREATE INDEX GAB_6271_WO_NOTES01 USING 1 ON GAB_6271_WO_NOTES ( JOB, SUFFIX, SEQ );")
	F.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!con.TableExists("GAB_6271_WO_NOTESLOG",V.Local.bTable)
	f.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_6271_WO_NOTESLOG ( JOB CHAR(6), SUFFIX CHAR(3), SEQ CHAR(6), NOTES LONGVARCHAR, USERID VARCHAR(8), DATECHANGE DATETIME DEFAULT NOW(), FIELD VARCHAR(50) );")
		f.ODBC.Connection!con.Execute("CREATE INDEX GAB_6271_WO_NOTESL01 USING 1 ON GAB_6271_WO_NOTESLOG ( JOB, SUFFIX, SEQ );")
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.CheckTable.End

Program.Sub.CheckLongPart.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	' System Support > Administration > Company Options (Advanced) > Inventory
	'	At the bottom, either Use Long Part (Large Inventory) or Use Long Part (Small Inventory)
	F.Global.General.ReadOption("400861",0,False,"0000",V.Global.bLongPart)
	F.Intrinsic.Control.If(V.Global.bLongPart,=,False)
		F.Global.General.ReadOption("400861",0,False,"0004",V.Global.bLongPart)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.CheckLongPart.End

Program.Sub.LoadDTDVAll.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.iCnt.Declare
	V.Local.iProgress.Declare
	V.Local.sSQL.Declare
	V.Local.sRet.Declare
	V.Local.sJob.Declare
	V.Local.sSuffix.Declare
	V.Local.fEstHrs.Declare
	V.Local.fRemHrs.Declare
	V.Local.fPcsRem.Declare
	V.Local.sDept.Declare
	V.Local.sCurOper.Declare
	V.Local.dCurOperDate.Declare
	V.Local.sNextOper.Declare
	V.Local.sOutside.Declare
	v.Local.sMatlFile.Declare
	v.Local.sLabrFile.Declare
	v.Local.sOutsFile.Declare
	V.Local.dShipDate.Declare
	V.Local.dDateCheck.Declare(Date,01/01/1900)
	v.Local.dFileDate.Declare
	v.Local.sFileDate.Declare
	V.Local.bDictExists.Declare
	V.Global.bLoadData.Set(True)
	
	Gui.FrmMaster.lblProgBarStatus.Caption("Loading data from XML...")

'	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewMatl.xml",v.Local.sMatlFile)
'	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewLabr.xml",v.Local.sLabrFile)
'	f.Intrinsic.String.Concat(v.Caller.LocalGSSTempDir,"\",v.Caller.CompanyCode,"_6271_ViewOuts.xml",v.Local.sOutsFile)
	
	'Long Part
	f.Intrinsic.Control.If(v.Global.bLongPart)
		F.Data.DataTable.AddDisplayPartColumn("dtAll2",0,"PART","DISPLAY_PART")
	f.Intrinsic.Control.Else
		F.Data.DataTable.CopyColumn("dtAll2","PART","DISPLAY_PART")
	f.Intrinsic.Control.EndIf

	'Doc control for part
'	F.Data.DataTable.SetValue("dtAll2",-1,"PrtDocCntrl","DCS-OFF")
	F.Data.DataTable.SetValue("dtAll2",-1,"PrtDocCntrl","X")
'	F.Data.Dictionary.CreateFromSQL("dDCC","con","select DISTINCT rtrim(A.ID) AS Part, 'DCS-ON' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030'")
	F.Data.Dictionary.CreateFromSQL("dDCC","con","select DISTINCT rtrim(A.ID) AS Part, 'O' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030'")
'	F.Data.Dictionary.SetDefaultReturn("dDCC","DCS-OFF")
	F.Data.Dictionary.SetDefaultReturn("dDCC","X")
	F.Data.DataTable.FillFromDictionary("dtAll2","dDCC","PART","PrtDocCntrl")
	F.Data.Dictionary.Close("dDCC")
	
	f.Intrinsic.Control.CallSub(loadgvall)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.LoadDTDVAll.End

Program.Sub.loadTempData.Start
f.Intrinsic.Control.Try
	v.Local.sSql.Declare
	v.Local.x.Declare(long)
	v.Local.sError.Declare
	
	f.Intrinsic.String.Build("SELECT {0} as 'ID', {1} as 'Name' FROM {2} ORDER BY NAME",v.Args.MyColumnId,v.Args.MyColumnName,v.Args.TableName,v.Local.sSql)
	f.Intrinsic.Control.If(v.DataTable.dtTemp.Exists)
		f.Data.DataTable.Close
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtTemp","con",v.Local.ssql,true)
	f.Intrinsic.Control.For(v.Local.x,0,v.DataTable.dtTemp.RowCount--,1)
		f.Intrinsic.Control.If(v.DataTable.dtTemp(v.Local.x).ID!FIELDVALTRIM,<>,"")
			'f.intrinsic.string.concat(v.Global.[v.Args.GlobalString],v.DataTable.dtTemp(v.Local.x).NAME!FIELDVALTRIM,"~",v.DataTable.dtTemp(v.Local.x).ID!FIELDVALTRIM,"*!*",v.global.[v.Args.GlobalString])
			f.intrinsic.string.concat(v.Global.[v.Args.GlobalString],v.DataTable.dtTemp(v.Local.x).ID!FIELDVALTRIM,"*!*",v.global.[v.Args.GlobalString])
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.x)
	f.Data.DataTable.Close("dtTemp")
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.loadTempData.End

Program.Sub.setColumnPropertiesOper.Start
f.Intrinsic.Control.Try
	v.Local.iCnt.Declare
	v.Local.lCol.Declare
	v.Local.sError.Declare
	
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","WOExists","Visible","false")
		
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","MyRowID","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SEQ","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","NAME_CUSTOMER","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","JOB","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SUFFIX","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","FLAG_HOLD","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PRIORITY","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","NAME_CUSTOMER","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SALESPERSON","Visible",False)
'	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUSTOMER_PO","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","LOCATION","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PRODUCT_LINE","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","DATE_OPENED","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","DATE_START","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SCHEDULED_DUE_DATE","Visible",False)
	'Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","EST_HRS","Visible",False)
	'Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","ACT_HRS","Visible",False)
	'Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","REM_HRS","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","TOT_HRS_REM","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","DEPT","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUR_OPER_DATE","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","OUTSIDE","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SHIP_TO_OP","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","WO_NOTE","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","WO_NOTE2","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PROJECT","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PHASE","Visible",False)
'	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SALES_ORDER","Visible",False)
'	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SALES_ORDER_LINE","Visible",False)
'	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CODESORT","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CODESORT2","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SOUser_3","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SOUser_4","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SOUser_5","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SONotes","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_MATERIAL","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_LABOR","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_OVERHEAD","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_PRICE_PER_UNIT","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","OUTS","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","FREIGHT","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","OTHER","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","JOBSTATUS","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PRICE_EXT","Visible",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","TOTALCOST","vISIBLE",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PCS_REM","VISIBLE",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PCS_REM1","vISIBLE",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","DATE_DUE_FLOAT","vISIBLE",False)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","DATE_DUE_NO_FLOAT","vISIBLE",False)
	
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SEQRES","HEADERFONTBOLD",True)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SEQRES","Caption","WC")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SEQ","HEADERFONTBOLD",True)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SEQ","Caption","Sequence")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","SEQ","HeaderHAlignment","Center")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","EST_HRS","Caption","Op Est.")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","ACT_HRS","Caption","Op Act.")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","REM_HRS","Caption","Op Rem.")
	
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUSTOMER_PO","HeaderFontBold",True)
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUSTOMER_PO","HeaderHAlignment","Center")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUSTOMER_PO","Caption","Customer PO")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUSTOMER_PO","CellHAlignment","Left")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","CUSTOMER_PO","Width","111")
	
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","EST_HRS","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","ACT_HRS","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","REM_HRS","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_MATERIAL","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_LABOR","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_OVERHEAD","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","AMT_PRICE_PER_UNIT","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","OUTS","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","FREIGHT","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","OTHER","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PRICE_EXT","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","TOTALCOST","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PCS_REM","CellHAlignment","Right")
	Gui.FrmMaster.gsgcOper.SetColumnProperty("gvOper","PCS_REM1","CellHAlignment","Right")
	
	'MATERIALS
	Gui.FrmMaster.gsgcOper.AddStyleFormatCondition("gvOper","MATERIALISSUE","ALL","Equal","ALL")
	Gui.FrmMaster.gsgcOper.SetStyleFormatConditionProperty("gvOper","MATERIALISSUE","ALL","BackColor","LightGreen")
	
	Gui.FrmMaster.gsgcOper.AddStyleFormatCondition("gvOper","MATERIALISSUE","SOME","Equal","SOME")
	Gui.FrmMaster.gsgcOper.SetStyleFormatConditionProperty("gvOper","MATERIALISSUE","SOME","BackColor","Orange")
	
	Gui.FrmMaster.gsgcOper.AddStyleFormatCondition("gvOper","MATERIALISSUE","NONE","Equal","NONE")
	Gui.FrmMaster.gsgcOper.SetStyleFormatConditionProperty("gvOper","MATERIALISSUE","NONE","BackColor","Red")
	
	'Days Late
	Gui.FrmMaster.gsgcOper.AddStyleFormatCondition("gvOper","DAYS_LATE","DAYS_LATE1","Less",0)
	Gui.FrmMaster.gsgcOper.SetStyleFormatConditionProperty("gvOper","DAYS_LATE","DAYS_LATE1","ForeColor","Red")
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(FrmMaster_UnLoad)
f.Intrinsic.Control.EndTry
Program.Sub.setColumnPropertiesOper.End

Program.Sub.SetColumnProperties.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.iCnt.Declare
	v.Local.lCol.Declare
	v.Local.lret.Declare
	V.Local.sGabFile.Declare
	v.Local.sRet.Declare
	v.Local.sSelect.Declare
	v.Local.iCnt2.Declare
	V.Local.sExpression.Declare

	Gui.FrmMaster.[v.args.Grid].SetGridViewProperty(v.args.GridView,"MultiSelect",True)
	Gui.FrmMaster.[V.Args.Grid].SetGridViewProperty(v.args.gridview,"AllowSort",True)
	Gui.FrmMaster.[V.Args.Grid].SetGridViewProperty(v.args.gridview,"AllowFilter",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsDetailShowDetailTabs",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsViewShowGroupPanel",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsViewColumnAutoWidth",False)
	
	''''''''''''
	'MASTER
	''''''''''''
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JS","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JS","Visible",False)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MyRowID","Visible",False)
	
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MyRowID","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","Caption","Inv UM")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","MinWidth","25")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","HeaderFontBold",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","Caption","Est. Material Cost")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","MinWidth","120")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","CellHAlignment","Right")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","HeaderFontBold",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_AMT_MATERIAL","DisplayCustomNumeric","$###,###,##0.00")
		Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"EST_AMT_MATERIAL","EST_AMT_MATERIAL","Sum","","","n")
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","Caption","Est. Total Cost")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","AllowEdit",False)	
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","MinWidth","120")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","CellHAlignment","Right")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","HeaderFontBold",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_TOTALCOST","DisplayCustomNumeric","$###,###,##0.00")
		Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"EST_TOTALCOST","EST_TOTALCOST","Sum","","","n")	
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART_CODE_SORT","Caption","Part Code Sort")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART_CODE_SORT","AllowEdit",False)	
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART_CODE_SORT","MinWidth","120")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART_CODE_SORT","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART_CODE_SORT","CellHAlignment","Near")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART_CODE_SORT","HeaderFontBold",True)	
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","Caption","Alt Desc 1")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","AllowEdit",False)	
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","MinWidth","200")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","CellHAlignment","Near")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","HeaderFontBold",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","Caption","Alt Desc 2")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","AllowEdit",False)	
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","MinWidth","200")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","CellHAlignment","Near")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","HeaderFontBold",True)
	f.Intrinsic.Control.EndIf
	
	
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","Caption","Extra Desc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","Width","300")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","HeaderFontBold",True)
		
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"IND_FLAG","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LATE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RowChange","Visible",False)
	
	f.Intrinsic.Control.If(V.Screen.FrmMaster!chkClosed.Value,=,"0")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","Visible",False)
	f.Intrinsic.Control.Else
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","Visible",True)
	f.Intrinsic.Control.EndIf
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","Caption","Select WO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","Caption","Printed")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","Caption","Released")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FLAG_HOLD","Caption","On Hold")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","Caption","Work Order")
	GUI.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","Caption","Terms")
	GUI.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","Caption","SO Date")
	GUI.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","Caption","Part Friendly")
	GUI.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","Caption","Days Late")
	GUI.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","Caption","Date Orig. Due")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","Caption","Job")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","Caption","Suf")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","Caption","Priority")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","Caption","Customer Name")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","Caption","SP")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","Caption","Customer PO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","Caption","Part")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","Caption","Loc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","Caption","PL")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCRIPTION","Caption","Description")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","Caption","Opened Dt")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","Caption","1st Lbr St Dt")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","Caption","WO Closed Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","Caption","WO Due Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","Caption","Sched Due w/Float")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","Caption","Sched Due w/o Float")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","Caption","Sched Due Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","Caption","Est. Hrs.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","Caption","Act. Hrs.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","Caption","Rem. Hrs.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","Caption","Tot Rem. Hrs.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DEPT","Caption","Dept.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","Caption","Cur. Op. Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","Caption","Current Op.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NEXT_OPER","Caption","Next Op.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTSIDE","Caption","Outside Process")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","Caption","Ship To Op")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"QTY_ORDER","Caption","Order Qty")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM1","Caption","Pcs Rem")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","Caption","Notes")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","Caption","User Field 6 (70 Characters)")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","Caption","Project")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","Caption","Phase")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","Caption","Sales Order")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","Caption","Sales Order Line")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","Caption","SO Description (Code Sort)")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT2","Caption","SO Description  2 (Code Sort 2)")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JobSteps","Caption","Job Steps")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","Caption","Materials")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTATUS","Caption","Status")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Printed","Caption","Print")
	f.ODBC.Connection!con.executeandreturn("select LABEL from OE_USER_FLDS_LN WHERE KEY_ID='03'",v.Local.sret)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_3","Caption",v.Local.sRet.Trim)
	f.ODBC.Connection!con.executeandreturn("select LABEL from OE_USER_FLDS_LN WHERE KEY_ID='04'",v.Local.sret)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","Caption",v.Local.sRet.Trim)
	f.ODBC.Connection!con.executeandreturn("select LABEL from OE_USER_FLDS_LN WHERE KEY_ID='05'",v.Local.sret)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","Caption",v.Local.sRet.Trim)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","Caption","SO Notes")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Caption","Part Doc Cntrl")
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","Caption","Act. Material Cost")
	f.Intrinsic.Control.Else
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","Caption","Material Cost")
	f.Intrinsic.Control.EndIf
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","Caption","Labour Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","Caption","Overhead Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_PRICE_PER_UNIT","Caption","Price/Unit")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","Caption","Outside Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","Caption","Freight Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","Caption","Other Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","Caption","Extended Sell")
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","Caption","Act. Total Cost")
	f.Intrinsic.Control.Else
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","Caption","Total Cost")
	f.Intrinsic.Control.EndIf
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FLAG_HOLD","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCRIPTION","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DEPT","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NEXT_OPER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTSIDE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"QTY_ORDER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM1","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT2","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTEPS","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Printed","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTATUS","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","AllowEdit",False)

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT2","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JS","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"IND_FLAG","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LATE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUSER_3","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUSER_4","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUSER_5","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ROWCHANGE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_PRICE_PER_UNIT","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DAYS_LATE_NO_FLOAT","Visible",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCRIPTION","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTEPS","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Printed","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTATUS","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","ReadOnly",True)

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","MinWidth","55")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","MinWidth","65")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FLAG_HOLD","MinWidth","55")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","MinWidth","30")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","MinWidth","180")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","MinWidth","30")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","MinWidth","111")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","Width","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","MinWidth","30")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","MinWidth","30")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCRIPTION","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","MinWidth","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","MinWidth","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","MinWidth","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","MinWidth","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","MinWidth","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","MinWidth","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","MinWidth","105")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DEPT","MinWidth","60")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","MinWidth","85")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","MinWidth","85")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NEXT_OPER","MinWidth","60")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTSIDE","MinWidth","105")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","MinWidth","70")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"QTY_ORDER","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM1","MinWidth","60")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","MinWidth","40")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","MinWidth","40")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","MinWidth","135")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT2","MinWidth","135")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","MinWidth","55")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTEPS","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_Material","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","MinWidth","85")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","MinWidth","85")

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FLAG_HOLD","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCRIPTION","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DEPT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NEXT_OPER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTSIDE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"QTY_ORDER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM1","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT2","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_3","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTATUS","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_PRICE_PER_UNIT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_Material","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","HeaderHAlignment","Center")

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FLAG_HOLD","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DEPT","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"QTY_ORDER","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTATUS","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_PRICE_PER_UNIT","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_Material","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","CellHAlignment","Right")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FLAG_HOLD","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOB","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SUFFIX","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRIORITY","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALESPERSON","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRODUCT_LINE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCRIPTION","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DEPT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NEXT_OPER","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTSIDE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"QTY_ORDER","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCS_REM1","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PROJECT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PHASE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT2","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTEPS","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_3","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DAYS_LATE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBSTATUS","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_PRICE_PER_UNIT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODate","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOTerms","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","HeaderFontBold",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","CellBackColor","LightYellow")
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","CellBackColor","LightYellow")
	f.Intrinsic.Control.EndIf
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_NOTE2","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_4","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SOUser_5","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SONotes","CellForeColor","Blue")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","CellForeColor","Blue")
	
	f.Intrinsic.Control.If(v.Global.bViewWO,=,True,or,v.Global.bEditWO,=,True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","CellForeColor","Blue")
	f.Intrinsic.Control.ElseIf(v.Global.bIssue,=,True,or,v.Global.bWipToFG,=,True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","CellForeColor","Blue")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Global.bViewPart,=,True,or,v.Global.bEditPart,=,True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","CellForeColor","Blue")
	f.Intrinsic.Control.EndIf	

	F.Intrinsic.String.Build("{0}\PPT_Repl_Upd_Resched_Utility.g2u",V.Caller.GasDir,V.Local.sGabFile)
	F.Intrinsic.File.Exists(V.Local.sGabFile,V.Global.bExists)
	F.Intrinsic.Control.If(V.Global.bExists)
	f.Intrinsic.Control.AndIf(v.Global.bReplUpdReschedUtility)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","CellForeColor","Blue")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NEXT_OPER","CellForeColor","Blue")
	F.Intrinsic.Control.EndIf

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRINTED","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RELEASED","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"JOBStatus","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALISSUE","Fixed","Left")
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCOPER")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SEQ","Fixed","Left")
	f.Intrinsic.Control.EndIf

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"EST_HRS","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ACT_HRS","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"REM_HRS","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOT_HRS_REM","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","DisplayCustomNumeric","$###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","DisplayCustomNumeric","$###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PRICE_EXT","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TOTALCOST","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_MATERIAL","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_LABOR","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OUTS","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"FREIGHT","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OTHER","DisplayCustomNumeric","###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_OVERHEAD","DisplayCustomNumeric","###,###,##0.00")

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_FLOAT","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_NO_FLOAT","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_OPENED","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_START","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_CLOSED","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SODATE","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SCHEDULED_DUE_DATE","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER_DATE","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SHIP_TO_OP","DisplayCustomDatetime","d")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_ORIG_DUE","DisplayCustomDatetime","d")
	
	
	F.Intrinsic.Control.If(V.Global.bLongPart)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DISPLAY_PART","MinWidth","250")
	F.Intrinsic.Control.EndIf
	
	'MATERIALS
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","ALL","Equal","ALL")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","ALL","BackColor","LightGreen")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","ALL","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","N/A","Equal","N/A")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","N/A","BackColor","LightBlue")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","N/A","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","SOME","Equal","SOME")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","SOME","BackColor","Orange")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","SOME","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","NONE","Equal","NONE")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","NONE","BackColor","Red")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","NONE","ForeColor","Black")

	'Job Status
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"JOBSTATUS","ATTENTION","Equal","ATTENTION")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"JOBSTATUS","ATTENTION","BackColor","Orange")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"JOBSTATUS","ATTENTION","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"JOBSTATUS","ISSUE","Equal","ISSUE")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"JOBSTATUS","ISSUE","BackColor","Red")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"JOBSTATUS","ISSUE","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"JOBSTATUS","OKAY","Equal","OKAY")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"JOBSTATUS","OKAY","BackColor","LightGreen")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"JOBSTATUS","OKAY","ForeColor","Black")
	
	'Days Late
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"DAYS_LATE","DAYS_LATE1","Less",0)
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"DAYS_LATE","DAYS_LATE1","ForeColor","Red")
	
	'Time Remaining
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
		Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"REM_HRS","REM_HRS1","Less",0)
		Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"REM_HRS","REM_HRS1","ForeColor","Red")
	f.Intrinsic.Control.EndIf
	
	'Part Document Control
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","HeaderFontBold",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Icon","DCS-OFF")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Caption","Part Doc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","MinWidth","25")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Width","25")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Visible",True)
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"PrtDocCntrl","PrtDocCntrl1","Equal","O")
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"PrtDocCntrl","PrtDocCntrl2","Equal","X")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"PrtDocCntrl","PrtDocCntrl1","ForeColor","YellowGreen")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"PrtDocCntrl","PrtDocCntrl2","ForeColor","Red")
	
	'WO DUE
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"SCHEDULED_DUE_DATE","SCHEDULED_DUE_DATE_1","Expression","[DATE_DUE] < [SCHEDULED_DUE_DATE]")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"SCHEDULED_DUE_DATE","SCHEDULED_DUE_DATE_1","ForeColor","Red")
	
	f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
		'Est Hours vs Act Hours
		Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"ACT_HRS","ACT_HRS_1","Expression","[EST_HRS] < [ACT_HRS]")
		Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"ACT_HRS","ACT_HRS_1","ForeColor","Red")
		
		'Est Material Cost vs Act Material Cost
		Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"AMT_MATERIAL","AMT_MATERIAL_1","Expression","[EST_AMT_MATERIAL] < [AMT_MATERIAL]")
		Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"AMT_MATERIAL","AMT_MATERIAL_1","ForeColor","Red")
		
		'Est Total Cost vs Act Total Cost
		Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"TOTALCOST","TOTALCOST1","Expression","[EST_TOTALCOST] < [TOTALCOST]")
		Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"TOTALCOST","TOTALCOST1","ForeColor","Red")
	f.Intrinsic.Control.EndIf
	
	
'	F.Intrinsic.Control.For(v.Local.iCnt,0,V.DataTable.dtAll2.RowCount--,1)
'		'WO DUE
''		GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"SCHEDULED_DUE_DATE",v.Local.lCol)
'		F.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.iCnt).DATE_DUE!FIELDVAL,<,v.DataTable.dtAll2(v.Local.iCnt).SCHEDULED_DUE_DATE!FIELDVAL)
'			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"SCHEDULED_DUE_DATE",v.Local.lCol)
'			Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"ForeColor","Red")
'			Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Halignment","Center")
'		F.Intrinsic.Control.EndIf
'		
'		f.Intrinsic.Control.If(v.Args.grid.UCase,=,"GSGCALL")
'			'Est Hours vs Act Hours
''			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"ACT_HRS",v.Local.lCol)
'			F.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.iCnt).EST_HRS!FIELDVAL,<,v.DataTable.dtAll2(v.Local.iCnt).ACT_HRS!FIELDVAL)
'				GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"ACT_HRS",v.Local.lCol)
'				Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"BackColor","Red")
'				Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Halignment","Far")
'			F.Intrinsic.Control.EndIf
'			
'			'Est Material Cost vs Act Material Cost
''			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"AMT_MATERIAL",v.Local.lCol)
'			F.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.iCnt).EST_AMT_MATERIAL!FIELDVAL,<,v.DataTable.dtAll2(v.Local.iCnt).AMT_MATERIAL!FIELDVAL)
'				GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"AMT_MATERIAL",v.Local.lCol)
'				Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"BackColor","Red")
'				Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Halignment","Far")
'			F.Intrinsic.Control.EndIf
'			
'			'Est Total Cost vs Act Total Cost
''			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"TOTALCOST",v.Local.lCol)
'			F.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.iCnt).EST_TOTALCOST!FIELDVAL,<,v.DataTable.dtAll2(v.Local.iCnt).TOTALCOST!FIELDVAL)
'				GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"TOTALCOST",v.Local.lCol)
'				Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"BackColor","Red")
'				Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Halignment","Far")
'			F.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf
'				
'		'DCS-ON
'		F.Intrinsic.Control.If(v.DataTable.dtAll2(v.Local.iCnt).PrtDocCntrl!FIELDVALTRIM,=,"DCS-ON")
'			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"PrtDocCntrl",v.Local.lCol)
'			gui.frmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Icon","DCS-ON")
'		F.Intrinsic.Control.EndIf
'		
'	F.Intrinsic.Control.Next(v.Local.iCnt)
	
'	'Part Document Control
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","CellHAlignment","Center")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","HeaderFontBold",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Icon","DCS-OFF")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","AllowEdit",False)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Caption","Part Doc")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","ReadOnly",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","MinWidth","25")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Width","25")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Visible",True)
'	F.Data.DataTable.Select("dtAll2","PrtDocCntrl = 'DCS-ON'",V.Local.sSelect)
'	F.Intrinsic.Control.If(V.Local.sSelect.IsNotNoReturn)
'		F.Intrinsic.String.Split(V.Local.sSelect,"*!*",V.Local.sSelect)
'		F.Intrinsic.Control.For(V.Local.iCnt2,0,V.Local.sSelect.UBound,1)
'			gui.frmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"PrtDocCntrl",v.Local.lret)
'			gui.frmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lret,V.Local.sSelect(V.Local.iCnt2),"Icon","DCS-ON")
'		F.Intrinsic.Control.Next(V.Local.iCnt2)
'	F.Intrinsic.Control.EndIf
	
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"EST_HRS","SUM_EST_HRS","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"ACT_HRS","SUM_ACT_HRS","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"REM_HRS","SUM_REM_HRS","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"TOT_HRS_REM","SUM_TOT_HRS_REM","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"AMT_MATERIAL","AMT_MATERIAL","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"AMT_LABOR","AMT_LABOR","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"AMT_OVERHEAD","AMT_OVERHEAD","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"AMT_PRICE_PER_UNIT","AMT_PRICE_PER_UNIT","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"OUTS","OUTS","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"FREIGHT","FREIGHT","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"OTHER","OTHER","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"PRICE_EXT","PRICE_EXT","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"TOTALCOST","TOTALCOST","Sum","","","n")
	GUI.FrmMaster.[V.Args.Grid].AddgridGroupSummaryItem(v.Args.gridview,"EST_HRS","EST_HRS","SUM","| Est Hours: ","   ","n2")
	GUI.FrmMaster.[V.Args.Grid].AddgridGroupSummaryItem(v.Args.gridview,"ACT_HRS","ACT_HRS","SUM","| Act Hours: ","   ","n2")
	GUI.FrmMaster.[V.Args.Grid].AddgridGroupSummaryItem(v.Args.gridview,"REM_HRS","REM_HRS","SUM","| Rem Hours: ","   ","n2")

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.SetColumnProperties.End

Program.Sub.SetColumnPropertiesAllMO.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.iCnt.Declare
	v.Local.lCol.Declare
	V.Local.sSelect.Declare
	v.Local.icnt2.Declare
	v.Local.lRet.Declare
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WOExists","Visible","false")
		
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionBehaviorEditable",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowSort",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowFilter",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsDetailShowDetailTabs",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsViewShowGroupPanel",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsViewColumnAutoWidth",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsViewRowAutoHeight",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"ColumnPanelRowHeight",100)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","Caption","Quote Search")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorQuoteSearch","Icon","BROWSE")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","Caption","Inv UM")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","MinWidth","25")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","AllowEdit",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","Caption","PO Cost in Vendor Curr")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","Width","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","CellHAlignment","Far")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PO_COST","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PO_COST","DisplayCustomNumeric","$#,###,###,##0.000000")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","Caption","Purch Conv Factor")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PUR_CNV_FACTOR","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","DisplayCustomNumeric","0.00000")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","Caption","Purch Qty in Purch UM")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","Width","125")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PUR_QTY","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","DisplayCustomNumeric","#,###,###,##0.00")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","Caption","Mfg Part")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","MinWidth","180")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","AllowEdit",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","Caption","Mfg Name")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","MinWidth","180")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","HeaderFontBold",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","AllowEdit",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Vendor","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SELECTWO","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Vendor","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Sales_Order","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Sales_Order","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Cost","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Cost","AllowEdit",True)
	
	F.Intrinsic.Control.If(V.Global.bCreatePO,=,True,"OR",V.Global.bEditPO,=,True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Text","ReadOnly",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Text","AllowEdit",True)
	F.Intrinsic.Control.Else
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Text","ReadOnly",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Text","AllowEdit",False)
	F.Intrinsic.Control.EndIf

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURUM","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURUM","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODE_SOURCE","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODE_SOURCE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MatDisplayPart","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MatDisplayPart","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorSearch","Readonly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorSearch","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUR_OPER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MaterialIssue","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MaterialIssue","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_Label","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CODESORT","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VENDORNAME","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VENDORNAME","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LINE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LINE","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LINEDUE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LINEDUE","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartFriendly","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LOCATION","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Suffix","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Suffix","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SEQ","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SEQ","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCR","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DESCR","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURCHASE_ORDER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURCHASE_ORDER","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_LINE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"DATE_DUE_LINE","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PL","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PL","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_ALT_COST","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"AMT_ALT_COST","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER_PO","AllowEdit",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Vendor","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Sales_Order","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Cost","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"Text","CellBackColor","LightYellow")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCSREMAIN","CellBackColor","LightBlue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_QTY","CellBackColor","LightBlue")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SelectWO","Caption","Select WO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURUM","Caption","Purch. UM")
'	F.Intrinsic.Control.If(V.Args.Grid.UCase,=,"GSGCALLM")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatDisplayPart","Caption","Material")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART","Caption","Material Part")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","Caption","Customer")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","HeaderHAlignment","Center")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","MinWidth","100")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","HEADERFONTBOLD","True")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER","AllowEdit",False)
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER","ReadOnly",True)
'		
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","Caption","Customer Name")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","HeaderHAlignment","Center")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","MinWidth","250")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","HEADERFONTBOLD","True")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","AllowEdit",False)
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","ReadOnly",True)
'	F.Intrinsic.Control.Else
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatDisplayPart","Caption","Outside Process")
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART","Caption","Process")
'	F.Intrinsic.Control.EndIf
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatDisplayPart","Caption","Material")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART","Caption","Material Part")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","Caption","Customer")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"CUSTOMER","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","Caption","Customer Name")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","MinWidth","250")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_CUSTOMER","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"NAME_CUSTOMER","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Cost","Caption","Cost in Vendor Curr & Purch UM")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Extension","Caption","Extension in Vendor Curr & Purch UM")
	F.Intrinsic.Control.If(V.Args.Grid.UCase,=,"GSGCALLO")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatDisplayPart","Caption","Outside Process")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART","Caption","Process")
	F.Intrinsic.Control.EndIf
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PrtDocCntrl","Caption","Part Doc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","Caption","WO Due Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUR_OPER","Caption","Current Op.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialIssue","Caption","Materials")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Caption","Work Order")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER","Caption","Sales Order")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER_LINE","Caption","Sales Order Line")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODESORT","Caption","SO Description (Sort Code 1)")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDORNAME","Caption","Vendor Name")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","Caption","PO Line")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINEDUE","Caption","WO Mat. Due")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartFriendly","Caption","Part Friendly")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","Caption","Loc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Suffix","Caption","Suffix")	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","Caption","Seq")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","Caption","Part")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","Caption","Description")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","Caption","Vendor")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","Caption","PO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","Caption","PO Due Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","Caption","Inv. Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","Caption","Qty. Reqd")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","Caption","Qty. Issued")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","Caption","Qty. Rem.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","Caption","On Hand")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PL","Caption","PL")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_ALT_COST","Caption","Alt Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SOURCE","Caption","Source Code")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorSearch","Caption","Vendor Search")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Text","Caption","PO Line Text")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorCurrency","Caption","Currency")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER_PO","Caption","Customer PO")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Cost","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Extension","HeaderWordWrap","Wrap")

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PART","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Cost","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Extension","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SelectWO","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PrtDocCntrl","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUR_OPER","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialIssue","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER_LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODESORT","CellHAlignment","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDORNAME","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINEDUE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartFriendly","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Suffix","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PL","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURUM","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_ALT_COST","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SOURCE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorCurrency","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER_PO","CellHAlignment","Left")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Cost","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Extension","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","HeaderHAlignment","Center")
	gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATDISPLAYPART","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURUM","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_ALT_COST","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SOURCE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SelectWO","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PrtDocCntrl","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUR_OPER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialIssue","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER_LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODESORT","HeaderHAlignment","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDORNAME","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINEDUE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartFriendly","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Suffix","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PL","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURUM","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TEXT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorCurrency","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER_PO","HeaderHAlignment","Center")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SelectWO","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PrtDocCntrl","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUR_OPER","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialIssue","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Fixed","Left")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SelectWO","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PrtDocCntrl","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURUM","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUR_OPER","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialIssue","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER_LINE","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODESORT","MinWidth","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDORNAME","MinWidth","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","MinWidth","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINEDUE","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartFriendly","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Suffix","MinWidth","75")	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","MinWidth","25")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Cost","MinWidth","125")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_ALT_COST","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Extension","MinWidth","125")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Part","MinWidth","95")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatPart","MinWidth","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatDisplayPart","Width","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PL","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SOURCE","MinWidth","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TEXT","MinWidth","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TEXT","Width","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorCurrency","Width","50")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER_PO","Width","111")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SelectWO","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PrtDocCntrl","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUR_OPER","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialIssue","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatPart","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SALES_ORDER_LINE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODESORT","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDORNAME","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINEDUE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartFriendly","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Suffix","HEADERFONTBOLD","True")	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_ALT_COST","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Cost","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURUM","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SOURCE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorSearch","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Text","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorCurrency","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CUSTOMER_PO","HEADERFONTBOLD","True")

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Extension","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MatDisplayPart","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PL","HEADERFONTBOLD","True")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartFriendly","Visible","false")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","Visible","false")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Suffix","Visible","false")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PL","Visible","false")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"Burden","Visible","false")
	F.Intrinsic.Control.If(V.Args.Grid.UCase,=,"GSGCALLM")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PartVendor","Visible","false")
	F.Intrinsic.Control.EndIf
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VendorQuoteSeq","Visible","false")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WOExists","Visible","false")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VendorSearch","Icon","BROWSE")
	
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","CellForeColor","Blue")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","CellFontUnderline",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","CellFontUnderline",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATDISPLAYPART","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","CellForeColor","Blue")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","CellForeColor","Blue")

	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SALES_ORDER_LINE","CellForeColor","Blue")
	
	F.Intrinsic.Control.If(V.Args.Grid.UCase,=,"GSGCALLM")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATDISPLAYPART","CellForeColor","Blue")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATDISPLAYPART","CellFontUnderline",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","CellForeColor","Blue")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","CellFontUnderline",True)
	F.Intrinsic.Control.Else
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATDISPLAYPART","CellForeColor","Black")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATDISPLAYPART","CellFontUnderline",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","CellForeColor","Black")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","CellFontUnderline",False)
	F.Intrinsic.Control.EndIf
	
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PCSREMAIN","DisplayCustomNumeric","#,###,###,##0.0000")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","DisplayCustomNumeric","$#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_ALT_COST","DisplayCustomNumeric","$#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COST","DisplayCustomNumeric","$#,###,###,##0.000000")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EXTENSION","DisplayCustomNumeric","$#,###,###,##0.000000")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","DisplayCustomNumeric","#,###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COST","DisplayCustomNumeric","#,###,###,##0.00")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EXTENSION","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","DisplayCustomDatetime","d")	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINEDUE","DisplayCustomDatetime","d")		
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE","DisplayCustomDatetime","d")	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JS","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JSS","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JOB","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DISPLAY_PART","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MyRowID","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JobStatus","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","Caption","Seq ")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION","Caption","Loc")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","Caption","Extra Desc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","Width","300")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INV_EXTRA_TEXT","HeaderFontBold",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART_CODE_SORT","Caption","Material Part Code Sort")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART_CODE_SORT","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART_CODE_SORT","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART_CODE_SORT","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART_CODE_SORT","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATPART_CODE_SORT","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART_CODE_SORT","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART_CODE_SORT","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TRUNCATED_MEAN","Caption","Material Part Usage Truncated Mean")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TRUNCATED_MEAN","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TRUNCATED_MEAN","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TRUNCATED_MEAN","MinWidth","80")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TRUNCATED_MEAN","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TRUNCATED_MEAN","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TRUNCATED_MEAN","DisplayCustomNumeric","#,###,###,##0")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TRUNCATED_MEAN","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TRUNCATED_MEAN","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_CODE","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_CODE","Caption","Last PO Buyer Code")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_CODE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_CODE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_CODE","MinWidth","80")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_CODE","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_CODE","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_CODE","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_CODE","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_NAME","Caption","Last PO Buyer Name")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_NAME","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_NAME","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_NAME","MinWidth","120")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_NAME","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_BUYER_NAME","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_NAME","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_NAME","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR","Caption","Last PO Vendor")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR","MinWidth","80")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_VENDOR","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_VENDOR","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR_NAME","Caption","Last PO Vendor Name")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR_NAME","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR_NAME","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR_NAME","MinWidth","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR_NAME","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LAST_PO_VENDOR_NAME","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_VENDOR_NAME","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_VENDOR_NAME","ReadOnly",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","Caption","Alt Desc 1")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","AllowEdit",False)	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","CellHAlignment","Near")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","HeaderFontBold",True)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","Caption","Alt Desc 2")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","AllowEdit",False)	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","CellHAlignment","Near")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","HeaderFontBold",True)
		
	F.Intrinsic.Control.If(V.Args.Grid.UCase,=,"GSGCALLM")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","Caption","Qty Required S&D")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","CellHAlignment","Right")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","MinWidth","90")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","HeaderWordWrap","Wrap")
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","Caption","Qty OnOrder PO S&D")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","CellHAlignment","Right")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","MinWidth","90")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","HeaderWordWrap","Wrap")
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","Caption","Order Required Date")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","MinWidth","100")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ORDER_REQD_DATE","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ORDER_REQD_DATE","ReadOnly",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_REQD_DATE","DisplayCustomDatetime","d")	
	
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LEAD_TIME","Caption","Lead Time in Days")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LEAD_TIME","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LEAD_TIME","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LEAD_TIME","MinWidth","40")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LEAD_TIME","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LEAD_TIME","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LEAD_TIME","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LEAD_TIME","ReadOnly",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","Caption","Inventory Lead Time in Days")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","MinWidth","40")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATL_LEAD_TIME","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATL_LEAD_TIME","ReadOnly",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MATL_LEAD_TIME","Visible","false")
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","Caption","Vendor Quote Lead Time in Days")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","MinWidth","60")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VEND_QTE_LEAD_TIME","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VEND_QTE_LEAD_TIME","ReadOnly",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_LEAD_TIME","Visible","false")
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","Caption","Vendor Quote Exists")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","MinWidth","30")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VEND_QTE_EXISTS","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VEND_QTE_EXISTS","ReadOnly",True)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VEND_QTE_EXISTS","Visible","false")
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","Caption","Op Code")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","MinWidth","85")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OPCODE","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OPCODE","ReadOnly",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","Caption","Job Seq Comment")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","MinWidth","350")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SEQ_COMMENT","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"SEQ_COMMENT","ReadOnly",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"USER1DEFINED","Caption",v.Global.sInvUser1Define)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"USER1DEFINED","CellHAlignment","Left")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"USER1DEFINED","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"USER1DEFINED","MinWidth","125")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"USER1DEFINED","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"USER1DEFINED","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"USER1DEFINED","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"USER1DEFINED","ReadOnly",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PoExist","Caption","PO Exists")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PoExist","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PoExist","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PoExist","MinWidth","60")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PoExist","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PoExist","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PoExist","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PoExist","ReadOnly",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ROUTER","Caption","Router")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ROUTER","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ROUTER","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ROUTER","MinWidth","100")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ROUTER","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ROUTER","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ROUTER","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ROUTER","ReadOnly",True)
		
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"RouterDescription","Caption","Router Description")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"RouterDescription","CellHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"RouterDescription","HeaderHAlignment","Center")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"RouterDescription","MinWidth","160")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"RouterDescription","HEADERFONTBOLD","True")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"RouterDescription","HeaderWordWrap","Wrap")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RouterDescription","AllowEdit",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RouterDescription","ReadOnly",True)
		
		gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(V.ARGS.gridview,"MaterialManage","TAGNAME1","Equal","In Stock")
		gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(V.ARGS.gridview,"MaterialManage","TAGNAME1","BackColor","LightGreen")
		gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(V.ARGS.gridview,"MaterialManage","TAGNAME2","Equal","On Order")
		gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(V.ARGS.gridview,"MaterialManage","TAGNAME2","BackColor","Orange")
		gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(V.ARGS.gridview,"MaterialManage","TAGNAME3","Equal","Out of Stock")
		gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(V.ARGS.gridview,"MaterialManage","TAGNAME3","BackColor","Red")
	
	F.Intrinsic.Control.ElseIf(V.Args.Grid.UCase,=,"GSGCALLO")
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATERIALMANAGE","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PUR_CNV_FACTOR","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VEND_QTE_EXISTS","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"VEND_QTE_LEAD_TIME","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MATPART_CODE_SORT","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"TRUNCATED_MEAN","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_CODE","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_BUYER_NAME","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_VENDOR","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"LAST_PO_VENDOR_NAME","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_1","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ALT_DESC_2","Visible",False)
'		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartWoTrim","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgName","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MfgPart","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"OutsideServicePart","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"HeaderPart","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartVendorOutsideService","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"ROUTER","Visible",False)
		Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"RouterDescription","Visible",False)
	F.Intrinsic.Control.EndIf
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PartWoTrim","Visible",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_6271_NOTES","Caption","Notes")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_6271_NOTES","CellHAlignment","Near")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_6271_NOTES","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_6271_NOTES","MinWidth","200")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_6271_NOTES","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_6271_NOTES","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_6271_NOTES","AllowEdit",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_6271_NOTES","ReadOnly",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_6271_NOTES","CellBackColor","LightYellow")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"WO_6271_NOTES","CellForeColor","Blue")
		
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialManage","Caption","Mat. Status")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialManage","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialManage","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialManage","MinWidth","100")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialManage","HEADERFONTBOLD","True")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"MaterialManage","HeaderWordWrap","Wrap")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MaterialManage","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MaterialManage","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"MaterialManage","Fixed","Left")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TEXT","CellWordWrap","Wrap")
	
	'MATERIALS
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","ALL","Equal","ALL")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","ALL","BackColor","LightGreen")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","ALL","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","N/A","Equal","N/A")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","N/A","BackColor","LightBlue")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","N/A","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","SOME","Equal","SOME")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","SOME","BackColor","Orange")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","SOME","ForeColor","Black")
	
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"MATERIALISSUE","NONE","Equal","NONE")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","NONE","BackColor","Red")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"MATERIALISSUE","NONE","ForeColor","Black")
	
	'Qty Reqd
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"PCSTOPROD","PCSTOPROD1","Less",0)
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"PCSTOPROD","PCSTOPROD1","ForeColor","Red")
	
	'Part Document Control
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","HeaderFontBold",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Icon","DCS-ON")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","AllowEdit",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Caption","Part Doc")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","MinWidth","25")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Width","25")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Visible",True)

	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"PrtDocCntrl","PrtDocCntrl1","Equal","O")
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"PrtDocCntrl","PrtDocCntrl2","Equal","X")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"PrtDocCntrl","PrtDocCntrl1","ForeColor","YellowGreen")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"PrtDocCntrl","PrtDocCntrl2","ForeColor","Red")
	
'	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataView.[V.Args.DT]![V.Args.DV].RowCount--,1)
'		'PO Locking
''		GUI.FrmMaster.[V.Args.GRID].GetColumnIndexByName(V.Args.GRIDVIEW,"VENDOR",v.Local.lCol)
'		f.Intrinsic.Control.If(v.DataTable.[V.Args.DT](v.Local.icnt).PURCHASE_ORDER!FIELDVALTRIM,<>,"")
'			GUI.FrmMaster.[V.Args.GRID].GetColumnIndexByName(V.Args.GRIDVIEW,"VENDOR",v.Local.lCol)
'			GUI.FrmMaster.[V.Args.GRID].setcellproperty(V.Args.GRIDVIEW,v.Local.lCol,v.Local.iCnt,"locked",true)
'			GUI.FrmMaster.[V.Args.GRID].GetColumnIndexByName(V.Args.GRIDVIEW,"COST",v.Local.lCol)
'			GUI.FrmMaster.[V.Args.GRID].setcellproperty(V.Args.GRIDVIEW,v.Local.lCol,v.Local.iCnt,"locked",true)
'		f.Intrinsic.Control.EndIf
'		
'		'DCS-ON
'		F.Intrinsic.Control.If(v.DataTable.[V.Args.DT](v.Local.icnt).PrtDocCntrl!FIELDVALTRIM,=,"DCS-ON")
'			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"PrtDocCntrl",v.Local.lCol)
'			gui.frmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Icon","DCS-ON")
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.Next(V.Local.iCnt)
	
'	'Part Document Control
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","CellHAlignment","Center")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","HeaderFontBold",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Icon","DCS-OFF")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","AllowEdit",False)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Caption","Part Doc")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","ReadOnly",True)
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","MinWidth","25")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Width","25")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PrtDocCntrl","Visible",True)
'	F.Data.DataTable.Select("dtAll2","PrtDocCntrl = 'DCS-ON'",V.Local.sSelect)
'	F.Intrinsic.Control.If(V.Local.sSelect.IsNotNoReturn)
'		F.Intrinsic.String.Split(V.Local.sSelect,"*!*",V.Local.sSelect)
'		F.Intrinsic.Control.For(V.Local.iCnt2,0,V.Local.sSelect.UBound,1)
'			gui.frmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"PrtDocCntrl",v.Local.lret)
'			gui.frmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lret,V.Local.sSelect(V.Local.iCnt2),"Icon","DCS-ON")
'		F.Intrinsic.Control.Next(V.Local.iCnt2)
'	F.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.SetColumnPropertiesAllMO.End

Program.Sub.SetColumnPropertiesMatl.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionBehaviorEditable",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowSort",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowFilter",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsDetailShowDetailTabs",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsViewShowGroupPanel",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowColumnMoving",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsViewColumnAutoWidth",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","Caption","Inv UM")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","Width","45")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"INVUM","CellHAlignment","Center")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURUM","Caption","Pur UM")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURUM","Width","45")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURUM","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.gridview,"PURUM","CellHAlignment","Center")
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Caption","Work Order")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","Caption","Part")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","Caption","Description")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","Caption","Vendor")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","Caption","PO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","Caption","PO Line")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","Caption","Due Date")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","Caption","Op Code")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","Caption","Job Seq Comment")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","Caption","Unit Cost")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","Caption","Qty. Reqd")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","Caption","Qty. Issued")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","Caption","Qty. Rem.")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","Caption","On Hand")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","Caption","On Order PO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_WO","Caption","On Order WO")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","Caption","Total Reqd")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ1","Width","60")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","Width","150")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION1","Width","35")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","Width","250")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","Width","65")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","Width","60")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","Width","45")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","Width","70")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","Width","85")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","Width","350")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_WO","Width","75")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","Width","90")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ1","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION1","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","HeaderHAlignment","Near")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","HeaderHAlignment","Center")
	gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_WO","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","HeaderHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ1","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION1","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"VENDOR","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","CellHAlignment","Center")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","CellHAlignment","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSTOPROD","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSCOMPL","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCSREMAIN","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONHAND","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_PO","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_ONORDER_WO","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"QTY_REQUIRED","CellHAlignment","Right")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ1","Fixed","Left")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION1","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","CellFontUnderline",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION1","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER","CellForeColor","Blue")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","DisplayCustomNumeric","$#,###,###,##0.0000")
'	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"AMT_COST","DisplayCustomNumeric","#,###,###,##0.0000")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DATE_DUE_LINE","DisplayCustomDatetime","d")	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JS","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JBSF","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JSS","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JOB1","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SFX1","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PART1","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DISPLAY_PART1","Visible",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ1","Caption","Seq ")
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LOCATION1","Caption","Loc")
	
	f.Intrinsic.Control.If(v.Args.grid,=,"GsGcAll")
		Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"PCSTOPROD","PCSTOPROD1","Less",0)
		Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"PCSTOPROD","PCSTOPROD1","ForeColor","Red")
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.SetColumnPropertiesMatl.End

Program.Sub.SetColumnPropertiesLabr.Start
f.Intrinsic.Control.Try
	V.Local.iCnt.Declare
	v.Local.lCol.Declare
	
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionBehaviorEditable",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowSort",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowFilter",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsDetailShowDetailTabs",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsViewShowGroupPanel",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowColumnMoving",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsViewColumnAutoWidth",False)
	
	Gui.FrmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JS","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JBSF","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JSS","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JOB","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SUFFIX","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OVERLAP","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NOMACH","DisplayCustomNumeric","#,###,###,##0.00")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"FLOAT","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EST_HRS","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ACT_HRS","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"REM_HRS","DisplayCustomNumeric","#,###,###,##0.00")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TotHrsRem","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_QTY","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPL_QTY","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCS_REM","DisplayCustomNumeric","#,###,###,##0.00")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TotHrsRem","DisplayCustomNumeric","#,###,###,##0.00")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Caption","Work Order")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","Caption","Seq")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQRES","Caption","WC")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","Caption","Description")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","Caption","Start Date")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","Caption","Due Date")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","Caption","Compl. Date")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SORT_OPER","Caption","Sort Code")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OVERLAP","Caption","Overlap")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NOMACH","Caption","WC Factor")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","Caption","Op Code")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","Caption","Job Seq Comment")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"FLOAT","Caption","Float")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EST_HRS","Caption","Est. Hrs.")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ACT_HRS","Caption","Act. Hrs.")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"REM_HRS","Caption","Rem. Hrs.")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TotHrsRem","Caption","Tot Hrs. Rem.")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_QTY","Caption","Order Qty.")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPL_QTY","Caption","Comp. Qty.")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCS_REM","Caption","Rem. Qty.")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQRES","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","MinWidth","250")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"CODE_SORT_OPER","MinWidth","100")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OVERLAP","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NOMACH","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","MinWidth","85")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","MinWidth","350")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"FLOAT","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EST_HRS","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ACT_HRS","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"REM_HRS","MinWidth","75")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TotHrsRem","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_QTY","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPL_QTY","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCS_REM","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OVERLAP","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NOMACH","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","HeaderHAlignment","Left")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"FLOAT","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EST_HRS","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ACT_HRS","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"REM_HRS","HeaderHAlignment","Center")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TotHrsRem","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_QTY","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPL_QTY","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCS_REM","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OVERLAP","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NOMACH","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"OPCODE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","CellHAlignment","Left")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"FLOAT","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"EST_HRS","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ACT_HRS","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"REM_HRS","CellHAlignment","Right")
'	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"TotHrsRem","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"ORDER_QTY","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPL_QTY","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PCS_REM","CellHAlignment","Right")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","Fixed","Left")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQRES","CellTrimming","Character")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","DisplayCustomDatetime","d")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","DisplayCustomDatetime","d")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","DisplayCustomDatetime","d")
	
'	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"TotHrsRem","SUM_TotHrsRem","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"ACT_HRS","SUM_ActHrs","Sum","","","n")
	Gui.FrmMaster.[V.ARGS.Grid].AddSummaryItem(v.args.gridview,"EST_HRS","SUM_EstHrs","Sum","","","n")
	
	'Act Hrs
	Gui.FrmMaster.[V.ARGS.Grid].AddStyleFormatCondition(v.args.gridview,"ACT_HRS","ACT_HRS_1","Expression","[EST_HRS] < [ACT_HRS]")
	Gui.FrmMaster.[V.ARGS.Grid].SetStyleFormatConditionProperty(v.args.gridview,"ACT_HRS","ACT_HRS_1","BackColor","Red")
	
'	F.Intrinsic.Control.For(v.Local.iCnt,0,V.DataTable.dtAll2$dtChildLabr.RowCount--,1)
'		'Act Hrs
''		GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"ACT_HRS",v.Local.lCol)
'		F.Intrinsic.Control.If(v.DataTable.dtAll2$dtChildLabr(v.Local.iCnt).EST_HRS!FIELDVAL,<,v.DataTable.dtAll2$dtChildLabr(v.Local.iCnt).ACT_HRS!FIELDVAL)
'			GUI.FrmMaster.[V.ARGS.Grid].GetColumnIndexByName(v.args.gridview,"ACT_HRS",v.Local.lCol)
'			Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"BackColor","Red")
'			Gui.FrmMaster.[V.ARGS.Grid].SetCellAppearance(v.args.gridview,v.Local.lCol,v.Local.iCnt,"Halignment","Far")
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.Next(v.Local.iCnt)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.SetColumnPropertiesLabr.End

Program.Sub.SetColumnPropertiesOuts.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"MultiSelect",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionBehaviorEditable",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionBehaviorEditable",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"ReadOnly",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowSort",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowFilter",True)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsDetailShowDetailTabs",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"OptionsViewShowGroupPanel",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.GridView,"AllowColumnMoving",False)
	Gui.FrmMaster.[V.ARGS.Grid].SetGridViewProperty(v.args.gridview,"OptionsViewColumnAutoWidth",False)
	
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JBSF","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JS","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JSS","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"JOB","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SUFFIX","Visible",False)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"WO_Label","Caption","Work Order")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","Caption","Seq")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_VENDOR","Caption","Vend. Name")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","Caption","Description")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","Caption","Start Date")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","Caption","Due Date")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","Caption","Comp. Date")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER2","Caption","PO")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE2","Caption","PO Line")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","Caption","Job Seq Comment")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","MinWidth","75")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"NAME_VENDOR","MinWidth","250")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DESCR","MinWidth","250")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","MinWidth","100")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","MinWidth","100")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","MinWidth","100")	
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER2","MinWidth","100")	
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE2","MinWidth","100")	
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","MinWidth","350")	
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER2","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE2","HeaderHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","HeaderHAlignment","Left")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER2","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"LINE2","CellHAlignment","Center")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ_COMMENT","CellHAlignment","Left")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER2","CellFontUnderline",True)
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"PURCHASE_ORDER2","CellForeColor","Blue")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"SEQ","Fixed","Left")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"STARTDATE","DisplayCustomDatetime","d")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"DUEDATE","DisplayCustomDatetime","d")
	Gui.frmMaster.[V.ARGS.Grid].SetColumnProperty(v.args.GridView,"COMPLDATE","DisplayCustomDatetime","d")
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.SetColumnPropertiesOuts.End

Program.Sub.LoadGVAll.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.iCnt.Declare
	v.Local.lCol.Declare
	v.Local.lret.Declare
	V.Local.sGabFile.Declare
	v.Local.sRet.Declare
	v.Local.sSelect.Declare
	v.Local.iCnt2.Declare
	
	gui.FrmMaster.prgBar.Value(41)
	Gui.FrmMaster.lblProgBarStatus.Caption("Formatting GridView...")
		
	Gui.FrmMaster.GsGCAll.SuspendLayout()
'	gui.FrmMaster.GsGCLate.SuspendLayout()
	gui.FrmMaster.gsgcOper.SuspendLayout()
	
	'Do the databinding
	gui.FrmMaster.GsGCAll.DataSource("dtall2")
'	gui.FrmMaster.GsGCLate.DataSource("dtAll2","dvLate")
	gui.FrmMaster.gsgcOper.DataSource("dtOper","dvOper")
	gui.FrmMaster.gsgcAllM.DataSource("dtAllM","dvAllM")
	gui.FrmMaster.gsgcAllO.DataSource("dtAllO","dvAllO")

	'''''''''''''
	'MASTER DATA
	'''''''''''''
	'Add Gridview
	Gui.FrmMaster.GsGCAll.AddGridViewFromDataTable("gvall","dtAll2")
'	gui.FrmMaster.GsGCLate.AddGridviewFromDataview("gvLate","dtAll2","dvLate")
	gui.FrmMaster.gsgcOper.AddGridviewFromDataview("gvOper","dtOper","dvOper")
	gui.FrmMaster.gsgcAllM.AddGridviewFromDataview("gvAllM","dtAllM","dvAllM")
	gui.FrmMaster.gsgcAllO.AddGridviewFromDataview("gvAllO","dtAllO","dvAllO")
	gui.FrmMaster.gsgcOper.setgridviewproperty("gvOper","showdetailtabs",true)
'	f.Intrinsic.Control.CallSub(SetColumnProperties,"Grid","gsgcLate","GridView","gvLate")
	f.Intrinsic.Control.CallSub(SetColumnProperties,"Grid","GsGcAll","GridView","gvAll")
	f.Intrinsic.Control.CallSub(SetColumnProperties,"Grid","gsgcOper","GridView","gvOper")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesOper,"Grid","gsgcOper","GridView","gvOper")
	
	'''''''''''''
	'ALL MATERIAL
	'''''''''''''
	'Master
	GuI.FrmMaster.GsGCAll.AddGridViewFromDataView("gvMatl","dtAll2","dvMatl")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesAllMO,"Grid","GsGcAllM","GridView","gvAllM","dt","dtAllM","dv","dvAllM")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesAllMO,"Grid","GsGcAllO","GridView","gvAllO","dt","dtAllO","dv","dvAllO")
	
	f.Intrinsic.Control.CallSub(SetColumnPropertiesMatl,"Grid","GsGcAll","GridView","gvMatl")	
	'Late Jobs
'	GuI.FrmMaster.GsGCLate.AddGridViewFromDataView("gvMatl","dtAll2","dvMatl")
'	f.Intrinsic.Control.CallSub(SetColumnPropertiesMatl,"Grid","gsgcLate","GridView","gvMatl")
	'Operations
	GuI.FrmMaster.gsgcOper.AddGridViewFromDataView("gvMatl","dtAll2","dvMatl")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesMatl,"Grid","gsgcOper","GridView","gvMatl")
	

	'''''''''''''
	'ALL LABOUR
	'''''''''''''
	'Master
	GuI.FrmMaster.GsGCAll.AddGridViewFromDataView("gvLabr","dtAll2","dvLabr")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesLabr,"Grid","GsGcAll","GridView","gvLabr")
	'Late Jobs
'	GuI.FrmMaster.GsGCLate.AddGridViewFromDataView("gvLabr","dtAll2","dvLabr")
'	f.Intrinsic.Control.CallSub(SetColumnPropertiesLabr,"Grid","gsgcLate","GridView","gvLabr")
	'Operations
	GuI.FrmMaster.gsgcOper.AddGridViewFromDataView("gvLabr","dtAll2","dvLabr")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesLabr,"Grid","gsgcOper","GridView","gvLabr")


	''''''''''''
	'ALL OUTSIDE
	''''''''''''
	'Master
	GuI.FrmMaster.GsGCAll.AddGridViewFromDataView("gvOut","dtAll2","dvOuts")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesOuts,"Grid","GsGcAll","GridView","gvOut")
	'Late Jobs
'	GuI.FrmMaster.GsGCLate.AddGridViewFromDataView("gvOut","dtAll2","dvOuts")
'	f.Intrinsic.Control.CallSub(SetColumnPropertiesOuts,"Grid","gsgcLate","GridView","gvOut")
	'Operations
	GuI.FrmMaster.gsgcOper.AddGridViewFromDataView("gvOut","dtAll2","dvOuts")
	f.Intrinsic.Control.CallSub(SetColumnPropertiesOuts,"Grid","gsgcOper","GridView","gvOut")
	
	
	'Hide Column Based on Profile Layout
	f.Intrinsic.Control.If(v.Global.iProfileID,>,0,AND,v.Global.bUserTypeAdministrator,<>,True)
		f.Intrinsic.Control.CallSub("HideColumnProfileLayout")
	f.Intrinsic.Control.EndIf
	
	Gui.FrmMaster.gsgcOper.ResumeLayout()
'	Gui.FrmMaster.GsGCLate.ResumeLayout()
	Gui.FrmMaster.GsGCAll.ResumeLayout()
	'Gui.FrmMaster.GsGCAll.MainView("gvAll")
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.LoadGVAll.End

Program.Sub.gsgcAllO_RowCellClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sret.Declare
	V.Local.sSQL.Declare
	v.Local.sJob.Declare
	v.Local.sSuf.Declare
	v.Local.sWOLabel.Declare
	v.Local.sParams.Declare
	V.Local.sLinkID.Declare
	V.Local.sPart.Declare
	v.local.sPO.Declare
	v.Local.sLoc.Declare
	v.Local.iRet.Declare
	v.Local.iDayTrf.Declare
	v.Local.iMonthTrf.Declare
	v.Local.iYearTrf.Declare
	V.Local.iRefID.Declare
	V.Local.iLinkID.Declare
	V.Local.iPID.Declare
	V.Local.sVendor.Declare
	V.Local.sVendorQuoteSeq.Declare
	v.Local.sSOH.Declare
	v.Local.sSOL.Declare
	v.Local.sPartDesc.Declare
	
	F.Intrinsic.Control.SelectCase(v.Args.Column)
		F.Intrinsic.Control.CaseAny("VendorSearch","VENDORSEARCH")
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PURCHASE_ORDER",V.Args.RowIndex,V.Local.sPO)
			f.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
				v.Global.iVendRow.Set(v.Args.RowIndex)
				gui.FrmMaster.lookupVendorOut.Show
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("VendorQuoteSearch","VENDORQUOTESEARCH")
			'Modified by TDjohan - 06/24/2022 - BEGIN
'			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","MatPart",V.Args.RowIndex,V.Local.sPart)
'			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","VENDOR",V.Args.RowIndex,V.Local.sVendor)
'			F.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
'				F.Intrinsic.Control.If(V.Local.sPart.Trim,<>,"")
'				F.Intrinsic.Control.AndIf(V.Local.sVendor.Trim,<>,"")
'					v.Global.iVendRow.Set(v.Args.RowIndex)
'					
'					'Load Vendor Quote
'					F.Intrinsic.Control.If(V.DataTable.dtVendorQuoteSeq.Exists,=,True)
'						F.Data.DataTable.Close("dtVendorQuoteSeq")
'					F.Intrinsic.Control.EndIf
'					F.Intrinsic.String.Build("select H.PART, H.VENDOR, H.SEQ, H.PART_DESC, H.MFG_PART_NO, H.MFG_NAME, L.QUANTITY, CAST(L.UNIT_PRICE AS NUMERIC(18,6)) AS UNIT_PRICE from V_VEND_QTE_HEADER H LEFT JOIN V_VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ where H.PART = '{0}' and H.VENDOR = '{1}' ORDER BY H.PART, H.VENDOR, H.SEQ, L.LINE",V.Local.sPart.Trim,V.Local.sVendor.Trim,V.Local.sSQL)
'					F.Data.DataTable.CreateFromSQL("dtVendorQuoteSeq","con",V.Local.sSQL)
'					gui.FrmMaster.lookupVendorQuoteOut.DataTableBasis("dtVendorQuoteSeq")
'					gui.FrmMaster.lookupVendorQuoteOut.Show
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.EndIf
			
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PURCHASE_ORDER",V.Args.RowIndex,V.Local.sPO)
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","OutsideServicePart",V.Args.RowIndex,V.Local.sPart)
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","DESCR",V.Args.RowIndex,V.Local.sPartDesc)
			F.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
				F.Intrinsic.Control.If(V.Local.sPart.Trim,<>,"")
					v.Global.iVendRow.Set(v.Args.RowIndex)
					
					'Load Vendor Quote
					F.Intrinsic.Control.If(V.DataTable.dtVendorQuoteSeq.Exists,=,True)
						F.Data.DataTable.Close("dtVendorQuoteSeq")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
						F.Intrinsic.String.Build("select H.PART, H.SEQ, H.PART_DESC, V.NAME_VENDOR, H.LEAD_TIME, L.QUANTITY, CAST(L.UNIT_PRICE AS NUMERIC(18,6)) AS UNIT_PRICE, COALESCE(IF(RTRIM(LTRIM(I.Default_Currency))='','{0}',I.Default_Currency),'{0}') AS VendorCurrency, RTRIM(H.VENDOR) AS 'VENDOR', H.MFG_PART_NO, H.MFG_NAME, H.INV_UM, H.PUR_UM, H.UM_SELECTED, CAST(H.CONVERSION AS NUMERIC(18,6)) AS CONVERSION from V_VEND_QTE_HEADER H LEFT JOIN V_VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ LEFT JOIN V_VENDOR_MASTER V ON V.VENDOR = H.VENDOR LEFT JOIN V_Vendor_Intl I ON V.Vendor = I.Vendor LEFT JOIN V_VENDOR_ADDL T ON T.VENDOR = V.VENDOR where H.PART = '{1}' AND H.PART_DESC = '{2}' AND T.APPROVED_SUPPL = 'Y' ORDER BY H.PART, H.VENDOR, H.SEQ, L.LINE",V.Global.sComCurr,V.Local.sPart.Trim,v.Local.sPartDesc.Trim,V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("select H.PART, H.SEQ, H.PART_DESC, V.NAME_VENDOR, H.LEAD_TIME, L.QUANTITY, CAST(L.UNIT_PRICE AS NUMERIC(18,6)) AS UNIT_PRICE, COALESCE(IF(RTRIM(LTRIM(I.Default_Currency))='','{0}',I.Default_Currency),'{0}') AS VendorCurrency, RTRIM(H.VENDOR) AS 'VENDOR', H.MFG_PART_NO, H.MFG_NAME, H.INV_UM, H.PUR_UM, H.UM_SELECTED, CAST(H.CONVERSION AS NUMERIC(18,6)) AS CONVERSION  from V_VEND_QTE_HEADER H LEFT JOIN V_VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ LEFT JOIN V_VENDOR_MASTER V ON V.VENDOR = H.VENDOR LEFT JOIN V_Vendor_Intl I ON V.Vendor = I.Vendor where H.PART = '{1}' AND H.PART_DESC = '{2}' ORDER BY H.PART, H.VENDOR, H.SEQ, L.LINE",V.Global.sComCurr,V.Local.sPart.Trim,v.Local.sPartDesc.Trim,V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Data.DataTable.CreateFromSQL("dtVendorQuoteSeq","con",V.Local.sSQL)
					gui.FrmMaster.lookupVendorQuoteOut.DataTableBasis("dtVendorQuoteSeq")
					gui.FrmMaster.lookupVendorQuoteOut.Show
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			'Modified by TDjohan - 06/24/2022 - END
			
		F.Intrinsic.Control.Case("PURCHASE_ORDER","Purchase_Order")
			F.Intrinsic.Control.If(V.Args.CellValue.Trim,<>,"")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
				f.Intrinsic.Control.AndIf(v.Global.bEditPO)
					F.Intrinsic.String.Concat("O!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
					F.Global.General.CallWrapperASync(175200,V.Local.sParams)
				f.Intrinsic.Control.Else
					F.Intrinsic.String.Concat("V!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
					F.Global.General.CallWrapperASync(175200,V.Local.sParams)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.caseany("PrtDocCntrl")
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PART",V.Args.RowIndex,V.Local.sPart)
			f.Global.DocumentControl.GetLinkID(v.Local.sPart.Trim,30,v.Local.iRefID)
			f.Intrinsic.Control.If(v.Local.irefid,=,-1)
				F.ODBC.Connection!con.ExecuteAndReturn("SELECT MAX(LINK_ID) AS 'LinkID' FROM LINK_DATA",v.Local.sLinkID)
				f.Intrinsic.Math.ConvertToLong(v.Local.sLinkID,v.Local.iLinkID)
				f.Intrinsic.Math.Add(v.Local.iLinkID,1,v.Local.iLinkID)
				f.Intrinsic.string.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				V.Local.iRefID.Set(v.Local.iLinkID)
				F.Global.DocumentControl.CreateReference(V.Local.sPart,"00030",V.Local.iRefID)
			f.Intrinsic.Control.EndIf
			F.Global.DocumentControl.Invoke(V.Local.sPart,30,"(Inventory Master)",V.Local.iPID)
		
'		F.Intrinsic.Control.CaseAny("MatDisplayPart","MATDISPLAYPART")
'			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","MATPART",V.Args.RowIndex,V.Local.sPart)
'			V.Local.sLoc.Set("")
'			F.Intrinsic.Control.If(V.Local.sPart,<>,"MULTI-PART")
'				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,True)
'					f.Intrinsic.Control.If(v.Global.bViewPart)
'						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
'						Gui.FrmMaster..Enabled(False)
'						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
'						gui.FrmMaster..SetFocus
'						Gui.FrmMaster..Enabled(True)
'					f.Intrinsic.Control.EndIf					
'				F.Intrinsic.Control.Else
'					f.Intrinsic.Control.If(v.Global.bEditPart)
'						F.Intrinsic.String.Build("{0}!*!{1}!*!M",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
'						Gui.FrmMaster..Enabled(False)
'						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
'						gui.FrmMaster..SetFocus
'						Gui.FrmMaster..Enabled(True)
'					f.Intrinsic.Control.Elseif(v.Global.bViewPart)
'						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
'						Gui.FrmMaster..Enabled(False)
'						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
'						gui.FrmMaster..SetFocus
'						Gui.FrmMaster..Enabled(True)
'					f.Intrinsic.Control.EndIf					
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.Else
'				'Load Multi-Part screen
'				f.Intrinsic.Control.If(v.Global.bViewPart)
'					Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","JOB",V.Args.RowIndex,V.Local.sJob)
'					Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'					Gui.FrmMaster..Enabled(False)
'					f.Intrinsic.Control.CallSub(LoadMultiPart,"Job",V.Local.sJob,"Suffix",V.Local.sSuf)
'					Gui.FrmMaster..Enabled(True)
'				f.Intrinsic.Control.EndIf				
'			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("Part","PART")
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PART",V.Args.RowIndex,V.Local.sPart)
			V.Local.sLoc.Set("")
			F.Intrinsic.Control.If(V.Local.sPart,<>,"MULTI-PART")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,True)
					f.Intrinsic.Control.If(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.Global.bEditPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!M",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.Elseif(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'Load Multi-Part screen
				f.Intrinsic.Control.If(v.Global.bViewPart)
					Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","JOB",V.Args.RowIndex,V.Local.sJob)
					Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
					Gui.FrmMaster..Enabled(False)
					f.Intrinsic.Control.CallSub(LoadMultiPart,"Job",V.Local.sJob,"Suffix",V.Local.sSuf)
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("WO_Label","WO_LABEL")
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","WO_Label",V.Args.RowIndex,V.Local.sWOLabel)
			f.Intrinsic.String.Split(v.Local.sWOLabel,"-",v.Local.sWOLabel)
			v.Local.sJob.Set(v.Local.sWOLabel(0))
			v.Local.sSuf.Set(v.Local.sWOLabel(1))
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
				F.Intrinsic.Control.If(v.Global.bEditWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(2009,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.Elseif(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optIssue.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.String.Build("{0}!*!{1}!*! !*! !*! !*! !*! ",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(450150,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Intrinsic.UI.Msgbox("Print Audit Trail?","Print",4,V.Local.iRet)
						F.Intrinsic.Control.If(V.Local.iRet,=,6)
							F.Global.General.CallWrapperSync(50,"JB0057")
						F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndSelect
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optWiptoFG.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.Date.Day(V.Ambient.Date,V.Local.iDayTrf)
				F.Intrinsic.Date.Month(V.Ambient.Date,V.Local.iMonthTrf)
				F.Intrinsic.Date.Year(V.Ambient.Date,V.Local.iYearTrf)
				F.Intrinsic.String.Build("{0}!*!{1}!*!{2}!*!OS!*!!*!!*!!*!!*!!*!!*!{3}!*!{4}!*!16!*!03!*!02!*!!*!!*!!*!!*!!*!!*!!*!!*!!*!",V.Caller.CompanyCode,V.Caller.Terminal,V.Caller.Caller,V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(2003,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
				F.Intrinsic.Control.EndSelect
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Case("SALES_ORDER_LINE")
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","SALES_ORDER",V.Args.RowIndex,V.Local.sSOH)
			Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSOL)
			f.Intrinsic.Control.If(v.Local.sSOH.Trim,<>,"")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bEditSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"O","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				f.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optView.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bViewSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"V","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcAllO_RowCellClick.End

Program.Sub.gsgcAllO_CellValueChanged.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sWO.Declare
	V.Local.sSuf.Declare
	v.Local.sSeq.Declare
	V.Local.sSQL.Declare
	V.Local.sText.Declare
	V.Local.sTextLbl.Declare
	v.Local.sTextTbl.Declare
	v.Local.sTextTbl.Redim(0,1)
	v.Local.sName.Declare
	V.Local.sHold.Declare
	V.Local.iHold.Declare
	v.Local.sret.Declare
	v.Local.sCust.Declare
	v.Local.lSize.Declare
	V.Local.sSONum.Declare
	v.local.sCustPO.Declare
	v.Local.sSP.Declare
	v.Local.sProj.Declare
	v.Local.sVendor.Declare
	v.Local.sVendorName.Declare
	v.Local.sMyVal.Declare
	v.Local.sPO.Declare
	v.Local.sPOLine.Declare
	v.Local.sPart.Declare
	v.Local.fCost.Declare
	v.Local.iRowIndex.Declare
	V.Local.fBurdenCost.Declare
	V.Local.sVendorCurrency.Declare
	v.Local.sPurUM.Declare
	v.Local.sQuery.Declare
	v.Local.sUM_PURCHASING.Declare
	v.Local.sUM_INVENTORY.Declare
	v.Local.fFACTOR_CONVERSION.Declare
	v.Local.fPurQty.Declare
	v.Local.sPartDesc.Declare

	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","JOB",V.Args.RowIndex,V.Local.sWO)
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","SUFFIX",V.Args.RowIndex,V.Local.sSuf) 
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","SEQ",V.Args.RowIndex,V.Local.sSeq) 
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PURCHASE_ORDER",V.Args.RowIndex,V.Local.sPO)
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","LINE",V.Args.RowIndex,V.Local.sPOLine) 
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","DESCR",V.Args.RowIndex,V.Local.sPartDesc) 
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","OutsideServicePart",V.Args.RowIndex,V.Local.sPart) 
	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","BURDEN",V.Args.RowIndex,V.Local.fBurdenCost) 	
'	Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PURUM",V.Args.RowIndex,V.Local.sPurUM) 	
	
	F.Intrinsic.Control.SelectCase(V.Args.column)			
		F.Intrinsic.Control.CaseAny("VENDOR","vendor")
			f.Intrinsic.Control.If(V.Args.Value.Trim,=,"")
'				f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
'				f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency",V.Global.sComCurr,"SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
				f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency",V.Global.sComCurr,"SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
					f.Intrinsic.String.Build("select A.NAME_VENDOR, RTRIM(A.VENDOR) As VENDOR, COALESCE(IF(RTRIM(LTRIM(B.Default_Currency))='','{1}',B.Default_Currency),'{1}') AS VendorCurrency, C.APPROVED_SUPPL from V_VENDOR_MASTER A LEFT JOIN V_VENDOR_INTL B ON A.VENDOR = B.VENDOR LEFT JOIN V_VENDOR_ADDL C ON C.VENDOR = A.VENDOR WHERE A.VENDOR = '{0}'",v.Args.Value.Trim,V.Global.sComCurr,v.Local.sSQL)
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Build("select A.NAME_VENDOR, RTRIM(A.VENDOR) As VENDOR, COALESCE(IF(RTRIM(LTRIM(B.Default_Currency))='','{1}',B.Default_Currency),'{1}') AS VendorCurrency from V_VENDOR_MASTER A LEFT OUTER JOIN V_VENDOR_INTL B ON A.VENDOR = B.VENDOR WHERE A.VENDOR = '{0}'",v.Args.Value.Trim,V.Global.sComCurr,v.Local.ssql)
				f.Intrinsic.Control.EndIf
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sret)
				f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
'					f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
'					f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency",V.Global.sComCurr,"SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
					f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency",V.Global.sComCurr,"SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
					f.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
						f.Intrinsic.Control.If(V.Local.sret(3).Trim,=,"Y")
'							f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
							f.Intrinsic.String.LTrim(v.Args.Value,v.Local.sMyVal)
							f.Intrinsic.String.RTrim(v.Local.sMyVal,v.Local.sMyVal)
							f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME",v.Local.sret(0).Trim,"VendorCurrency",v.Local.sret(2).Trim,"SelectWO",True,"Vendor",v.Local.sMyVal,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
							V.Local.sVendorCurrency.Set(v.Local.sret(2).Trim)
							
							'Modified by TDjohan - BEGIN (04/06/2022)
							'Get Vendor Quote Cost
'							V.Local.sVendor.Set(v.Args.Value.Trim)
'							V.Local.iRowIndex.Set(V.Args.rowindex)
'							F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor)
'							f.Data.DataTable.SetValue("dtAllO",v.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
								
							'Hierarchy of Cost
							'1. Get Vendor Quote Cost
							'2. Get Last Purchase Cost
							'3. Get Burden Cost from WO Sequence
							
							'Get Vendor Quote Cost
							V.Local.sVendor.Set(V.Args.Value.Trim)
							V.Local.iRowIndex.Set(V.Args.rowindex)
							
							'Get which Purchase Qty to use
							f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
								v.Local.fPurQty.Set(V.DataTable.dtAllO(V.Local.iRowIndex).PCSTOPROD!FieldVal)
							f.Intrinsic.Control.Else
								v.Local.fPurQty.Set(V.DataTable.dtAllO(V.Local.iRowIndex).PCSREMAIN!FieldVal)
							f.Intrinsic.Control.EndIf
							
							F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"PartDesc",v.Local.sPartDesc,"DT","dtAllO")
		'					f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
							F.Intrinsic.Control.If(V.Args.Seq,=,"")     'Means there is no Vendor Quote	
								Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PURUM",V.Local.iRowIndex,V.Local.sPurUM)
								
								'Get Vendor Last Purchase Cost
								F.Intrinsic.Control.CallSub(GetVendorLastPurchaseCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"PurUM",v.Local.sPurUM,"PartDesc",v.Local.sPartDesc,"DT","dtAllO")
								F.Intrinsic.Control.If(v.Args.bNoVendorLastPurchaseCost)
									'No Vendor Last Purchase cost then use the Burden Cost from WO Sequence if the Vendor Currency is the same as Base Currency
									F.Intrinsic.Control.If(v.Local.sVendorCurrency,=,v.Global.sComCurr)
										f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Local.fBurdenCost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
									F.Intrinsic.Control.Else
										f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
									F.Intrinsic.Control.EndIf
								F.Intrinsic.Control.Else
									'Use the Vendor Last Purchase Cost
									f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.Else
								'Recalculate Purchase Qty
								f.Intrinsic.Control.If(v.Args.Conversion,>,0.00000)
									f.Intrinsic.Math.Div(v.Local.fPurQty,v.Args.Conversion,v.Local.fPurQty)
									f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
									f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
									f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
								f.Intrinsic.Control.EndIf
								
								'Populate with Vendor Quote Cost
'								f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime)
								f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"PURUM",v.Args.PurUM,"PUR_CNV_FACTOR",v.Args.Conversion,"PUR_QTY",v.Local.fPurQty)
							F.Intrinsic.Control.EndIf
							'Modified by TDjohan - END (04/06/2022)
						f.Intrinsic.Control.Else
							f.Intrinsic.UI.Msgbox("Vendor is not an Approved Supplier")
'							f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
							f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.Else
'						f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
						f.Intrinsic.String.LTrim(v.Args.Value,v.Local.sMyVal)
						f.Intrinsic.String.RTrim(v.Local.sMyVal,v.Local.sMyVal)
						f.Data.DataTable.SetValue("dtAllO",v.Args.rowindex,"VENDORNAME",v.Local.sret(0).Trim,"VendorCurrency",v.Local.sret(2).Trim,"SelectWO",True,"Vendor",v.Local.sMyVal,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
						V.Local.sVendorCurrency.Set(v.Local.sret(2).Trim)
						
						'Modified by TDjohan - BEGIN (04/06/2022)
						'Get Vendor Quote Cost
'						V.Local.sVendor.Set(v.Args.Value.Trim)
'						V.Local.iRowIndex.Set(V.Args.rowindex)
'						F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor)
'						f.Data.DataTable.SetValue("dtAllO",v.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
						
						'Get Vendor Quote Cost
						V.Local.sVendor.Set(V.Args.Value.Trim)
						V.Local.iRowIndex.Set(V.Args.rowindex)
						
						'Get which Purchase Qty to use
						f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
							v.Local.fPurQty.Set(V.DataTable.dtAllO(V.Local.iRowIndex).PCSTOPROD!FieldVal)
						f.Intrinsic.Control.Else
							v.Local.fPurQty.Set(V.DataTable.dtAllO(V.Local.iRowIndex).PCSREMAIN!FieldVal)
						f.Intrinsic.Control.EndIf
						F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"PartDesc",v.Local.sPartDesc,"DT","dtAllO")
	'					f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
						F.Intrinsic.Control.If(V.Args.Seq,=,"")     'Means there is no Vendor Quote				
							Gui.FrmMaster.gsgcAllO.GetCellValueByColumnName("gvAllO","PURUM",V.Local.iRowIndex,V.Local.sPurUM) 	
								
							'Get Vendor Last Purchase Cost
							F.Intrinsic.Control.CallSub(GetVendorLastPurchaseCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"PurUM",v.Local.sPurUM,"PartDesc",v.Local.sPartDesc,"DT","dtAllO")
							F.Intrinsic.Control.If(v.Args.bNoVendorLastPurchaseCost)
								'No Vendor Last Purchase cost then use the Burden Cost from WO Sequence if the Vendor Currency is the same as Base Currency
								F.Intrinsic.Control.If(v.Local.sVendorCurrency,=,v.Global.sComCurr)
									f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Local.fBurdenCost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
								F.Intrinsic.Control.Else
									f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.Else
								'Use the Vendor Last Purchase Cost
								f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else		
							'Recalculate Purchase Qty
							f.Intrinsic.Control.If(v.Args.Conversion,>,0.00000)
								f.Intrinsic.Math.Div(v.Local.fPurQty,v.Args.Conversion,v.Local.fPurQty)
								f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
								f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
								f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
							f.Intrinsic.Control.EndIf
								
							'Populate with Vendor Quote Cost
							f.Data.DataTable.SetValue("dtAllO",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"PURUM",v.Args.PurUM,"PUR_CNV_FACTOR",v.Args.Conversion,"PUR_QTY",v.Local.fPurQty)
						F.Intrinsic.Control.EndIf
						'Modified by TDjohan - END (04/06/2022)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("TEXT","text")
			F.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
				f.Intrinsic.UI.Msgbox("Purchase Order not found.")
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("SELECT * FROM PO_LN_TEXT WHERE PO_NUM='{0}' AND LINE='{1}0'",v.LOCAL.sPO,v.Local.sPOLine,v.Local.ssql)
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sret)
				f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"")
					F.Intrinsic.String.Build("UPDATE PO_LN_TEXT SET TEXT='{0}' WHERE PO_NUM='{1}' AND LINE='{2}0'",v.Args.value.PSQLFriendly,v.Local.sPO,v.Local.sPOLine,v.Local.sSQL)
					f.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.Else
					F.Intrinsic.String.Build("INSERT INTO PO_LN_TEXT (PO_NUM,LINE,TEXT) VALUES('{0}','{1}0','{2}')",v.Local.sPO,v.Local.sPOLine,v.Args.value.PSQLFriendly,v.Local.sSQL)
					f.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf

	
		F.Intrinsic.Control.CaseAny("SALES_ORDER","sales_order")
			'Set Row Change and SO Number
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
			V.Local.sSONum.Set(V.Args.VALUE)
			f.Intrinsic.String.LPad(v.Local.sSONum,"0",7,v.Local.sSONum)
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"SALES_ORDER",v.Local.sSONum)
			
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALES_ORDER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sSONum,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Sales Order","Notes",v.Local.sSONum)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Run the query to grab the pertinent fields
			F.Intrinsic.String.Build("select CUSTOMER, CUSTOMER_PO, SALESPERSON, PROJECT from V_ORDER_HEADER where ORDER_NO='{0}'",v.Local.sSONum,v.Local.sSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.sSQL,v.Local.sret)
			f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
			v.Local.sCust.Set(v.Local.sret(0))
			v.Local.sCustPO.Set(v.Local.sret(1))
			v.Local.sSP.Set(v.Local.sret(2))
			v.Local.sProj.Set(v.Local.sret(3))
			
			'Do Project
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PROJECT='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sProj.Trim,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Project","Notes",v.Local.sProj)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Sales Person
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALESPERSON='{0}', SALESPERSON_OLD='{1}' WHERE JOB='{2}' AND SUFFIX='{3}'",v.Local.sSP.Trim,v.Local.sSP.Trim,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Salesperson","Notes",v.Local.sSP)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Customer PO
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER_PO='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sCustPO.Trim,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Cust PO","Notes",v.Local.sCustPO)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Name of Customer
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sCust.Trim,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Customer","Notes",v.Local.sCust)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
		
		F.Intrinsic.Control.CaseAny("WO_6271_NOTES")
			v.Local.sTextLbl.Set(v.DataTable.dtAllO(V.ARGS.ROWINDEX).WO_6271_NOTES!fieldvaltrim)
			F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
			F.Intrinsic.String.Build("SELECT * FROM GAB_6271_WO_NOTES WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}';",V.Local.sWO,V.Local.sSuf,v.Local.sSeq,V.Local.sSQL)
			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
				F.Intrinsic.String.Build("INSERT INTO GAB_6271_WO_NOTES(JOB,SUFFIX,SEQ,NOTES) VALUES('{0}','{1}','{2}','{3}');",V.Local.sWO,V.Local.sSuf,v.Local.sSeq,V.Local.sTextTbl,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(Insert_6271_Note,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"SEQ",v.Local.sSeq,"Field","6271 Note","Notes",v.Local.sTextTbl)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("UPDATE GAB_6271_WO_NOTES SET NOTES = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}' AND SEQ = '{3}';",V.Local.sTextTbl,V.Local.sWO,V.Local.sSuf,v.Local.sSeq,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(Insert_6271_Note,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"SEQ",v.Local.sSeq,"Field","6271 Note","Notes",v.Local.sTextTbl)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstNotes.Close
			
	F.Intrinsic.Control.EndSelect
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcAllO_CellValueChanged.End

Program.Sub.gsgcAllM_RowCellClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sRet.Declare
	V.Local.sSQL.Declare
	v.Local.sJob.Declare
	v.Local.sSuf.Declare
	v.Local.sWOLabel.Declare
	v.Local.sParams.Declare
	V.Local.sLinkID.Declare
	V.Local.sPart.Declare
	v.local.sPO.Declare
	v.Local.sLoc.Declare
	v.Local.iRet.Declare
	v.Local.iDayTrf.Declare
	v.Local.iMonthTrf.Declare
	v.Local.iYearTrf.Declare
	V.Local.iRefID.Declare
	V.Local.iLinkID.Declare
	V.Local.iPID.Declare
	V.Local.sVendor.Declare
	V.Local.sVendorQuoteSeq.Declare
	v.Local.sSOH.Declare
	v.Local.sSOL.Declare
		
	F.Intrinsic.Control.SelectCase(v.Args.Column)
		F.Intrinsic.Control.CaseAny("VendorSearch","VENDORSEARCH")
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PURCHASE_ORDER",V.Args.RowIndex,V.Local.sPO)
			f.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
				v.Global.iVendRow.Set(v.Args.RowIndex)
				gui.FrmMaster.lookupVendor.Show
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("VendorQuoteSearch","VENDORQUOTESEARCH")
			'Modified by TDjohan - 06/24/2022 - BEGIN
			'Allow to browse all Vendor Quote based on Part No, no need for Vendor Code anymore
'			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","MatPart",V.Args.RowIndex,V.Local.sPart)
'			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","VENDOR",V.Args.RowIndex,V.Local.sVendor)
'			F.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
'				F.Intrinsic.Control.If(V.Local.sPart.Trim,<>,"")
'				F.Intrinsic.Control.AndIf(V.Local.sVendor.Trim,<>,"")
'					v.Global.iVendRow.Set(v.Args.RowIndex)
'					
'					'Load Vendor Quote
'					F.Intrinsic.Control.If(V.DataTable.dtVendorQuoteSeq.Exists,=,True)
'						F.Data.DataTable.Close("dtVendorQuoteSeq")
'					F.Intrinsic.Control.EndIf
'					F.Intrinsic.String.Build("select H.PART, H.VENDOR, H.SEQ, H.PART_DESC, H.MFG_PART_NO, H.MFG_NAME, H.LEAD_TIME, L.QUANTITY, L.UNIT_PRICE from V_VEND_QTE_HEADER H LEFT JOIN V_VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ where H.PART = '{0}' and H.VENDOR = '{1}' ORDER BY H.PART, H.VENDOR, H.SEQ, L.LINE",V.Local.sPart.Trim,V.Local.sVendor.Trim,V.Local.sSQL)
'					F.Data.DataTable.CreateFromSQL("dtVendorQuoteSeq","con",V.Local.sSQL)
'					gui.FrmMaster.lookupVendorQuote.DataTableBasis("dtVendorQuoteSeq")
'					gui.FrmMaster.lookupVendorQuote.Show
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.EndIf
			
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PURCHASE_ORDER",V.Args.RowIndex,V.Local.sPO)
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","MatPart",V.Args.RowIndex,V.Local.sPart)
			F.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
				F.Intrinsic.Control.If(V.Local.sPart.Trim,<>,"")
					v.Global.iVendRow.Set(v.Args.RowIndex)
					
					'Load Vendor Quote
					F.Intrinsic.Control.If(V.DataTable.dtVendorQuoteSeq.Exists,=,True)
						F.Data.DataTable.Close("dtVendorQuoteSeq")
					F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
						F.Intrinsic.String.Build("select H.PART, H.SEQ, H.PART_DESC, V.NAME_VENDOR, H.LEAD_TIME, L.QUANTITY, CAST(L.UNIT_PRICE AS NUMERIC(18,6)) AS UNIT_PRICE, COALESCE(IF(RTRIM(LTRIM(I.Default_Currency))='','{0}',I.Default_Currency),'{0}') AS VendorCurrency, RTRIM(H.VENDOR) AS 'VENDOR', H.MFG_PART_NO, H.MFG_NAME, H.INV_UM, H.PUR_UM, H.UM_SELECTED, CAST(H.CONVERSION AS NUMERIC(18,6)) AS CONVERSION from V_VEND_QTE_HEADER H LEFT JOIN V_VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ LEFT JOIN V_VENDOR_MASTER V ON V.VENDOR = H.VENDOR LEFT JOIN V_Vendor_Intl I ON V.Vendor = I.Vendor LEFT JOIN V_VENDOR_ADDL T ON T.VENDOR = V.VENDOR where H.PART = '{1}' AND T.APPROVED_SUPPL = 'Y' ORDER BY H.PART, H.VENDOR, H.SEQ, L.LINE",V.Global.sComCurr,V.Local.sPart.Trim,V.Local.sSQL)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("select H.PART, H.SEQ, H.PART_DESC, V.NAME_VENDOR, H.LEAD_TIME, L.QUANTITY, CAST(L.UNIT_PRICE AS NUMERIC(18,6)) AS UNIT_PRICE, COALESCE(IF(RTRIM(LTRIM(I.Default_Currency))='','{0}',I.Default_Currency),'{0}') AS VendorCurrency, RTRIM(H.VENDOR) AS 'VENDOR', H.MFG_PART_NO, H.MFG_NAME, H.INV_UM, H.PUR_UM, H.UM_SELECTED, CAST(H.CONVERSION AS NUMERIC(18,6)) AS CONVERSION  from V_VEND_QTE_HEADER H LEFT JOIN V_VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ LEFT JOIN V_VENDOR_MASTER V ON V.VENDOR = H.VENDOR LEFT JOIN V_Vendor_Intl I ON V.Vendor = I.Vendor where H.PART = '{1}' ORDER BY H.PART, H.VENDOR, H.SEQ, L.LINE",V.Global.sComCurr,V.Local.sPart.Trim,V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
					F.Data.DataTable.CreateFromSQL("dtVendorQuoteSeq","con",V.Local.sSQL)
					gui.FrmMaster.lookupVendorQuote.DataTableBasis("dtVendorQuoteSeq")
					gui.FrmMaster.lookupVendorQuote.Show
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			'Modified by TDjohan - 06/24/2022 - END
			
		F.Intrinsic.Control.Case("PURCHASE_ORDER","Purchase_Order")
			F.Intrinsic.Control.If(V.Args.CellValue.Trim,<>,"")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
				f.Intrinsic.Control.AndIf(v.Global.bEditPO)
					F.Intrinsic.String.Concat("O!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
					F.Global.General.CallWrapperASync(175200,V.Local.sParams)
				f.Intrinsic.Control.Else
					F.Intrinsic.String.Concat("V!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
					F.Global.General.CallWrapperASync(175200,V.Local.sParams)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.caseany("PrtDocCntrl")
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PART",V.Args.RowIndex,V.Local.sPart)
			f.Global.DocumentControl.GetLinkID(v.Local.sPart.Trim,30,v.Local.iRefID)
			f.Intrinsic.Control.If(v.Local.irefid,=,-1)
				F.ODBC.Connection!con.ExecuteAndReturn("SELECT MAX(LINK_ID) AS 'LinkID' FROM LINK_DATA",v.Local.sLinkID)
				f.Intrinsic.Math.ConvertToLong(v.Local.sLinkID,v.Local.iLinkID)
				f.Intrinsic.Math.Add(v.Local.iLinkID,1,v.Local.iLinkID)
				f.Intrinsic.string.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				V.Local.iRefID.Set(v.Local.iLinkID)
				F.Global.DocumentControl.CreateReference(V.Local.sPart,"00030",V.Local.iRefID)
			f.Intrinsic.Control.EndIf
			F.Global.DocumentControl.Invoke(V.Local.sPart,30,"(Inventory Master)",V.Local.iPID)
		
		F.Intrinsic.Control.CaseAny("MatDisplayPart","MATDISPLAYPART")
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","MATPART",V.Args.RowIndex,V.Local.sPart)
			V.Local.sLoc.Set("")
			F.Intrinsic.Control.If(V.Local.sPart,<>,"MULTI-PART")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,True)
					f.Intrinsic.Control.If(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.Global.bEditPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!M",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.Elseif(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'Load Multi-Part screen
				f.Intrinsic.Control.If(v.Global.bViewPart)
					Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","JOB",V.Args.RowIndex,V.Local.sJob)
					Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
					Gui.FrmMaster..Enabled(False)
					f.Intrinsic.Control.CallSub(LoadMultiPart,"Job",V.Local.sJob,"Suffix",V.Local.sSuf)
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("Part","PART")
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PART",V.Args.RowIndex,V.Local.sPart)
			V.Local.sLoc.Set("")
			F.Intrinsic.Control.If(V.Local.sPart,<>,"MULTI-PART")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,True)
					f.Intrinsic.Control.If(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.Global.bEditPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!M",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.Elseif(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'Load Multi-Part screen
				f.Intrinsic.Control.If(v.Global.bViewPart)
					Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","JOB",V.Args.RowIndex,V.Local.sJob)
					Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
					Gui.FrmMaster..Enabled(False)
					f.Intrinsic.Control.CallSub(LoadMultiPart,"Job",V.Local.sJob,"Suffix",V.Local.sSuf)
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("WO_Label","WO_LABEL")
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","WO_Label",V.Args.RowIndex,V.Local.sWOLabel)
			f.Intrinsic.String.Split(v.Local.sWOLabel,"-",v.Local.sWOLabel)
			v.Local.sJob.Set(v.Local.sWOLabel(0))
			v.Local.sSuf.Set(v.Local.sWOLabel(1))
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
				F.Intrinsic.Control.If(v.Global.bEditWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(2009,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.Elseif(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optIssue.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.String.Build("{0}!*!{1}!*! !*! !*! !*! !*! ",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(450150,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Intrinsic.UI.Msgbox("Print Audit Trail?","Print",4,V.Local.iRet)
						F.Intrinsic.Control.If(V.Local.iRet,=,6)
							F.Global.General.CallWrapperSync(50,"JB0057")
						F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndSelect
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optWiptoFG.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.Date.Day(V.Ambient.Date,V.Local.iDayTrf)
				F.Intrinsic.Date.Month(V.Ambient.Date,V.Local.iMonthTrf)
				F.Intrinsic.Date.Year(V.Ambient.Date,V.Local.iYearTrf)
				F.Intrinsic.String.Build("{0}!*!{1}!*!{2}!*!OS!*!!*!!*!!*!!*!!*!!*!{3}!*!{4}!*!16!*!03!*!02!*!!*!!*!!*!!*!!*!!*!!*!!*!!*!",V.Caller.CompanyCode,V.Caller.Terminal,V.Caller.Caller,V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(2003,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
				F.Intrinsic.Control.EndSelect
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.Case("SALES_ORDER_LINE")
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","SALES_ORDER",V.Args.RowIndex,V.Local.sSOH)
			Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSOL)
			f.Intrinsic.Control.If(v.Local.sSOH.Trim,<>,"")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bEditSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"O","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				f.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optView.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bViewSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"V","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcAllM_RowCellClick.End

Program.Sub.gsgcAllM_CellValueChanged.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sWO.Declare
	V.Local.sSuf.Declare
	V.Local.sSeq.Declare
	V.Local.sSQL.Declare
	V.Local.sText.Declare
	V.Local.sTextLbl.Declare
	v.Local.sTextTbl.Declare
	v.Local.sTextTbl.Redim(0,1)
	v.Local.sName.Declare
	V.Local.sHold.Declare
	V.Local.iHold.Declare
	v.Local.sret.Declare
	v.Local.sCust.Declare
	v.Local.lSize.Declare
	V.Local.sSONum.Declare
	v.local.sCustPO.Declare
	v.Local.sSP.Declare
	v.Local.sProj.Declare
	v.Local.sVendor.Declare
	v.Local.sVendorName.Declare
	v.Local.sMyVal.Declare
	v.Local.sPO.Declare
	v.Local.sPOLine.Declare
	v.Local.sPart.Declare
	V.Local.iRowIndex.Declare
	V.Local.sTempDate.Declare
	V.Local.dTempDate.Declare
	V.Local.fBurdenCost.Declare
	V.Local.sVendorCurrency.Declare
	V.Local.sPurUM.Declare
	v.Local.sQuery.Declare
	v.Local.sUM_PURCHASING.Declare
	v.Local.sUM_INVENTORY.Declare
	v.Local.fFACTOR_CONVERSION.Declare
	v.Local.fPurQty.Declare
	
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","JOB",V.Args.RowIndex,V.Local.sWO)
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","SUFFIX",V.Args.RowIndex,V.Local.sSuf) 
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","SEQ",V.Args.RowIndex,V.Local.sSeq) 
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PURCHASE_ORDER",V.Args.RowIndex,V.Local.sPO)
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","LINE",V.Args.RowIndex,V.Local.sPOLine) 
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","MATPART",V.Args.RowIndex,V.Local.sPart) 	
	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","BURDEN",V.Args.RowIndex,V.Local.fBurdenCost) 	
'	Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PURUM",V.Args.RowIndex,V.Local.sPurUM) 	
	
	F.Intrinsic.Control.SelectCase(V.Args.column)			
		F.Intrinsic.Control.CaseAny("VENDOR","vendor")		
			f.Intrinsic.Control.If(V.Args.Value.Trim,=,"")
'				f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
				f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME","","VendorCurrency",V.Global.sComCurr,"SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
'				F.Data.DataTable.AcceptChanges("dtAllM")
				F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Args.RowIndex).LINEDUE!FieldValTrim,<>,"")					
					F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Args.RowIndex).LINEDUE!FieldVal,v.Local.sTempDate)
					F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
						F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
						F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Args.RowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
						F.Data.DataTable.SetValue("dtAllM",V.Args.RowIndex,"ORDER_REQD_DATE",V.Local.dTempDate)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Else				
				f.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
					f.Intrinsic.String.Build("select A.NAME_VENDOR, RTRIM(A.VENDOR) As VENDOR, COALESCE(IF(RTRIM(LTRIM(B.Default_Currency))='','{1}',B.Default_Currency),'{1}') AS VendorCurrency, C.APPROVED_SUPPL from V_VENDOR_MASTER A LEFT JOIN V_VENDOR_INTL B ON A.VENDOR = B.VENDOR LEFT JOIN V_VENDOR_ADDL C ON C.VENDOR = A.VENDOR WHERE A.VENDOR = '{0}'",v.Args.Value.Trim,V.Global.sComCurr,v.Local.sSQL)
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Build("select A.NAME_VENDOR, RTRIM(A.VENDOR) As VENDOR, COALESCE(IF(RTRIM(LTRIM(B.Default_Currency))='','{1}',B.Default_Currency),'{1}') AS VendorCurrency from V_VENDOR_MASTER A LEFT JOIN V_VENDOR_INTL B ON A.VENDOR = B.VENDOR WHERE A.VENDOR = '{0}'",v.Args.Value.Trim,V.Global.sComCurr,v.Local.sSQL)
				f.Intrinsic.Control.EndIf
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sret)
				f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
'					f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
					f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME","","VendorCurrency",V.Global.sComCurr,"SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
					F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Args.RowIndex).LINEDUE!FieldValTrim,<>,"")
						F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Args.RowIndex).LINEDUE!FieldVal,v.Local.sTempDate)
						F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
							F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
							F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Args.RowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
							F.Data.DataTable.SetValue("dtAllM",V.Args.RowIndex,"ORDER_REQD_DATE",V.Local.dTempDate)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
					f.Intrinsic.Control.If(V.Global.bOnlyAllowApprovedVendor)
						f.Intrinsic.Control.If(V.Local.sret(3).Trim,=,"Y")
'							f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
							f.Intrinsic.String.LTrim(v.Args.Value,v.Local.sMyVal)
							f.Intrinsic.String.RTrim(v.Local.sMyVal,v.Local.sMyVal)
							f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME",v.Local.sret(0).Trim,"VendorCurrency",v.Local.sret(2).Trim,"SelectWO",True,"Vendor",v.Local.sMyVal,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
'							F.Data.DataTable.AcceptChanges("dtAllM")
							V.Local.sVendorCurrency.Set(v.Local.sret(2).Trim)
							
							'Modified by TDjohan - BEGIN (04/06/2022)
'							'Get Vendor Quote Cost
'							V.Local.sVendor.Set(V.Args.Value.Trim)
'							V.Local.iRowIndex.Set(V.Args.rowindex)
'							F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor)
'		'					f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
'							F.Intrinsic.Control.If(V.Args.Seq,=,"")     'Means there is no Vendor Quote
'								f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
'							F.Intrinsic.Control.Else
'								f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime)
'								F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldValTrim,<>,"")
'									V.Local.sTempDate.Set(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldVal)
'									F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"MM/DD/YYYY",V.Local.dTempDate)
'									F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Local.iRowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
'									F.Intrinsic.String.Format(V.Local.dTempDate,"MM/DD/YYYY",V.Local.sTempDate)
'									F.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"ORDER_REQD_DATE",V.Local.sTempDate)
'								F.Intrinsic.Control.EndIf
'							F.Intrinsic.Control.EndIf
							
							'Hierarchy of Cost
							'1. Get Vendor Quote Cost
							'2. Get Last Purchase Cost
							'3. Get Burden Cost from WO Sequence
	
							'Get Vendor Quote Cost
							V.Local.sVendor.Set(V.Args.Value.Trim)
							V.Local.iRowIndex.Set(V.Args.rowindex)
							
							'Get which Purchase Qty to use
							f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
								v.Local.fPurQty.Set(V.DataTable.dtAllM(V.Local.iRowIndex).PCSTOPROD!FieldVal)
							f.Intrinsic.Control.Else
								v.Local.fPurQty.Set(V.DataTable.dtAllM(V.Local.iRowIndex).PCSREMAIN!FieldVal)
							f.Intrinsic.Control.EndIf
							
							F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"DT","dtAllM")
		'					f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
							F.Intrinsic.Control.If(V.Args.Seq,=,"")     'Means there is no Vendor Quote
								'Get the Purchasing UM, Inventory UM, and Factor Conversion from Inventory Master
								f.Intrinsic.String.Build("select PART, UM_INVENTORY, IF(LTRIM(RTRIM(UM_PURCHASING))='',UM_INVENTORY,UM_PURCHASING) AS UM_PURCHASING, CAST(FACTOR_CONVERSION AS NUMERIC(18,5)) AS FACTOR_CONVERSION from INVENTORY_MSTR where PART = '{0}';",V.Local.sPart.Trim,v.Local.sQuery)
								f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
								f.Intrinsic.Control.If(v.ODBC.con!rst.EOF)
									v.Local.sUM_PURCHASING.Set("")
									v.Local.sUM_INVENTORY.Set("")
									v.Local.fFACTOR_CONVERSION.Set(0.00000)
								f.Intrinsic.Control.Else
									v.Local.sUM_PURCHASING.Set(v.ODBC.con!rst.FieldValTrim!UM_PURCHASING)
									v.Local.sUM_INVENTORY.Set(v.ODBC.con!rst.FieldValTrim!UM_INVENTORY)
									v.Local.fFACTOR_CONVERSION.Set(v.ODBC.con!rst.FieldVal!FACTOR_CONVERSION)
								f.Intrinsic.Control.EndIf
								f.ODBC.con!rst.Close
								
								'Recalculate Purchase Qty
								f.Intrinsic.Control.If(v.Local.fFACTOR_CONVERSION,>,0.00000)
									f.Intrinsic.Math.Div(v.Local.fPurQty,v.Local.fFACTOR_CONVERSION,v.Local.fPurQty)
									f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
									f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
									f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
								f.Intrinsic.Control.EndIf
								
								f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"PURUM",v.Local.sUM_PURCHASING,"INVUM",v.Local.sUM_INVENTORY,"PUR_CNV_FACTOR",v.Local.fFACTOR_CONVERSION,"PUR_QTY",v.Local.fPurQty)
'								f.Data.DataTable.AcceptChanges("dtAllM")
								Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PURUM",V.Local.iRowIndex,V.Local.sPurUM) 	
								
								'Get Vendor Last Purchase Cost
								F.Intrinsic.Control.CallSub(GetVendorLastPurchaseCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"PurUM",v.Local.sPurUM,"DT","dtAllM")
								F.Intrinsic.Control.If(v.Args.bNoVendorLastPurchaseCost)
									'No Vendor Last Purchase cost then use the Burden Cost from WO Sequence if the Vendor Currency is the same as Base Currency
									F.Intrinsic.Control.If(v.Local.sVendorCurrency,=,v.Global.sComCurr)
										f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Local.fBurdenCost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
									F.Intrinsic.Control.Else
										f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
									F.Intrinsic.Control.EndIf
'									F.Data.DataTable.AcceptChanges("dtAllM")
								F.Intrinsic.Control.Else
									'Use the Vendor Last Purchase Cost
									f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
'									F.Data.DataTable.AcceptChanges("dtAllM")
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.Else
								'Recalculate Purchase Qty
								f.Intrinsic.Control.If(v.Args.Conversion,>,0.00000)
									f.Intrinsic.Math.Div(v.Local.fPurQty,v.Args.Conversion,v.Local.fPurQty)
									f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
									f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
									f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
								f.Intrinsic.Control.EndIf
								
								'Populate with Vendor Quote Cost
								f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"PURUM",v.Args.PurUM,"PUR_CNV_FACTOR",v.Args.Conversion,"PUR_QTY",v.Local.fPurQty)
'								F.Data.DataTable.AcceptChanges("dtAllM")
								
								F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldValTrim,<>,"")									
									F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldVal,v.Local.sTempDate)
									F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
										F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
										F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Local.iRowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
										F.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"ORDER_REQD_DATE",V.Local.dTempDate)
'										F.Data.DataTable.AcceptChanges("dtAllM")
									F.Intrinsic.Control.EndIf
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.EndIf
							'Modified by TDjohan - END (04/06/2022)
						f.Intrinsic.Control.Else
							f.Intrinsic.UI.Msgbox("Vendor is not an Approved Supplier")
							f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME","","VendorCurrency","","SelectWO",False,"Vendor","","COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
'							F.Data.DataTable.AcceptChanges("dtAllM")
							F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Args.RowIndex).LINEDUE!FieldValTrim,<>,"")								
								F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Args.RowIndex).LINEDUE!FieldVal,v.Local.sTempDate)
								F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
									F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
									F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Args.RowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
									F.Data.DataTable.SetValue("dtAllM",V.Args.RowIndex,"ORDER_REQD_DATE",V.Local.dTempDate)
'									F.Data.DataTable.AcceptChanges("dtAllM")
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.EndIf
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.Else
'						f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
						f.Intrinsic.String.LTrim(v.Args.Value,v.Local.sMyVal)
						f.Intrinsic.String.RTrim(v.Local.sMyVal,v.Local.sMyVal)
						f.Data.DataTable.SetValue("dtAllM",v.Args.rowindex,"VENDORNAME",v.Local.sret(0).Trim,"VendorCurrency",v.Local.sret(2).Trim,"SelectWO",True,"Vendor",v.Local.sMyVal,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","")
						V.Local.sVendorCurrency.Set(v.Local.sret(2).Trim)
						
						'Modified by TDjohan - BEGIN (04/06/2022)
'						'Get Vendor Quote Cost
'						V.Local.sVendor.Set(V.Args.Value.Trim)
'						V.Local.iRowIndex.Set(V.Args.rowindex)
'						F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor)
'	'					f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
'						F.Intrinsic.Control.If(V.Args.Seq,=,"")     'Means there is no Vendor Quote
'							f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)
'						F.Intrinsic.Control.Else
'							f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime)
'							F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldValTrim,<>,"")
'								V.Local.sTempDate.Set(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldVal)
'								F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"MM/DD/YYYY",V.Local.dTempDate)
'								F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Local.iRowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
'								F.Intrinsic.String.Format(V.Local.dTempDate,"MM/DD/YYYY",V.Local.sTempDate)
'								F.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"ORDER_REQD_DATE",V.Local.sTempDate)
'							F.Intrinsic.Control.EndIf
'						F.Intrinsic.Control.EndIf
						
						'Get Vendor Quote Cost
						V.Local.sVendor.Set(V.Args.Value.Trim)
						V.Local.iRowIndex.Set(V.Args.rowindex)
						
						'Get which Purchase Qty to use
						f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
							v.Local.fPurQty.Set(V.DataTable.dtAllM(V.Local.iRowIndex).PCSTOPROD!FieldVal)
						f.Intrinsic.Control.Else
							v.Local.fPurQty.Set(V.DataTable.dtAllM(V.Local.iRowIndex).PCSREMAIN!FieldVal)
						f.Intrinsic.Control.EndIf
						
						F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"DT","dtAllM")
	'					f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName)
						F.Intrinsic.Control.If(V.Args.Seq,=,"")     'Means there is no Vendor Quote
							'Get the Purchasing UM, Inventory UM, and Factor Conversion from Inventory Master
							f.Intrinsic.String.Build("select PART, UM_INVENTORY, IF(LTRIM(RTRIM(UM_PURCHASING))='',UM_INVENTORY,UM_PURCHASING) AS UM_PURCHASING, CAST(FACTOR_CONVERSION AS NUMERIC(18,5)) AS FACTOR_CONVERSION from INVENTORY_MSTR where PART = '{0}';",V.Local.sPart.Trim,v.Local.sQuery)
							f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
							f.Intrinsic.Control.If(v.ODBC.con!rst.EOF)
								v.Local.sUM_PURCHASING.Set("")
								v.Local.sUM_INVENTORY.Set("")
								v.Local.fFACTOR_CONVERSION.Set(0.00000)
							f.Intrinsic.Control.Else
								v.Local.sUM_PURCHASING.Set(v.ODBC.con!rst.FieldValTrim!UM_PURCHASING)
								v.Local.sUM_INVENTORY.Set(v.ODBC.con!rst.FieldValTrim!UM_INVENTORY)
								v.Local.fFACTOR_CONVERSION.Set(v.ODBC.con!rst.FieldVal!FACTOR_CONVERSION)
							f.Intrinsic.Control.EndIf
							f.ODBC.con!rst.Close
							
							'Recalculate Purchase Qty
							f.Intrinsic.Control.If(v.Local.fFACTOR_CONVERSION,>,0.00000)
								f.Intrinsic.Math.Div(v.Local.fPurQty,v.Local.fFACTOR_CONVERSION,v.Local.fPurQty)
								f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
								f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
								f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
							f.Intrinsic.Control.EndIf
							
							f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"PURUM",v.Local.sUM_PURCHASING,"INVUM",v.Local.sUM_INVENTORY,"PUR_CNV_FACTOR",v.Local.fFACTOR_CONVERSION,"PUR_QTY",v.Local.fPurQty)
'							f.Data.DataTable.AcceptChanges("dtAllM")
							Gui.FrmMaster.gsgcAllM.GetCellValueByColumnName("gvAllM","PURUM",V.Local.iRowIndex,V.Local.sPurUM) 
								
							'Get Vendor Last Purchase Cost
							F.Intrinsic.Control.CallSub(GetVendorLastPurchaseCost,"Part",V.Local.sPart.Trim,"Vendor",V.Local.sVendor,"PurUM",v.Local.sPurUM,"DT","dtAllM")
							F.Intrinsic.Control.If(v.Args.bNoVendorLastPurchaseCost)
								'No Vendor Last Purchase cost then use the Burden Cost from WO Sequence
								F.Intrinsic.Control.If(v.Local.sVendorCurrency,=,v.Global.sComCurr)
									f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Local.fBurdenCost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
								F.Intrinsic.Control.Else
									f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
								F.Intrinsic.Control.EndIf
'								F.Data.DataTable.AcceptChanges("dtAllM")
							F.Intrinsic.Control.Else
								'Use the Vendor Last Purchase Cost
								f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0)	
'								F.Data.DataTable.AcceptChanges("dtAllM")
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							'Recalculate Purchase Qty
							f.Intrinsic.Control.If(v.Args.Conversion,>,0.00000)
								f.Intrinsic.Math.Div(v.Local.fPurQty,v.Args.Conversion,v.Local.fPurQty)
								f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
								f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
								f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
							f.Intrinsic.Control.EndIf

							'Populate with Vendor Quote Cost
							f.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"PURUM",v.Args.PurUM,"PUR_CNV_FACTOR",v.Args.Conversion,"PUR_QTY",v.Local.fPurQty)
'							F.Data.DataTable.AcceptChanges("dtAllM")

							F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldValTrim,<>,"")								
								F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Local.iRowIndex).LINEDUE!FieldVal,v.Local.sTempDate)
								F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
									F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
									F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Local.iRowIndex).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
									F.Data.DataTable.SetValue("dtAllM",V.Local.iRowIndex,"ORDER_REQD_DATE",V.Local.dTempDate)
'									F.Data.DataTable.AcceptChanges("dtAllM")
								F.Intrinsic.Control.EndIf
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
						'Modified by TDjohan - END (04/06/2022)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf	
			f.Intrinsic.Control.EndIf		
			
		F.Intrinsic.Control.CaseAny("TEXT","text")			
			F.Intrinsic.Control.If(v.Local.sPO.Trim,=,"")
				f.Intrinsic.UI.Msgbox("Purchase Order not found.")
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("SELECT * FROM PO_LN_TEXT WHERE PO_NUM='{0}' AND LINE='{1}0'",v.LOCAL.sPO,v.Local.sPOLine,v.Local.ssql)
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sret)
				f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"")
					F.Intrinsic.String.Build("UPDATE PO_LN_TEXT SET TEXT='{0}' WHERE PO_NUM='{1}' AND LINE='{2}0'",v.Args.value.PSQLFriendly,v.Local.sPO,v.Local.sPOLine,v.Local.sSQL)
					f.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.Else
					F.Intrinsic.String.Build("INSERT INTO PO_LN_TEXT (PO_NUM,LINE,TEXT) VALUES('{0}','{1}0','{2}')",v.Local.sPO,v.Local.sPOLine,v.Args.value.PSQLFriendly,v.Local.sSQL)
					f.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
	
		F.Intrinsic.Control.CaseAny("SALES_ORDER","sales_order")
			'Set Row Change and SO Number
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
			V.Local.sSONum.Set(V.Args.VALUE)
			f.Intrinsic.String.LPad(v.Local.sSONum,"0",7,v.Local.sSONum)
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"SALES_ORDER",v.Local.sSONum)
			
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALES_ORDER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sSONum,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Sales Order","Notes",v.Local.sSONum)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Run the query to grab the pertinent fields
			F.Intrinsic.String.Build("select CUSTOMER, CUSTOMER_PO, SALESPERSON, PROJECT from V_ORDER_HEADER where ORDER_NO='{0}'",v.Local.sSONum,v.Local.sSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.sSQL,v.Local.sret)
			f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
			v.Local.sCust.Set(v.Local.sret(0))
			v.Local.sCustPO.Set(v.Local.sret(1))
			v.Local.sSP.Set(v.Local.sret(2))
			v.Local.sProj.Set(v.Local.sret(3))
			
			'Do Project
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PROJECT='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sProj.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Project","Notes",v.Local.sProj)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Sales Person
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALESPERSON='{0}', SALESPERSON_OLD='{1}' WHERE JOB='{2}' AND SUFFIX='{3}'",v.Local.sSP.Trim,v.Local.sSP.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Salesperson","Notes",v.Local.sSP)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Customer PO
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER_PO='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sCustPO.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Cust PO","Notes",v.Local.sCustPO)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Name of Customer
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sCust.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Customer","Notes",v.Local.sCust)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
		F.Intrinsic.Control.CaseAny("WO_6271_NOTES")
			v.Local.sTextLbl.Set(v.DataTable.dtAllM(V.ARGS.ROWINDEX).WO_6271_NOTES!fieldvaltrim)
			F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
			F.Intrinsic.String.Build("SELECT * FROM GAB_6271_WO_NOTES WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}';",V.Local.sWO,V.Local.sSuf,v.Local.sSeq,V.Local.sSQL)
			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
				F.Intrinsic.String.Build("INSERT INTO GAB_6271_WO_NOTES(JOB,SUFFIX,SEQ,NOTES) VALUES('{0}','{1}','{2}','{3}');",V.Local.sWO,V.Local.sSuf,v.Local.sSeq,V.Local.sTextTbl,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(Insert_6271_Note,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"SEQ",v.Local.sSeq,"Field","6271 Note","Notes",v.Local.sTextTbl)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("UPDATE GAB_6271_WO_NOTES SET NOTES = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}' AND SEQ = '{3}';",V.Local.sTextTbl,V.Local.sWO,V.Local.sSuf,v.Local.sSeq,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(Insert_6271_Note,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"SEQ",v.Local.sSeq,"Field","6271 Note","Notes",v.Local.sTextTbl)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstNotes.Close
		
	F.Intrinsic.Control.EndSelect
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcAllM_CellValueChanged.End

Program.Sub.gsgcOper_RowCellClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sJob.Declare
	v.Local.sSuf.Declare
	v.Local.sSOH.Declare
	v.Local.sSOL.Declare
	v.Local.sPart.Declare
	v.Local.sLoc.Declare
	V.Local.sParams.Declare
	V.Local.iDayTrf.Declare
	V.Local.iMonthTrf.Declare
	V.Local.iYearTrf.Declare
	V.Local.sSQL.Declare
	V.Local.sWC.Declare
	V.Local.sWG.Declare
	V.Local.iPID.Declare
	V.Local.sGabFile.Declare
	V.Local.sHold.Declare
	v.Local.sWOLabel.Declare
	v.Local.sLinkID.Declare
	v.Local.iLinkID.Declare
	V.Local.iHold.Declare
	V.Local.bHold.Declare
	V.Local.bRel.Declare
	V.Local.iRet.Declare
	v.Local.bEdit.Declare
	v.Local.iRefID.Declare

	'f.Intrinsic.Control.BlockEvents
	F.Intrinsic.Control.SelectCase(v.Args.Column)
		F.Intrinsic.Control.CaseAny("Part","PART")
			f.Intrinsic.Control.If(v.Global.bLongPart)
				f.Global.Inventory.GetGSSPart(v.Args.cellvalue,"",v.Local.sPart)
				F.Intrinsic.String.Build("{0}!*!{1}!*!M",v.Local.sPart,"",V.Local.sParams)
				F.Global.General.CallWrapperSync(300011,V.Local.sParams)
				gui.FrmMaster..SetFocus
			f.Intrinsic.Control.Else
				v.Local.sPart.Set(v.Args.callvalue)
				F.Intrinsic.String.Build("{0}!*!{1}!*!M",v.Local.sPart,"",V.Local.sParams)
				F.Global.General.CallWrapperSync(300011,V.Local.sParams)
				gui.FrmMaster..SetFocus
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.caseany("PrtDocCntrl")
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","PART",V.Args.RowIndex,V.Local.sPart)
			f.Global.DocumentControl.GetLinkID(v.Local.sPart.Trim,30,v.Local.iRefID)
			f.Intrinsic.Control.If(v.Local.irefid,=,-1)
				F.ODBC.Connection!con.ExecuteAndReturn("SELECT MAX(LINK_ID) AS 'LinkID' FROM LINK_DATA",v.Local.sLinkID)
				f.Intrinsic.Math.ConvertToLong(v.Local.sLinkID,v.Local.iLinkID)
				f.Intrinsic.Math.Add(v.Local.iLinkID,1,v.Local.iLinkID)
				f.Intrinsic.string.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				V.Local.iRefID.Set(v.Local.iLinkID)
				F.Global.DocumentControl.CreateReference(V.Local.sPart,"00030",V.Local.iRefID)
			f.Intrinsic.Control.EndIf
			F.Global.DocumentControl.Invoke(V.Local.sPart,30,"(Inventory Master)",V.Local.iPID)
			
		F.Intrinsic.Control.CaseAny("WO_LABEL","WO_Label")
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","WO_Label",V.Args.RowIndex,V.Local.sWOLabel)
			f.Intrinsic.String.Split(v.Local.sWOLabel,"-",v.Local.sWOLabel)
			v.Local.sJob.Set(v.Local.sWOLabel(0))
			v.Local.sSuf.Set(v.Local.sWOLabel(1))
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
				F.Intrinsic.Control.If(v.Global.bEditWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(2009,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.Elseif(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optIssue.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.String.Build("{0}!*!{1}!*! !*! !*! !*! !*! ",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(450150,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Intrinsic.UI.Msgbox("Print Audit Trail?","Print",4,V.Local.iRet)
						F.Intrinsic.Control.If(V.Local.iRet,=,6)
							F.Global.General.CallWrapperSync(50,"JB0057")
						F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndSelect
				
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optWiptoFG.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.Date.Day(V.Ambient.Date,V.Local.iDayTrf)
				F.Intrinsic.Date.Month(V.Ambient.Date,V.Local.iMonthTrf)
				F.Intrinsic.Date.Year(V.Ambient.Date,V.Local.iYearTrf)
				F.Intrinsic.String.Build("{0}!*!{1}!*!{2}!*!OS!*!!*!!*!!*!!*!!*!!*!{3}!*!{4}!*!16!*!03!*!02!*!!*!!*!!*!!*!!*!!*!!*!!*!!*!",V.Caller.CompanyCode,V.Caller.Terminal,V.Caller.Caller,V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(2003,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
				F.Intrinsic.Control.EndSelect
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Case("DISPLAY_PART")
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","PART",V.Args.RowIndex,V.Local.sPart)
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","LOCATION",V.Args.RowIndex,V.Local.sLoc)
			F.Intrinsic.Control.If(V.Local.sPart,<>,"MULTI-PART")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,True)
					f.Intrinsic.Control.If(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.Global.bEditPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!M",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.Elseif(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'Load Multi-Part screen
				f.Intrinsic.Control.If(v.Global.bViewPart)
					Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","JOB",V.Args.RowIndex,V.Local.sJob)
					Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
					Gui.FrmMaster..Enabled(False)
					f.Intrinsic.Control.CallSub(LoadMultiPart,"Job",V.Local.sJob,"Suffix",V.Local.sSuf)
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("Printed","PRINTED","Print","PRINT")
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","JOB",V.Args.RowIndex,v.Local.sJob)
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","SUFFIX",V.Args.RowIndex,v.Local.sSuf)
			f.Intrinsic.Control.If(v.Local.sJob.Trim,<>,"")
				F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_WO_PRTD = 'Y' WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("{0}!*!{1}!*!1811",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				F.Global.General.CallWrapperSync(900100,V.Local.sParams)
			f.Intrinsic.Control.Else
				f.Intrinsic.UI.Msgbox("No work order for the selected line")
			f.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("CUR_OPER","NEXT_OPER")
			F.Intrinsic.Control.If(V.Global.bExists)
			f.Intrinsic.Control.AndIf(v.Global.bReplUpdReschedUtility,=,True)
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)				
					F.Intrinsic.String.Build("SELECT MACHINE FROM WORKCENTERS WHERE MACHINE = '{0}';",V.Args.CellValue,V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWC)
					F.Intrinsic.Control.If(V.Local.sWC,<>,"")
						F.Global.General.SetPassedDataElement("WC",V.Local.sWC)
						F.Intrinsic.String.Build("{0}\PPT_Repl_Upd_Resched_Utility.g2u",V.Caller.GasDir,V.Local.sGabFile)
						F.Global.General.CallAsyncGAS(V.Local.sGabFile,V.Local.iPID)
						F.Global.General.ResetPassedDataElements
						'gui.FrmMaster.cmdAllData.BackColor(255)
						'Gui.FrmMaster.lblStatus.ForeColor(255)
						'Gui.FrmMaster.lblStatus.Caption("NOTE: Refresh Open Work Orders to pickup changes from WC Dashboard")
						'Gui.FrmMaster.lblStatus.Visible(True)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("SELECT WORK_GROUP FROM WORKGROUP_HEAD WHERE WORK_GROUP = '{0}';",V.Args.CellValue,V.Local.sSQL)
						F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWG)
						F.Intrinsic.Control.If(V.Local.sWG,<>,"")
							F.Global.General.SetPassedDataElement("WG",V.Local.sWG)
							F.Intrinsic.String.Build("{0}\PPT_Repl_Upd_Resched_Utility.g2u",V.Caller.GasDir,V.Local.sGabFile)
							F.Global.General.CallSyncGAS(V.Local.sGabFile,V.Local.iPID)
							F.Global.General.ResetPassedDataElements
							'gui.FrmMaster.cmdAllData.BackColor(255)
							'Gui.FrmMaster.lblStatus.ForeColor(255)
							'Gui.FrmMaster.lblStatus.Caption("NOTE: Refresh Open Work Orders to pickup changes from WC Dashboard")
							'Gui.FrmMaster.lblStatus.Visible(True)
						F.Intrinsic.Control.Else
							F.Intrinsic.UI.Msgbox("Not a valid WC or WG.","WC/WG Check")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Case("FLAG_HOLD")
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
			f.Intrinsic.Control.AndIf(v.Global.bEditWO)
				Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","JOB",V.Args.RowIndex,V.Local.sJob)
				Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Args.CellValue)
					V.Local.sHold.Set("N")
					V.Local.iHold.Set(0)
					V.Local.bHold.Set(False)
					Gui.FrmMaster.gsgcOper.SetCellValueByColumnName("gvOper","FLAG_HOLD",V.Args.RowIndex,False)
				F.Intrinsic.Control.Else
					V.Local.sHold.Set("Y")
					V.Local.iHold.Set(1)
					V.Local.bHold.Set(True)
					Gui.FrmMaster.gsgcOper.SetCellValueByColumnName("gvOper","FLAG_HOLD",V.Args.RowIndex,True)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_HOLD = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Local.sHold,V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("UPDATE APSV3_JBMASTER SET HOLD = '{0}' WHERE JOB = '{1}' AND SFX = '{2}';",V.Local.iHold,V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.CallSub(checkflag,"WO",V.Local.sJob,"Suf",V.Local.sSuf,"bFlag",V.Local.bHold,"GV","gvOper","Flag","FLAG_HOLD")
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Case("RELEASED")
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
			f.Intrinsic.Control.AndIf(v.Global.bEditWO)
				Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","JOB",V.Args.RowIndex,V.Local.sJob)
				Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Args.CellValue,=,False)
					F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_WO_RELEASED = 'Y', DATE_RELEASED = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Ambient.Date.FormatMMDDYY,V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					V.Local.bRel.Set(True)
					Gui.FrmMaster.gsgcOper.SetCellValueByColumnName("gvOper","RELEASED",V.Args.RowIndex,True)
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_WO_RELEASED = '', DATE_RELEASED = '000000' WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					V.Local.bRel.Set(False)
					Gui.FrmMaster.gsgcOper.SetCellValueByColumnName("gvOper","RELEASED",V.Args.RowIndex,False)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.CallSub(checkflag,"WO",V.Local.sJob,"Suf",V.Local.sSuf,"bFlag",V.Local.bRel,"GV","gvOper","Flag","FLAG_REL")
			F.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.Case("SALES_ORDER_LINE")
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","SALES_ORDER",V.Args.RowIndex,V.Local.sSOH)
			Gui.FrmMaster.gsgcOper.GetCellValueByColumnName("gvOper","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSOL)
			f.Intrinsic.Control.If(v.Local.sSOH.Trim,<>,"")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bEditSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"O","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				f.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optView.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bViewSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"V","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)	
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndSelect
			
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcOper_RowCellClick.End

Program.Sub.GsGCAll_RowCellClick.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	v.Local.sJob.Declare
	v.Local.sSuf.Declare
	v.Local.sSOH.Declare
	v.Local.sSOL.Declare
	v.Local.sPart.Declare
	v.Local.sLoc.Declare
	V.Local.sParams.Declare
	V.Local.iDayTrf.Declare
	V.Local.iMonthTrf.Declare
	V.Local.iYearTrf.Declare
	V.Local.sSQL.Declare
	V.Local.sWC.Declare
	V.Local.sWG.Declare
	V.Local.iPID.Declare
	V.Local.sGabFile.Declare
	V.Local.sHold.Declare
	v.Local.sWOLabel.Declare
	v.Local.sLinkID.Declare
	v.Local.iLinkID.Declare
	V.Local.iHold.Declare
	V.Local.bHold.Declare
	V.Local.bRel.Declare
	V.Local.iRet.Declare
	v.Local.bEdit.Declare
	v.Local.iRefID.Declare
	

	'f.Intrinsic.Control.BlockEvents
	F.Intrinsic.Control.SelectCase(v.Args.Column)
		F.Intrinsic.Control.CaseAny("Part","PART")
			f.Intrinsic.Control.If(v.Global.bLongPart)
				f.Global.Inventory.GetGSSPart(v.Args.cellvalue,"",v.Local.sPart)
				F.Intrinsic.String.Build("{0}!*!{1}!*!M",v.Local.sPart,"",V.Local.sParams)
				F.Global.General.CallWrapperSync(300011,V.Local.sParams)
				gui.FrmMaster..SetFocus
			f.Intrinsic.Control.Else
				v.Local.sPart.Set(v.Args.CELLVALUE)
				F.Intrinsic.String.Build("{0}!*!{1}!*!M",v.Local.sPart,"",V.Local.sParams)
				F.Global.General.CallWrapperSync(300011,V.Local.sParams)
				gui.FrmMaster..SetFocus
			f.Intrinsic.Control.EndIf
			
'		f.Intrinsic.Control.caseany("SALES_ORDER","SALES_ORDER_LINE")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sSOH)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSOL)
'			f.Intrinsic.Control.If(v.Local.sSOH.Trim,<>,"")
'				F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
'				 	F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"O","*!*ZDR*!*",V.Local.sParams)
'					F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
'				f.Intrinsic.Control.Else
'					F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"V","*!*ZDR*!*",V.Local.sParams)
'					F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
'				F.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.Case("SALES_ORDER_LINE")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sSOH)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSOL)
'			f.Intrinsic.Control.If(v.Local.sSOH.Trim,<>,"")
'				F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
'				 	F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"O","*!*ZDR*!*",V.Local.sParams)
'					F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
'				f.Intrinsic.Control.Else
'					F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"V","*!*ZDR*!*",V.Local.sParams)
'					F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
'				F.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Case("SALES_ORDER_LINE")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sSOH)
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSOL)
			f.Intrinsic.Control.If(v.Local.sSOH.Trim,<>,"")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bEditSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"O","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				f.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optView.Value,=,"True")
					F.Intrinsic.Control.If(v.Global.bViewSO)
						F.Intrinsic.String.ConcatCallWrapperArgs(V.Local.sSOH,"V","*!*ZDR*!*",V.Local.sParams)
						F.Global.General.CallWrapperAsync(200000,V.Local.sParams)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.caseany("PrtDocCntrl")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","PART",V.Args.RowIndex,V.Local.sPart)
			f.Global.DocumentControl.GetLinkID(v.Local.sPart.Trim,30,v.Local.iRefID)
			f.Intrinsic.Control.If(v.Local.irefid,=,-1)
				F.ODBC.Connection!con.ExecuteAndReturn("SELECT MAX(LINK_ID) AS 'LinkID' FROM LINK_DATA",v.Local.sLinkID)
				f.Intrinsic.Math.ConvertToLong(v.Local.sLinkID,v.Local.iLinkID)
				f.Intrinsic.Math.Add(v.Local.iLinkID,1,v.Local.iLinkID)
				f.Intrinsic.string.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				V.Local.iRefID.Set(v.Local.iLinkID)
				F.Global.DocumentControl.CreateReference(V.Local.sPart,"00030",V.Local.iRefID)
			f.Intrinsic.Control.EndIf
			F.Global.DocumentControl.Invoke(V.Local.sPart,30,"(Inventory Master)",V.Local.iPID)
			
		F.Intrinsic.Control.CaseAny("WO_LABEL","WO_Label")		
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","WO_Label",V.Args.RowIndex,V.Local.sWOLabel)
			f.Intrinsic.String.Split(v.Local.sWOLabel,"-",v.Local.sWOLabel)
			v.Local.sJob.Set(v.Local.sWOLabel(0))
			v.Local.sSuf.Set(v.Local.sWOLabel(1))
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sJob)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optEdit.Value,=,"True")
				F.Intrinsic.Control.If(v.Global.bEditWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(2009,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.Elseif(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optIssue.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.String.Build("{0}!*!{1}!*! !*! !*! !*! !*! ",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(450150,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Intrinsic.UI.Msgbox("Print Audit Trail?","Print",4,V.Local.iRet)
						F.Intrinsic.Control.If(V.Local.iRet,=,6)
							F.Global.General.CallWrapperSync(50,"JB0057")
						F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndSelect
				
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.ElseIf(V.Screen.FrmMaster!optWiptoFG.Value,=,"True")
				'Build Call Wrapper String
				F.Intrinsic.Date.Day(V.Ambient.Date,V.Local.iDayTrf)
				F.Intrinsic.Date.Month(V.Ambient.Date,V.Local.iMonthTrf)
				F.Intrinsic.Date.Year(V.Ambient.Date,V.Local.iYearTrf)
				F.Intrinsic.String.Build("{0}!*!{1}!*!{2}!*!OS!*!!*!!*!!*!!*!!*!!*!{3}!*!{4}!*!16!*!03!*!02!*!!*!!*!!*!!*!!*!!*!!*!!*!!*!",V.Caller.CompanyCode,V.Caller.Terminal,V.Caller.Caller,V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				Gui.FrmMaster..Enabled(False)
				F.Global.General.CallWrapperSync(2003,V.Local.sParams)
				F.Intrinsic.Control.SelectCase(V.Global.iPrintAudit)
					F.Intrinsic.Control.Case(1)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
					F.Intrinsic.Control.Case(2)
						'Do Not Print
					F.Intrinsic.Control.Case(3)
						F.Global.General.CallWrapperSync(50,"JB0057/C")
				F.Intrinsic.Control.EndSelect
				gui.FrmMaster..SetFocus
				Gui.FrmMaster..Enabled(True)
			F.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Global.bViewWO)
					'Build Call Wrapper String
					F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
					Gui.FrmMaster..Enabled(False)
					F.Global.General.CallWrapperSync(450000,V.Local.sParams)
					gui.FrmMaster..SetFocus
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Case("DISPLAY_PART")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","PART",V.Args.RowIndex,V.Local.sPart)
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","LOCATION",V.Args.RowIndex,V.Local.sLoc)
			F.Intrinsic.Control.If(V.Local.sPart,<>,"MULTI-PART")
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,True)
					f.Intrinsic.Control.If(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.Global.bEditPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!M",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.Elseif(v.Global.bViewPart)
						F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
						Gui.FrmMaster..Enabled(False)
						F.Global.General.CallWrapperSync(300011,V.Local.sParams)
						gui.FrmMaster..SetFocus
						Gui.FrmMaster..Enabled(True)
					f.Intrinsic.Control.EndIf					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'Load Multi-Part screen
				f.Intrinsic.Control.If(v.Global.bViewPart)
					Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sJob)
					Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
					Gui.FrmMaster..Enabled(False)
					f.Intrinsic.Control.CallSub(LoadMultiPart,"Job",V.Local.sJob,"Suffix",V.Local.sSuf)
					Gui.FrmMaster..Enabled(True)
				f.Intrinsic.Control.EndIf				
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("Printed","PRINTED","Print","PRINT")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,v.Local.sJob)
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,v.Local.sSuf)
			f.Intrinsic.Control.If(v.Local.sJob.Trim,<>,"")
				F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_WO_PRTD = 'Y' WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("{0}!*!{1}!*!1811",V.Local.sJob,V.Local.sSuf,V.Local.sParams)
				F.Global.General.CallWrapperSync(900100,V.Local.sParams)
			f.Intrinsic.Control.Else
				f.Intrinsic.UI.Msgbox("No work order for the selected line")
			f.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("CUR_OPER","NEXT_OPER")
			F.Intrinsic.Control.If(V.Global.bExists)
			f.Intrinsic.Control.AndIf(v.Global.bReplUpdReschedUtility,=,True)
				F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)				
					F.Intrinsic.String.Build("SELECT MACHINE FROM WORKCENTERS WHERE MACHINE = '{0}';",V.Args.CellValue,V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWC)
					F.Intrinsic.Control.If(V.Local.sWC,<>,"")
						F.Global.General.SetPassedDataElement("WC",V.Local.sWC)
						F.Intrinsic.String.Build("{0}\PPT_Repl_Upd_Resched_Utility.g2u",V.Caller.GasDir,V.Local.sGabFile)
						F.Global.General.CallAsyncGAS(V.Local.sGabFile,V.Local.iPID)
						F.Global.General.ResetPassedDataElements
						'gui.FrmMaster.cmdAllData.BackColor(255)
						'Gui.FrmMaster.lblStatus.ForeColor(255)
						'Gui.FrmMaster.lblStatus.Caption("NOTE: Refresh Open Work Orders to pickup changes from WC Dashboard")
						'Gui.FrmMaster.lblStatus.Visible(True)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("SELECT WORK_GROUP FROM WORKGROUP_HEAD WHERE WORK_GROUP = '{0}';",V.Args.CellValue,V.Local.sSQL)
						F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWG)
						F.Intrinsic.Control.If(V.Local.sWG,<>,"")
							F.Global.General.SetPassedDataElement("WG",V.Local.sWG)
							F.Intrinsic.String.Build("{0}\PPT_Repl_Upd_Resched_Utility.g2u",V.Caller.GasDir,V.Local.sGabFile)
							F.Global.General.CallSyncGAS(V.Local.sGabFile,V.Local.iPID)
							F.Global.General.ResetPassedDataElements
							'gui.FrmMaster.cmdAllData.BackColor(255)
							'Gui.FrmMaster.lblStatus.ForeColor(255)
							'Gui.FrmMaster.lblStatus.Caption("NOTE: Refresh Open Work Orders to pickup changes from WC Dashboard")
							'Gui.FrmMaster.lblStatus.Visible(True)
						F.Intrinsic.Control.Else
							F.Intrinsic.UI.Msgbox("Not a valid WC or WG.","WC/WG Check")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Case("FLAG_HOLD")
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
			f.Intrinsic.Control.AndIf(v.Global.bEditWO)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sJob)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Args.CellValue)
					V.Local.sHold.Set("N")
					V.Local.iHold.Set(0)
					V.Local.bHold.Set(False)
					Gui.FrmMaster.GsGCAll.SetCellValueByColumnName("gvAll","FLAG_HOLD",V.Args.RowIndex,False)
				F.Intrinsic.Control.Else
					V.Local.sHold.Set("Y")
					V.Local.iHold.Set(1)
					V.Local.bHold.Set(True)
					Gui.FrmMaster.GsGCAll.SetCellValueByColumnName("gvAll","FLAG_HOLD",V.Args.RowIndex,True)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_HOLD = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Local.sHold,V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("UPDATE APSV3_JBMASTER SET HOLD = '{0}' WHERE JOB = '{1}' AND SFX = '{2}';",V.Local.iHold,V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.CallSub(checkflag,"WO",V.Local.sJob,"Suf",V.Local.sSuf,"bFlag",V.Local.bHold,"GV","gvAll","Flag","FLAG_HOLD")
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.Case("RELEASED")
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
			f.Intrinsic.Control.AndIf(v.Global.bEditWO)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sJob)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Args.CellValue,=,False)
					F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_WO_RELEASED = 'Y', DATE_RELEASED = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Ambient.Date.FormatMMDDYY,V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					V.Local.bRel.Set(True)
					Gui.FrmMaster.GsGCAll.SetCellValueByColumnName("gvAll","RELEASED",V.Args.RowIndex,True)
				F.Intrinsic.Control.Else
					F.Intrinsic.String.Build("UPDATE JOB_HEADER SET FLAG_WO_RELEASED = '', DATE_RELEASED = '000000' WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sJob,V.Local.sSuf,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					V.Local.bRel.Set(False)
					Gui.FrmMaster.GsGCAll.SetCellValueByColumnName("gvAll","RELEASED",V.Args.RowIndex,False)
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.CallSub(checkflag,"WO",V.Local.sJob,"Suf",V.Local.sSuf,"bFlag",V.Local.bRel,"GV","gvAll","Flag","FLAG_REL")
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.Case("PURCHASE_ORDER2")
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
			f.Intrinsic.Control.AndIf(v.Global.bEditWO)
				F.Intrinsic.String.Concat("O!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
				F.Global.General.CallWrapperASync(175200,V.Local.sParams)
			f.Intrinsic.Control.Else
				F.Intrinsic.String.Concat("V!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
				F.Global.General.CallWrapperASync(175200,V.Local.sParams)
			F.Intrinsic.Control.EndIf
			
						
		F.Intrinsic.Control.Case("PURCHASE_ORDER")
			F.Intrinsic.Control.If(V.Screen.FrmMaster!optView.Value,=,False)
			f.Intrinsic.Control.AndIf(v.Global.bEditWO)
				F.Intrinsic.String.Concat("O!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
				F.Global.General.CallWrapperASync(175200,V.Local.sParams)
			f.Intrinsic.Control.Else
				F.Intrinsic.String.Concat("V!*!",v.Args.cellvalue,"!*!",V.Local.sParams)
				F.Global.General.CallWrapperASync(175200,V.Local.sParams)
			F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.EndSelect
	
	'f.Intrinsic.Control.UnBlockEvents
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.GsGCAll_RowCellClick.End

Program.Sub.cmdSave_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	v.Local.sWO.Declare
	v.Local.sSuf.Declare
	v.Local.sTextLbl.Declare
	v.Local.sQueries.Declare
	v.Local.srows.Declare
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving Records to Database.")
	f.Intrinsic.String.Split(v.Global.sSQLQueries,";",v.local.sQueries)
	f.Intrinsic.Control.For(v.Local.i,0,v.local.sQueries.UBound,1)
		f.Intrinsic.Control.If(v.Local.sQueries(v.Local.i).trim,<>,"")
			f.ODBC.Connection!con.execute(v.Local.sQueries(v.Local.i))
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.String.Split(v.Global.sRows,";",v.local.sRows)
	f.Intrinsic.Control.For(v.Local.i,0,v.Local.sRows.UBound,1)
		f.Intrinsic.Control.If(v.Local.srows(v.Local.i).trim,<>,"")
			f.Data.DataTable.SetValue("dtAll2",v.Local.sRows(v.Local.i),"RowChange","")
		f.Intrinsic.control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	v.Global.sSQLQueries.Set("")
	v.Global.sRows.Set("")
	
	f.Intrinsic.UI.CloseWaitDialog
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSave_Click.End

Program.Sub.InsertNote.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.SSQL.Declare
	f.Intrinsic.String.Build("INSERT INTO GAB_4169_WO_NOTESLOG (JOB,SUFFIX,FIELD,NOTES,USERID) VALUES ('{0}','{1}','{2}','{3}','{4}')",v.Args.Job,v.Args.Suffix,v.Args.Field,v.Args.notes,v.Caller.User,v.Local.SSQL)
	f.ODBC.Connection!con.Execute(v.Local.ssql)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.InsertNote.End

Program.Sub.Insert_6271_Note.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.SSQL.Declare
	f.Intrinsic.String.Build("INSERT INTO GAB_6271_WO_NOTESLOG (JOB,SUFFIX,SEQ,FIELD,NOTES,USERID) VALUES ('{0}','{1}','{2}','{3}','{4}','{5}')",v.Args.Job,v.Args.Suffix,v.Args.Seq,v.Args.Field,v.Args.notes,v.Caller.User,v.Local.SSQL)
	f.ODBC.Connection!con.Execute(v.Local.ssql)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.Insert_6271_Note.End

Program.Sub.GsGCAll_CellValueChanged.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sWO.Declare
	V.Local.sSuf.Declare
	V.Local.sSQL.Declare
	V.Local.sText.Declare
	V.Local.sTextLbl.Declare
	v.Local.sTextTbl.Declare
	v.Local.sTextTbl.Redim(0,1)
	v.Local.sName.Declare
	V.Local.sHold.Declare
	V.Local.iHold.Declare
	v.Local.sret.Declare
	v.Local.sCust.Declare
	v.Local.lSize.Declare
	V.Local.sSONum.Declare
	v.local.sCustPO.Declare
	v.Local.sSP.Declare
	v.Local.sProj.Declare

	Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
	Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf) 
	
	F.Intrinsic.Control.SelectCase(V.Args.column)
'		F.Intrinsic.Control.CaseAny("SELECTWO","SelectWO")
'			f.Intrinsic.Control.If(V.DataTable.dtAll2(V.Args.RowIndex).SelectWO!FieldVal,=,False)
'				F.Data.DataTable.SetValue("dtAll2",v.Args.RowIndex,"SelectWO",True)
'				gui.FrmMaster.GsGCAll.SetRowAppearance("gvAll",v.Args.RowIndex,"BackColor",v.Color.ManhattanMist)
'			f.Intrinsic.Control.Else
'				F.Data.DataTable.SetValue("dtAll2",v.Args.RowIndex,"SelectWO",False)
'				gui.FrmMaster.GsGCAll.SetRowAppearance("gvAll",v.Args.RowIndex,"BackColor","none")
'			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("SALES_ORDER","sales_order")
			'Set Row Change and SO Number
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
			V.Local.sSONum.Set(V.Args.VALUE)
			f.Intrinsic.String.LPad(v.Local.sSONum,"0",7,v.Local.sSONum)
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"SALES_ORDER",v.Local.sSONum)
			
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALES_ORDER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sSONum,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			F.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Sales Order","Notes",v.Local.sSONum)
			
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Run the query to grab the pertinent fields
			F.Intrinsic.String.Build("select CUSTOMER, CUSTOMER_PO, SALESPERSON,PROJECT from v_ORDER_HEADER where ORDER_NO='{0}'",v.Local.sSONum,v.Local.sSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.sSQL,v.Local.sret)
			f.Intrinsic.String.Split(v.Local.sret,"*!*",v.Local.sret)
			v.Local.sCust.Set(v.Local.sret(0))
			v.Local.sCustPO.Set(v.Local.sret(1))
			v.Local.sSP.Set(v.Local.sret(2))
			v.Local.sProj.Set(v.Local.sret(3))

			'Do Project
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PROJECT='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sProj.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			F.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Project","Notes",v.Local.sProj)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Sales Person
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALESPERSON='{0}', SALESPERSON_OLD='{1}' WHERE JOB='{2}' AND SUFFIX='{3}'",v.Local.sSP.Trim,v.Local.sSP.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			F.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Sales Person","Notes",v.Local.sSP)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Customer PO
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER_PO='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sCustPO.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			F.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Customer PO","Notes",v.Local.sCustPO)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
			'Do Name of Customer
			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sCust.Trim,v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			F.ODBC.Connection!con.Execute(v.Local.sSQL)
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Customer","Notes",v.Local.sCust)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			
		
		F.Intrinsic.Control.CaseAny("PHASE","Phase")
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
			v.Local.sTextLbl.Set(v.DataTable.dtAll2(V.ARGS.ROWINDEX).PHASE!fieldvaltrim)
			F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
			'f.Intrinsic.String.Split(v.Local.sTextTbl,"~",v.Local.sTextTbl)
			F.Intrinsic.Control.If(v.Local.sTextTbl.UBound,=,0)
				f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PHASE='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'","",v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PHASE='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!con.Execute(v.Local.sSQL)
			
			f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","Phase","Notes",v.Local.sTextTbl)
			'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
			'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
	
		F.Intrinsic.Control.CaseAny("WO_NOTE")
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
			v.Local.sTextLbl.Set(v.DataTable.dtAll2(V.ARGS.ROWINDEX).WO_NOTE!fieldvaltrim)
			F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
			F.Intrinsic.String.Build("SELECT * FROM GAB_4169_WO_NOTES WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
				F.Intrinsic.String.Build("INSERT INTO GAB_4169_WO_NOTES(JOB,SUFFIX,NOTES) VALUES('{0}','{1}','{2}');",V.Local.sWO,V.Local.sSuf,V.Local.sTextTbl,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","WO Note","Notes",v.Local.sTextTbl)
				'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
				'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("UPDATE GAB_4169_WO_NOTES SET NOTES = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Local.sTextTbl,V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","WO Note","Notes",v.Local.sTextTbl)
				'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
				'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstNotes.Close

		F.Intrinsic.Control.CaseAny("WO_NOTE2")
			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
			v.Local.sTextLbl.Set(v.DataTable.dtAll2(V.ARGS.ROWINDEX).WO_NOTE2!fieldvaltrim)
			F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
			F.Intrinsic.String.Build("SELECT * FROM WO_USER_FLDS WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
				F.Intrinsic.String.Build("INSERT INTO WO_USER_FLDS(JOB,SUFFIX,USER_6) VALUES('{0}','{1}','{2}');",V.Local.sWO,V.Local.sSuf,V.Local.sTextTbl,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","User 6","Notes",v.Local.sTextTbl)
				'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
				'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("UPDATE WO_USER_FLDS SET USER_6 = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Local.sTextTbl,V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","User 6","Notes",v.Local.sTextTbl)
				'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
				'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			F.Intrinsic.Control.EndIf
			F.ODBC.con!rstNotes.Close
			
		F.Intrinsic.Control.CaseAny("SOUSER_5")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sWO)
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSuf)
			f.Intrinsic.String.Build("SELECT * FROM V_ORDER_LINES WHERE ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
			f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
				f.Intrinsic.UI.Msgbox("Error: Sales Order not found in open sales.")
			f.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
				v.Local.sTextLbl.Set(v.DataTable.dtAll2(V.ARGS.ROWINDEX).SOUSER_5!fieldvaltrim)
				F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
				f.Intrinsic.String.Build("UPDATE ORDER_LINES SET USER_5='{0}' WHERE ORDER_NO='{1}' AND RECORD_NO='{2}0'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","SO User Field 5","Notes",v.Local.sTextTbl)
				'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
				'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("SOUSER_4")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sWO)
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSuf)
			f.Intrinsic.String.Build("SELECT * FROM V_ORDER_LINES WHERE ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
			f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
				f.Intrinsic.UI.Msgbox("Error: Sales Order not found in open sales.")
			f.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
				v.Local.sTextLbl.Set(v.DataTable.dtAll2(V.ARGS.ROWINDEX).SOUSER_4!fieldvaltrim)
				F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
				f.Intrinsic.String.Build("UPDATE ORDER_LINES SET USER_4='{0}' WHERE ORDER_NO='{1}' AND RECORD_NO='{2}0'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
				F.ODBC.Connection!con.Execute(v.Local.sSQL)
				f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","SO User Field 4","Notes",v.Local.sTextTbl)
				'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
				'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
			f.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CaseAny("SONotes")
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sWO)
			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSuf)
			f.Intrinsic.String.Build("SELECT * FROM V_ORDER_LINES WHERE ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
			f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
				f.Intrinsic.UI.Msgbox("Error: Sales Order not found in open sales.")
			f.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"RowChange","X")
				v.Local.sTextLbl.Set(v.DataTable.dtAll2(v.ARGS.ROWINDEX).SONOTES!fieldvaltrim)
				F.Intrinsic.String.Replace(V.local.sTextLbl,"'","''",V.Local.sTextTbl)
				F.Intrinsic.String.Build("SELECT * FROM GAB_4167_SO_NOTES WHERE SO = '{0}' AND SOLINE = '{1}';",V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
				F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
					f.Intrinsic.String.Build("INSERT INTO GAB_4167_SO_NOTES (Notes,SO,SOLINE) VALUES ('{0}','{1}','{2}')",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
					F.ODBC.Connection!con.Execute(v.Local.sSQL)
					f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","SO Notes","Notes",v.Local.sTextTbl)
					'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
					'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
				F.Intrinsic.Control.Else
					f.Intrinsic.String.Build("UPDATE GAB_4167_SO_NOTES SET Notes='{0}' WHERE SO='{1}' AND SOLINE='{2}'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
					F.ODBC.Connection!con.Execute(v.Local.sSQL)
					f.Intrinsic.Control.CallSub(InsertNote,"JOB",v.Local.sWO,"SUFFIX",v.Local.sSuf,"Field","SO Notes","Notes",v.Local.sTextTbl)
					'f.Intrinsic.String.Concat(v.Global.sSQLQueries,v.Local.sSQL,";",v.Global.sSQLQueries)
					'f.Intrinsic.String.Concat(v.Global.sRows,v.Args.rowindex,";",v.Global.sRows)
				F.Intrinsic.Control.EndIf
				F.ODBC.con!rstNotes.Close
			f.Intrinsic.Control.EndIf

			
	F.Intrinsic.Control.EndSelect
	

''''OLD LOGIC FOR UPDATING A CELL INSTANTLY, LEAVING BEHIND IN CASE IT NEEDS TO BE REFERRED AGAIN
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'	F.Intrinsic.Control.SelectCase(V.Args.column)
'		f.Intrinsic.Control.Case("SALESPERSON")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Intrinsic.String.Split(v.Local.sTextTbl,"~",v.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"Salesperson",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET SALESPERSON='{0}', SALESPERSON_OLD='{1}' WHERE JOB='{2}' AND SUFFIX='{3}'",v.Local.sTextTbl(1),v.Local.sTextTbl(0),v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'			f.ODBC.Connection!con.execute(v.Local.ssql)
'			
'		f.Intrinsic.Control.Case("SOUSER_5")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"SOUser_5",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("SELECT * FROM V_ORDER_LINES WHERE ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
'			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
'			f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
'				f.Intrinsic.UI.Msgbox("Warning: Sales Order not found in open sales.  Note will not be saved.")
'			f.Intrinsic.Control.EndIf
'			f.Intrinsic.String.Build("UPDATE ORDER_LINES SET USER_5='{0}' WHERE ORDER_NO='{1}' AND RECORD_NO='{2}0'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'			f.ODBC.Connection!con.execute(v.Local.ssql)
'			
'		f.Intrinsic.Control.Case("SOUSER_4")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"SOUser_4",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("SELECT * FROM V_ORDER_LINES WHERE ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
'			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
'			f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
'				f.Intrinsic.UI.Msgbox("Warning: Sales Order not found in open sales.  Note will not be saved.")
'			f.Intrinsic.Control.EndIf
'			f.Intrinsic.String.Build("UPDATE ORDER_LINES SET USER_4='{0}' WHERE ORDER_NO='{1}' AND RECORD_NO='{2}0'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'			f.ODBC.Connection!con.execute(v.Local.ssql)
'			
'		f.Intrinsic.Control.Case("SONotes")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SALES_ORDER_LINE",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"SONotes",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("SELECT * FROM V_ORDER_LINES WHERE ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.Local.sWO,v.Local.sSuf,v.Local.sSQL)
'			f.ODBC.Connection!con.executeandreturn(v.Local.ssql,v.Local.sret)
'			f.Intrinsic.Control.If(v.Local.sret.Trim,=,"")
'				f.Intrinsic.UI.Msgbox("Warning: Sales Order not found in open sales.")
'			f.Intrinsic.Control.EndIf
'			
'			F.Intrinsic.String.Build("SELECT * FROM GAB_4167_SO_NOTES WHERE SO = '{0}' AND SOLINE = '{1}';",V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
'			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
'			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
'				f.Intrinsic.String.Build("INSERT INTO GAB_4167_SO_NOTES (Notes,SO,SOLINE ) VALUES ('{0}','{1}','{2}')",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'				f.ODBC.Connection!con.execute(v.Local.ssql)
'			F.Intrinsic.Control.Else
'				f.Intrinsic.String.Build("UPDATE GAB_4167_SO_NOTES SET Notes='{0}' WHERE SO='{1}' AND SOLINE='{2}'",v.Local.sTextTbl,v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'				f.ODBC.Connection!con.execute(v.Local.ssql)
'			F.Intrinsic.Control.EndIf
'			
'		f.Intrinsic.Control.Case("NAME_CUSTOMER")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Intrinsic.String.Split(v.Local.sTextTbl,"~",v.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"NAME_CUSTOMER",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET CUSTOMER='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sTextTbl(1),v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'			f.ODBC.Connection!con.execute(v.Local.ssql)
'			
'		f.Intrinsic.Control.Case("PROJECT")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Intrinsic.String.Split(v.Local.sTextTbl,"~",v.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"PROJECT",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PROJECT='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sTextTbl(1),v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'			f.ODBC.Connection!con.execute(v.Local.ssql)
'		
'		f.Intrinsic.Control.Case("PHASE")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			f.Intrinsic.String.Split(v.Local.sTextTbl,"~",v.Local.sTextTbl)
'			f.Data.DataTable.SetValue("dtAll2",v.Args.rowindex,"PHASE",v.Local.sTextTbl)
'			f.Intrinsic.String.Build("UPDATE JOB_HEADER SET PHASE='{0}' WHERE JOB='{1}' AND SUFFIX='{2}'",v.Local.sTextTbl(1),v.Local.sWO,v.Local.sSuf,v.Local.ssql)
'			f.ODBC.Connection!con.execute(v.Local.ssql)
'			
'		F.Intrinsic.Control.Case("WO_NOTE")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Replace(V.Args.Value,"'","''",V.Local.sTextTbl)
'			F.Intrinsic.String.Build("SELECT * FROM GAB_4169_WO_NOTES WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
'			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
'			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
'				F.Intrinsic.String.Build("INSERT INTO GAB_4169_WO_NOTES(JOB,SUFFIX,NOTES) VALUES('{0}','{1}','{2}');",V.Local.sWO,V.Local.sSuf,V.Local.sTextTbl,V.Local.sSQL)
'				F.ODBC.Connection!con.Execute(V.Local.sSQL)
'			F.Intrinsic.Control.Else
'				F.Intrinsic.String.Build("UPDATE GAB_4169_WO_NOTES SET NOTES = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Local.sTextTbl,V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
'				F.ODBC.Connection!con.Execute(V.Local.sSQL)
'			F.Intrinsic.Control.EndIf
'			F.ODBC.con!rstNotes.Close
'			'F.Intrinsic.Control.CallSub(CheckNote,"Job",V.Local.sWO,"Suffix",V.Local.sSuf,"FieldName",V.Args.Column,"Text",V.Args.Value)

'		F.Intrinsic.Control.Case("WO_NOTE2")
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Args.RowIndex,V.Local.sWO)
'			Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Args.RowIndex,V.Local.sSuf)
'			F.Intrinsic.String.Left(V.Args.Value,70,V.Local.sText)
'			F.Intrinsic.String.Replace(V.Local.sText,"'","''",V.Local.sTextTbl)
'			F.Intrinsic.String.Build("SELECT * FROM WO_USER_FLDS WHERE JOB = '{0}' AND SUFFIX = '{1}';",V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
'			F.ODBC.Connection!con.OpenRecordsetRW("rstNotes",V.Local.sSQL)
'			F.Intrinsic.Control.If(V.ODBC.con!rstNotes.EOF,=,True)
'				F.Intrinsic.String.Build("INSERT INTO WO_USER_FLDS(JOB,SUFFIX,USER_6) VALUES('{0}','{1}','{2}');",V.Local.sWO,V.Local.sSuf,V.Local.sTextTbl,V.Local.sSQL)
'				F.ODBC.Connection!con.Execute(V.Local.sSQL)
'			F.Intrinsic.Control.Else
'				F.Intrinsic.String.Build("UPDATE WO_USER_FLDS SET USER_6 = '{0}' WHERE JOB = '{1}' AND SUFFIX = '{2}';",V.Local.sTextTbl,V.Local.sWO,V.Local.sSuf,V.Local.sSQL)
'				F.ODBC.Connection!con.Execute(V.Local.sSQL)
'			F.Intrinsic.Control.EndIf
'			F.ODBC.con!rstNotes.Close
'			'F.Intrinsic.Control.CallSub(CheckNote,"Job",V.Local.sWO,"Suffix",V.Local.sSuf,"FieldName",V.Args.Column,"Text",V.Local.sText)
'	F.Intrinsic.Control.EndSelect
'	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.GsGCAll_CellValueChanged.End

Program.Sub.LockScreen.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.tabProd.Enabled(false)
'	Gui.FrmMaster.frameButtons.Enabled(False)
'	Gui.FrmMaster.framePermissions.Enabled(False)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.LockScreen.End

Program.Sub.EnableScreen.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
'	Gui.FrmMaster.frameButtons.Enabled(True)
'	Gui.FrmMaster.framePermissions.Enabled(True)
'	Gui.FrmMaster.lblStatus.Visible(False)
'	Gui.FrmMaster.pbStatus.Visible(False)
	gui.FrmMaster.tabProd.Enabled(true)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.EnableScreen.End

Program.Sub.tabMaster_Click.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare	
	
	Function.Intrinsic.Control.SelectCase(V.Screen.FrmMaster!tabMaster.Tab)
		Function.Intrinsic.Control.Case(0)
			Gui.FrmMaster.txtLate.Visible(True)
		Function.Intrinsic.Control.Case(1)
			Gui.FrmMaster.txtLate.Visible(False)
		Function.Intrinsic.Control.Case(2)
			Gui.FrmMaster.txtLate.Visible(True)
	Function.Intrinsic.Control.EndSelect
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.tabMaster_Click.End

Program.Sub.CheckNote.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sFilter.Declare
	
	'dtAllShip
	F.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}'",V.Args.Job,V.Args.Suffix,V.Local.sFilter)
	F.Data.DataView.Create("dtAll2","dvNote",22,V.Local.sFilter,"")
	F.Data.DataView.SetValue("dtAll2","dvNote",-1,V.Args.FieldName,V.Args.Text)
	F.Data.DataView.Close("dtAll2","dvNote")
	
	'dtDueShip
	F.Intrinsic.String.Build("JOB = '{0}' AND SUFFIX = '{1}'",V.Args.Job,V.Args.Suffix,V.Local.sFilter)
	F.Data.DataView.Create("dtLate","dvNote",22,V.Local.sFilter,"")
	F.Data.DataView.SetValue("dtLate","dvNote",-1,V.Args.FieldName,V.Args.Text)
	F.Data.DataView.Close("dtLate","dvNote")
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.CheckNote.End

Program.Sub.picGSSLogo_DblClick.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	F.Intrinsic.Task.ShellExec(0,"Open","http://www.globalshopsolutions.com/login-customer","","",0)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.picGSSLogo_DblClick.End

Program.Sub.CheckFlag.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sWO.Declare
	V.Local.sSuf.Declare
	V.Local.iRows.Declare
	V.Local.iCnt.Declare

	F.Intrinsic.Control.If(V.Args.Flag,=,"FLAG_HOLD")
		F.Intrinsic.Control.If(V.Args.GV,=,"gvAll")
'			Gui.FrmMaster.GsGCLate.GetRowCount("gvLate",V.Local.iRows)
			F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
			F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.iRows,1)
'				Gui.FrmMaster.GsGCLate.GetCellValueByColumnName("gvLate","JOB",V.Local.iCnt,V.Local.sWO)
'				Gui.FrmMaster.GsGCLate.GetCellValueByColumnName("gvLate","SUFFIX",V.Local.iCnt,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Local.sWO,=,V.Args.WO)
				F.Intrinsic.Control.AndIf(V.Local.sSuf,=,V.Args.Suf)
'					Gui.FrmMaster.GsGCLate.SetCellValueByColumnName("gvLate","FLAG_HOLD",V.Local.iCnt,V.Args.bFlag)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.Control.Else
			Gui.FrmMaster.GsGCAll.GetRowCount("gvAll",V.Local.iRows)
			F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
			F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.iRows,1)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Local.iCnt,V.Local.sWO)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Local.iCnt,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Local.sWO,=,V.Args.WO)
				F.Intrinsic.Control.AndIf(V.Local.sSuf,=,V.Args.Suf)
					Gui.FrmMaster.GsGCAll.SetCellValueByColumnName("gvAll","FLAG_HOLD",V.Local.iCnt,V.Args.bFlag)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.If(V.Args.GV,=,"gvAll")
'			Gui.FrmMaster.GsGCLate.GetRowCount("gvLate",V.Local.iRows)
			F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
			F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.iRows,1)
'				Gui.FrmMaster.GsGCLate.GetCellValueByColumnName("gvLate","JOB",V.Local.iCnt,V.Local.sWO)
'				Gui.FrmMaster.GsGCLate.GetCellValueByColumnName("gvLate","SUFFIX",V.Local.iCnt,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Local.sWO,=,V.Args.WO)
				F.Intrinsic.Control.AndIf(V.Local.sSuf,=,V.Args.Suf)
'					Gui.FrmMaster.GsGCLate.SetCellValueByColumnName("gvLate","RELEASED",V.Local.iCnt,V.Args.bFlag)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.Control.Else
			Gui.FrmMaster.GsGCAll.GetRowCount("gvAll",V.Local.iRows)
			F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
			F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.iRows,1)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","JOB",V.Local.iCnt,V.Local.sWO)
				Gui.FrmMaster.GsGCAll.GetCellValueByColumnName("gvAll","SUFFIX",V.Local.iCnt,V.Local.sSuf)
				F.Intrinsic.Control.If(V.Local.sWO,=,V.Args.WO)
				F.Intrinsic.Control.AndIf(V.Local.sSuf,=,V.Args.Suf)
					Gui.FrmMaster.GsGCAll.SetCellValueByColumnName("gvAll","RELEASED",V.Local.iCnt,V.Args.bFlag)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.CheckFlag.End

Program.Sub.Serialize.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sSerialize.Declare
	
	Gui.FrmMaster.GsGCAll.Serialize("gvAll",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVALL",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	Gui.FrmMaster.GsGcOper.Serialize("gvOper",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVOPER",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	Gui.FrmMaster.GsGcAllM.Serialize("gvALLM",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVALLM",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	Gui.FrmMaster.GsGcAllO.Serialize("gvALLO",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVALLO",6271,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	'Save user's preference on Purchase Qty Condition
	f.Global.Registry.AddValue(v.Caller.User,v.Caller.CompanyCode,"PurQtyConditionFlag",6271,1000,False,"Serialize",v.Screen.FrmMaster!chkPurQtyCond.Value,0,-999.0,1/1/1980,12:00:00 AM)

	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.Deserialize.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sfile.Declare
	V.Local.sSerialize.Declare
	V.Local.sSerialize2.Declare
	v.Local.iCnt.Declare
	v.Local.lCol.Declare
	v.Local.sUserID.Declare
	v.Local.sSQL.Declare
	
	
	F.Global.Security.GetUserID(v.Caller.User.Trim,v.Caller.CompanyCode,v.Local.sUserID)
	
	'Delete old registry records
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVALL",6271,0,5,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize,<>,"")
		F.ODBC.Connection!common.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)
		f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = 6271 and Seq <= 1000;",v.Local.sUserID,v.Caller.CompanyCode,v.Local.sSQL)
		F.ODBC.Connection!common.Execute(V.Local.sSQL)
		F.ODBC.Connection!common.Close
	F.Intrinsic.Control.EndIf

	'GvAll
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVALL",6271,1000,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
		Gui.FrmMaster.GsGcAll.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
	'GvOper
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVOPER",6271,1000,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
		Gui.FrmMaster.GsGcOper.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
	'GvAllM
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVALLM",6271,1000,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
		Gui.FrmMaster.GsGcAllM.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
	'GvAllO
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVALLO",6271,1000,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
		Gui.FrmMaster.GsGcAllO.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.frmMulti_UnLoad.Start
	F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.frmMulti..Visible(False)
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		f.Intrinsic.Control.CallSub(frmMaster_unload)
	F.Intrinsic.Control.EndTry
Program.Sub.frmMulti_UnLoad.End

Program.Sub.LoadMultiPart.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sSQL.Declare
	V.Local.sCaption.Declare
	V.Local.sJob.Declare
	V.Local.sSuffix.Declare
	
	F.Intrinsic.Control.If(V.DataTable.dtMulti.Exists)
		F.Data.DataTable.Close("dtMulti")
	F.Intrinsic.Control.EndIf
	
	V.Local.sJob.Set(V.Args.Job)
	V.Local.sSuffix.Set(V.Args.Suffix)
	
	F.Intrinsic.Control.If(V.Local.sSuffix.Trim,=,"")
		F.Intrinsic.String.Build("Work Order: {0}",V.Local.sJob,V.Local.sCaption)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Work Order: {0}-{1}",V.Local.sJob,V.Local.sSuffix,V.Local.sCaption)
	F.Intrinsic.Control.EndIf
	Gui.frmMulti..Caption(V.Local.sCaption)
	
	F.Intrinsic.String.Build("Select Job,Suffix,Part,RTrim(Descr) As Descr,Qty From Job_Mult_Parts Where Job = '{0}' And Suffix = '{1}';",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtMulti","con",V.Local.sSQL,True)
	
	Gui.frmMulti.GsGCMulti.AddGridviewFromDatatable("gvMulti","dtMulti")
	Gui.frmMulti.GsGCMulti.MainView("gvMulti")
	Gui.frmMulti.GsGCMulti.SuspendLayout()
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","MultiSelect",True)
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","AllowSort",True)
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","AllowFilter",True)
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","OptionsDetailShowDetailTabs",False)
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","OptionsViewShowGroupPanel",False)
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","OptionsMenuShowAutoFilterRowItem",False)
	Gui.frmMulti.GsGCMulti.SetGridViewProperty("gvMulti","OptionsFilterUseNewCustomFilterDialog",True)
	
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Job","Visible",False)
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Suffix","Visible",False)
	
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Job","Caption","Job")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Suffix","Caption","Suffix")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Part","Caption","Part")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Descr","Caption","Description")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Qty","Caption","Qty")

	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Job","AllowEdit",False)
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Suffix","AllowEdit",False)
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Part","AllowEdit",False)
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Descr","AllowEdit",False)
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Qty","AllowEdit",False)

	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Job","MinWidth","20")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Suffix","MinWidth","20")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Part","MinWidth","120")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Descr","MinWidth","200")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Qty","MinWidth","50")

	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Job","HeaderHAlignment","Center")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Suffix","HeaderHAlignment","Center")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Part","HeaderHAlignment","Center")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Descr","HeaderHAlignment","Center")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Qty","HeaderHAlignment","Center")

	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Job","CellHAlignment","Center")
	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Suffix","CellHAlignment","Center")

	Gui.frmMulti.GsGCMulti.SetColumnProperty("gvMulti","Qty","DisplayCustomNumeric","#,###,###,##0.00")
	
	Gui.frmMulti.GsGCMulti.ResumeLayout()
	
	Gui.frmMulti..Show
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.LoadMultiPart.End

Program.Sub.cmdProcess_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sRet.Declare
	
	v.Global.bDataLoaded.Set(False)
	
	F.Intrinsic.Control.BlockEvents
	GUI.FrmMaster.tabProd.Visible(FALSE)
	gui.FrmMaster.cmdProcess.Enabled(false)
	Gui.FrmMaster.lblProgBarStatus.Visible(True)
	'gui.frmMaster.cmdSave.Enabled(false)
	
	Gui.FrmMaster.lblProgBarStatus.Caption("Getting Data")
	Gui.FrmMaster.prgBar.Visible(True)
	
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkCacheFiles.Value,=,1)
		f.Intrinsic.Control.CallSub(CheckCacheFiles)
		f.Intrinsic.Control.If(v.Global.bCacheFileExists)
			f.Intrinsic.String.Build("Open Work Orders/Project (6271) --- Process Time: {0}",v.Args.CacheFileDateTime,v.Local.sRet)
			Gui.FrmMaster..Caption(v.Local.sRet)
			f.Intrinsic.Control.CallSub(ProgramDataCacheFile,"Customer",V.Screen.FrmMaster!txtCustomer.Text,"SalesOrder",V.Screen.FrmMaster!txtSO.Text)
		f.Intrinsic.Control.Else
			Gui.FrmMaster..Caption("Open Work Orders/Project (6271)")
			Gui.FrmMaster.chkCacheFiles.Value(False)
			'Remove Update when running without cache files
'			f.Intrinsic.Control.CallSub(UpdateSalesOrderInfoOnJobHeader)
			f.Intrinsic.Control.CallSub(ProgramData,"Customer",V.Screen.FrmMaster!txtCustomer.Text,"SalesOrder",V.Screen.FrmMaster!txtSO.Text)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		Gui.FrmMaster..Caption("Open Work Orders/Project (6271)")
		'Remove Update when running without cache files
'		f.Intrinsic.Control.CallSub(UpdateSalesOrderInfoOnJobHeader)
		f.Intrinsic.Control.CallSub(ProgramData,"Customer",V.Screen.FrmMaster!txtCustomer.Text,"SalesOrder",V.Screen.FrmMaster!txtSO.Text)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(loaddtdvall)
	F.Intrinsic.Control.UnBlockEvents
	F.Intrinsic.Control.CallSub(Deserialize)
	gui.FrmMaster.cmdProcess.Enabled(true)
	'gui.frmMaster.cmdSave.Enabled(true)
	GUI.FrmMaster.tabProd.Visible(true)
	Gui.FrmMaster.lblProgBarStatus.Visible(False)
	Gui.FrmMaster.prgBar.Visible(False)
'	Gui.FrmMaster.prgBar.Scrolling(True)
	
	v.Global.bDataLoaded.Set(True)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.cmdProcess_Click.End

Program.Sub.cleanQuery.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sRet.Declare
	v.Local.sRet.Set(v.Args.Query)
	f.Intrinsic.Control.If(v.Args.Active,=,True)
'		f.Intrinsic.String.Replace(v.Local.sRet,"C.DATE_CLOSED='1900-01-01'","1=1",v.Local.sRet)
'		F.Intrinsic.String.Replace(V.Local.sRet,"E.DATE_CLOSED='1900-01-01'","1=1",v.Local.sRet)
'		f.Intrinsic.String.Replace(v.Local.sRet,"DATE_CLOSED = '1900-1-1'","1=1",v.Local.sRet)
'		f.Intrinsic.String.Replace(v.Local.sRet,"FLAG_CLOSED <> 'Y'","1=1",v.Local.sRet)
		f.Intrinsic.String.Replace(v.Local.sRet,"C.DATE_CLOSED='1900-01-01'","C.DATE_CLOSED<>'1900-01-01'",v.Local.sRet)
		F.Intrinsic.String.Replace(V.Local.sRet,"E.DATE_CLOSED='1900-01-01'","E.DATE_CLOSED<>'1900-01-01'",v.Local.sRet)
		f.Intrinsic.String.Replace(v.Local.sRet,"DATE_CLOSED = '1900-1-1'","DATE_CLOSED <> '1900-1-1'",v.Local.sRet)
		f.Intrinsic.String.Replace(v.Local.sRet,"FLAG_CLOSED <> 'Y'","FLAG_CLOSED = 'Y'",v.Local.sRet)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Variable.AddRV("rSQL",v.Local.sRet)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.cleanQuery.End

Program.Sub.lookupVendor_SelectionMade.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sTempDate.Declare
	V.Local.dTempDate.Declare
	v.Local.sQuery.Declare
	v.Local.sUM_PURCHASING.Declare
	v.Local.sUM_INVENTORY.Declare
	v.Local.fFACTOR_CONVERSION.Declare
	v.Local.fPurQty.Declare

	F.Intrinsic.UI.Sleep(1)
	
	'Modified by TDjohan - BEGIN (04/06/2022)
''	'Get Vendor Quote Cost
'	F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",v.DataTable.dtAllM(V.Global.iVendRow).MATPART!FIELDVALTRIM,"Vendor",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM)
'	
''	f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)
'	F.Intrinsic.Control.If(V.Args.Seq,=,"")			'Means there is no Vendor Quote
'		f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)
'	F.Intrinsic.Control.Else
'		f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)
'		F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Global.iVendRow).LINEDUE!FieldValTrim,<>,"")
'			V.Local.sTempDate.Set(V.DataTable.dtAllM(V.Global.iVendRow).LINEDUE!FieldVal)
'			F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"MM/DD/YYYY",V.Local.dTempDate)
'			F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Global.iVendRow).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
'			F.Intrinsic.String.Format(V.Local.dTempDate,"MM/DD/YYYY",V.Local.sTempDate)
'			F.Data.DataTable.SetValue("dtAllM",V.Global.iVendRow,"ORDER_REQD_DATE",V.Local.sTempDate)
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf
'	V.Global.iVendRow.Set(0)

	'Hierarchy of Cost
	'1. Get Vendor Quote Cost
	'2. Get Last Purchase Cost
	'3. Get Burden Cost from WO Sequence
	
	'Get which Purchase Qty to use
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
		v.Local.fPurQty.Set(V.DataTable.dtAllM(V.Global.iVendRow).PCSTOPROD!FieldVal)
	f.Intrinsic.Control.Else
		v.Local.fPurQty.Set(V.DataTable.dtAllM(V.Global.iVendRow).PCSREMAIN!FieldVal)
	f.Intrinsic.Control.EndIf
							
	'Get Vendor Quote Cost
	F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",v.DataTable.dtAllM(V.Global.iVendRow).MATPART!FIELDVALTRIM,"Vendor",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"DT","dtAllM")
	
	F.Intrinsic.Control.If(V.Args.Seq,=,"")			'Means there is no Vendor Quote
		'Get the Purchasing UM, Inventory UM, and Factor Conversion from Inventory Master
		f.Intrinsic.String.Build("select PART, UM_INVENTORY, IF(LTRIM(RTRIM(UM_PURCHASING))='',UM_INVENTORY,UM_PURCHASING) AS UM_PURCHASING, CAST(FACTOR_CONVERSION AS NUMERIC(18,5)) AS FACTOR_CONVERSION from INVENTORY_MSTR where PART = '{0}';",v.DataTable.dtAllM(V.Global.iVendRow).MATPART!FIELDVALTRIM,v.Local.sQuery)
		f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
		f.Intrinsic.Control.If(v.ODBC.con!rst.EOF)
			v.Local.sUM_PURCHASING.Set("")
			v.Local.sUM_INVENTORY.Set("")
			v.Local.fFACTOR_CONVERSION.Set(0.00000)
		f.Intrinsic.Control.Else
			v.Local.sUM_PURCHASING.Set(v.ODBC.con!rst.FieldValTrim!UM_PURCHASING)
			v.Local.sUM_INVENTORY.Set(v.ODBC.con!rst.FieldValTrim!UM_INVENTORY)
			v.Local.fFACTOR_CONVERSION.Set(v.ODBC.con!rst.FieldVal!FACTOR_CONVERSION)
		f.Intrinsic.Control.EndIf
		f.ODBC.con!rst.Close
		
		'Recalculate Purchase Qty
		f.Intrinsic.Control.If(v.Local.fFACTOR_CONVERSION,>,0.00000)			
			f.Intrinsic.Math.Div(v.Local.fPurQty,v.Local.fFACTOR_CONVERSION,v.Local.fPurQty)
			f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
			f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
			f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.SetValue("dtAllM",V.Global.iVendRow,"PURUM",v.Local.sUM_PURCHASING,"INVUM",v.Local.sUM_INVENTORY,"PUR_CNV_FACTOR",v.Local.fFACTOR_CONVERSION,"PUR_QTY",v.Local.fPurQty)
'		f.Data.DataTable.AcceptChanges("dtAllM")
		
		'Get Vendor Last Purchase Cost
		F.Intrinsic.Control.CallSub(GetVendorLastPurchaseCost,"Part",v.DataTable.dtAllM(V.Global.iVendRow).MATPART!FIELDVALTRIM,"Vendor",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"PurUM",v.DataTable.dtAllM(V.Global.iVendRow).PURUM!FIELDVALTRIM,"DT","dtAllM")
		F.Intrinsic.Control.If(v.Args.bNoVendorLastPurchaseCost)
			'No Vendor Last Purchase cost then use the Burden Cost from WO Sequence
			F.Intrinsic.Control.If(v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,=,V.Global.sComCurr)
				f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.DataTable.dtAllM(V.Global.iVendRow).BURDEN!FIELDVAL,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)	
			F.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)	
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			'Use the Vendor Last Purchase Cost
			f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)	
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		'Recalculate Purchase Qty
		f.Intrinsic.Control.If(v.Args.Conversion,>,0.00000)
			f.Intrinsic.Math.Div(v.Local.fPurQty,v.Args.Conversion,v.Local.fPurQty)
			f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
			f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
			f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Intrinsic.Control.EndIf
								
		'Populate with Vendor Quote Cost
'		f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)
		f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"VENDOR",v.DataTable.lookupVendor_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendor_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendor_Result(0).VendorCurrency!FIELDVALTRIM,"PURUM",v.Args.PurUM,"PUR_CNV_FACTOR",v.Args.Conversion,"PUR_QTY",v.Local.fPurQty,"SelectWO",true)
		
		F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Global.iVendRow).LINEDUE!FieldVal,v.Local.sTempDate)
		F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
			F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
			F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Global.iVendRow).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
			F.Data.DataTable.SetValue("dtAllM",V.Global.iVendRow,"ORDER_REQD_DATE",V.Local.dTempDate)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	V.Global.iVendRow.Set(0)
	'Modified by TDjohan - END (04/06/2022)

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.lookupVendor_SelectionMade.End

Program.Sub.GetVendorQuoteCost.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.fCost.Declare(Float)
	v.Local.sSeq.Declare(String)
	v.Local.sMfgPart.Declare(String)
	v.Local.sMfgName.Declare(String)
	V.Local.iLeadTime.Declare(Long)
	v.Local.fConversion.Declare(Float)
	v.Local.sPurUM.Declare(String)
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	
	'Get Vendor Quote Cost
	f.Intrinsic.Control.If(v.Args.DT,=,"dtAllM",OR,v.Args.DT.UCase,=,"DTALLM")
		f.Intrinsic.String.Build("select TOP 1 H.SEQ, H.MFG_PART_NO, H.MFG_NAME, H.LEAD_TIME, CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6)) AS Cost, H.INV_UM, H.PUR_UM, H.UM_SELECTED, CAST(H.CONVERSION AS NUMERIC(18,6)) AS CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ WHERE H.PART = '{0}' AND H.VENDOR = '{1}' ORDER BY H.QUOTE_DATE DESC, COST ASC",V.Args.Part.Trim,V.Args.Vendor.Trim,V.Local.sSQL)					
	f.Intrinsic.Control.Else
		'dtAllO
		f.Intrinsic.String.Build("select TOP 1 H.SEQ, H.MFG_PART_NO, H.MFG_NAME, H.LEAD_TIME, CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6)) AS Cost, H.INV_UM, H.PUR_UM, H.UM_SELECTED, CAST(H.CONVERSION AS NUMERIC(18,6)) AS CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ WHERE H.PART = '{0}' AND H.VENDOR = '{1}' AND H.PART_DESC = '{2}' ORDER BY H.QUOTE_DATE DESC, COST ASC",V.Args.Part.Trim,V.Args.Vendor.Trim,v.Args.PartDesc.Trim,V.Local.sSQL)	
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")
		V.Local.sSeq.Set("")
		V.Local.sMfgPart.Set("")
		V.Local.sMfgName.Set("")
		V.Local.iLeadTime.Set(0)
		V.Local.fCost.Set(0.00)
		v.Local.fConversion.Set(0.00000)
		v.Local.sPurUM.Set("")
	f.Intrinsic.Control.Else
		F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		V.Local.sSeq.Set(V.Local.sRet(0).Trim)
		V.Local.sMfgPart.Set(V.Local.sRet(1).Trim)
		V.Local.sMfgName.Set(V.Local.sRet(2).Trim)
		V.Local.iLeadTime.Set(V.Local.sRet(3))
		V.Local.fCost.Set(V.Local.sRet(4))
		v.Local.fConversion.Set(V.Local.sRet(8))
		v.Local.sPurUM.Set(V.Local.sRet(6).Trim)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Variable.AddRV("Cost",V.Local.fCost,"Seq",V.Local.sSeq,"MfgPart",V.Local.sMfgPart,"MfgName",V.Local.sMfgName,"LeadTime",V.Local.iLeadTime,"Conversion",v.Local.fConversion,"PurUM",v.Local.sPurUM)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.GetVendorQuoteCost.End

Program.Sub.GetVendorLastPurchaseCost.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.fCost.Declare(Float)
	v.Local.bNoVendorLastPurchaseCost.Declare(Boolean)
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	
	'Need to account for Purchase UM because the Purchase UM might be different from Purch UM in Inventory Master due
	'to the ability to grab the Purch UM from Vendor Quote
	'Get Vendor Last Purchase Cost
'	f.Intrinsic.String.Build("select RTRIM(A.PART) AS Part, IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, VENDOR, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART, VENDOR) B ON A.PART = B.PART AND A.VENDOR = B.VENDOR AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = ''  AND A.PART = '{1}' AND A.VENDOR = '{2}';",V.Global.sComCurr,V.Args.Part.Trim,V.Args.Vendor.Trim,V.Local.sSQL)
	'Get Vendor Last Purchase Cost
	f.Intrinsic.Control.If(v.Args.DT,=,"dtAllM",OR,v.Args.DT,=,"DTALLM")
		f.Intrinsic.String.Build("select RTRIM(A.PART) AS Part, IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, VENDOR, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART, VENDOR) B ON A.PART = B.PART AND A.VENDOR = B.VENDOR AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = ''  AND A.PART = '{1}' AND A.VENDOR = '{2}' AND A.UM_INVENTORY = '{3}';",V.Global.sComCurr,V.Args.Part.Trim,V.Args.Vendor.Trim,V.Args.PurUM.Trim,V.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("select RTRIM(A.PART) AS Part, IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, VENDOR, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART, VENDOR) B ON A.PART = B.PART AND A.VENDOR = B.VENDOR AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = ''  AND A.PART = '{1}' AND A.VENDOR = '{2}' AND A.UM_INVENTORY = '{3}' AND A.DESCRIPTION = '{4}';",V.Global.sComCurr,V.Args.Part.Trim,V.Args.Vendor.Trim,V.Args.PurUM.Trim,V.Args.PartDesc.Trim,V.Local.sSQL)
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")
		V.Local.bNoVendorLastPurchaseCost.Set(True)
		V.Local.fCost.Set(0.00)
	f.Intrinsic.Control.Else
		F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		V.Local.bNoVendorLastPurchaseCost.Set(False)
		V.Local.fCost.Set(V.Local.sRet(1).Float)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Variable.AddRV("Cost",V.Local.fCost,"bNoVendorLastPurchaseCost",V.Local.bNoVendorLastPurchaseCost)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.GetVendorLastPurchaseCost.End

Program.Sub.lookupVendorOut_SelectionMade.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.fCost.Declare
	v.Local.sSQL.Declare
	v.Local.sQuery.Declare
	v.Local.sUM_PURCHASING.Declare
	v.Local.sUM_INVENTORY.Declare
	v.Local.fFACTOR_CONVERSION.Declare
	v.Local.fPurQty.Declare
	
	F.Intrinsic.UI.Sleep(1)
	
	'Modified by TDjohan - BEGIN (04/06/2022)
'	'Get Vendor Quote Cost
'	F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",v.DataTable.dtAllO(V.Global.iVendRow).MATPART!FIELDVALTRIM,"Vendor",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM)
'	
'	f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",v.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VENDOR",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendorOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)
'	V.Global.iVendRow.Set(0)

	'Hierarchy of Cost
	'1. Get Vendor Quote Cost
	'2. Get Last Purchase Cost
	'3. Get Burden Cost from WO Sequence
	
	'Get which Purchase Qty to use
	f.Intrinsic.Control.If(v.Screen.FrmMaster!chkPurQtyCond.Value,=,1)
		v.Local.fPurQty.Set(V.DataTable.dtAllO(V.Global.iVendRow).PCSTOPROD!FieldVal)
	f.Intrinsic.Control.Else
		v.Local.fPurQty.Set(V.DataTable.dtAllO(V.Global.iVendRow).PCSREMAIN!FieldVal)
	f.Intrinsic.Control.EndIf
	
	'Get Vendor Quote Cost
	F.Intrinsic.Control.CallSub(GetVendorQuoteCost,"Part",v.DataTable.dtAllO(V.Global.iVendRow).OutsideServicePart!FIELDVALTRIM,"Vendor",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"PartDesc",v.DataTable.dtAllO(v.Global.iVendRow).DESCR!FIELDVALTRIM,"DT","dtAllO")
	
	F.Intrinsic.Control.If(V.Args.Seq,=,"")			'Means there is no Vendor Quote
		'Get Vendor Last Purchase Cost
		F.Intrinsic.Control.CallSub(GetVendorLastPurchaseCost,"Part",v.DataTable.dtAllO(V.Global.iVendRow).OutsideServicePart!FIELDVALTRIM,"Vendor",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"PurUM",v.DataTable.dtAllO(V.Global.iVendRow).PURUM!FIELDVALTRIM,"PartDesc",v.DataTable.dtAllO(v.Global.iVendRow).DESCR!FIELDVALTRIM,"DT","dtAllO")
		F.Intrinsic.Control.If(v.Args.bNoVendorLastPurchaseCost)
			'No Vendor Last Purchase cost then use the Burden Cost from WO Sequence
			F.Intrinsic.Control.If(v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,=,V.Global.sComCurr)
				f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",v.DataTable.dtAllO(V.Global.iVendRow).BURDEN!FIELDVAL,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendorOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)	
			F.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",0.00,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendorOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)	
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			'Use the Vendor Last Purchase Cost
			f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq","","MfgPart","","MfgName","","VEND_QTE_EXISTS",False,"VEND_QTE_LEAD_TIME",0,"VENDOR",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendorOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)	
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		'Recalculate Purchase Qty
		f.Intrinsic.Control.If(v.Args.Conversion,>,0.00000)			
			f.Intrinsic.Math.Div(v.Local.fPurQty,v.Args.Conversion,v.Local.fPurQty)
			f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
			f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
			f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Intrinsic.Control.EndIf
		
		'Populate with Vendor Quote Cost
'		f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"VENDOR",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendorOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,"SelectWO",true)
		f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",v.Args.Cost,"VendorQuoteSeq",V.Args.Seq,"MfgPart",v.Args.MfgPart,"MfgName",v.Args.MfgName,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",V.Args.LeadTime,"VENDOR",v.DataTable.lookupVendorOut_Result(0).VENDOR!FIELDVALTRIM,"VENDORNAME",v.DataTable.lookupVendorOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorOut_Result(0).VendorCurrency!FIELDVALTRIM,"PURUM",v.Args.PurUM,"PUR_CNV_FACTOR",v.Args.Conversion,"PUR_QTY",v.Local.fPurQty,"SelectWO",true)
	F.Intrinsic.Control.EndIf
	V.Global.iVendRow.Set(0)
	'Modified by TDjohan - END (04/06/2022)

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.lookupVendorOut_SelectionMade.End

Program.Sub.cmdSerialize_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare

	f.Intrinsic.Control.CallSub(Serialize)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdSerialize_Click.End

Program.Sub.cmdDeserialize_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Intrinsic.Control.CallSub(DeSerialize)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdDeserialize_Click.End

Program.Sub.cmdSaveOutput_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sfile.Declare
	v.Local.sStamp.Declare
	v.Local.sSerial.Declare
	f.Intrinsic.String.Format(v.Ambient.Now,"YYYYMMDD HHNNSS",v.Local.sStamp)
	
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\DATA ",v.Local.sStamp,".xml",v.Local.sfile)
	f.Data.Datatable.SaveToXML("dtAll2",0,true,v.Local.sfile)
	
	f.Intrinsic.String.Concat(v.Caller.FilesDir,"\SERIAL ",v.Local.sStamp,".txt",v.Local.sfile)
	gui.FrmMaster.GsGCAll.Serialize("gvAll",v.Local.sSerial)
	f.Intrinsic.File.String2File(v.Local.sFile,v.Local.sSerial)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry

Program.Sub.cmdSaveOutput_Click.End

Program.Sub.FrmMaster_SaveButtonClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.i.Declare
	v.Local.sWO.Declare
	v.Local.sSuf.Declare
	v.Local.sTextLbl.Declare
	v.Local.sQueries.Declare
	v.Local.srows.Declare
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving Records to Database.")
	f.Intrinsic.String.Split(v.Global.sSQLQueries,";",v.local.sQueries)
	f.Intrinsic.Control.For(v.Local.i,0,v.local.sQueries.UBound,1)
		f.Intrinsic.Control.If(v.Local.sQueries(v.Local.i).trim,<>,"")
			f.ODBC.Connection!con.execute(v.Local.sQueries(v.Local.i))
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	f.Intrinsic.String.Split(v.Global.sRows,";",v.local.sRows)
	f.Intrinsic.Control.For(v.Local.i,0,v.Local.sRows.UBound,1)
		f.Intrinsic.Control.If(v.Local.srows(v.Local.i).trim,<>,"")
			f.Data.DataTable.SetValue("dtAll2",v.Local.sRows(v.Local.i),"RowChange","")
		f.Intrinsic.control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
	v.Global.sSQLQueries.Set("")
	v.Global.sRows.Set("")
	
	f.Intrinsic.UI.CloseWaitDialog
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.FrmMaster_SaveButtonClick.End

Program.Sub.FrmMaster_RefreshClick.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	F.Intrinsic.Control.If(V.Global.bLoadData)
		F.Intrinsic.Control.CallSub(Serialize)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(cmdProcess_Click)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.FrmMaster_RefreshClick.End

Program.Sub.FrmMaster_ExportClick.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.GsGCAll.enabled(false)
	gui.FrmMaster.gsgcOper.enabled(false)
	
	f.Intrinsic.Control.CallSub(MenuClickExport)
	
	gui.FrmMaster.GsGCAll.enabled(true)
	gui.FrmMaster.gsgcOper.enabled(true)
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.FrmMaster_ExportClick.End

Program.Sub.FrmMaster_UserButtonClicked.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sSQL.Declare
	V.Local.sCol.Declare
	V.Local.sColW.Declare
	V.Local.sRet.Declare
	v.Local.sCust.Declare
	
	v.Local.sCaption.Declare
	v.Local.iCnt.Declare
	v.Local.iColCount.Declare
	v.Local.sData.Declare
	v.Local.sColumn.Declare
	v.Local.sType.Declare
	
		
	f.Intrinsic.Control.SelectCase(v.Args.Button)
		f.Intrinsic.Control.Case("cmdCustomer")
			V.Local.sSQL.Set("SELECT CUSTOMER, NAME_CUSTOMER FROM V_CUSTOMER_MASTER order by NAME_CUSTOMER")
			'Split Column Names into an array (*!* delimited string)
			F.Intrinsic.String.Split("CUSTOMER*!*NAME_CUSTOMER","*!*",V.Local.sCol)
			'Split Column widths into an array (*!* delimited string)
			F.Intrinsic.String.Split("600*!*3000","*!*",V.Local.sColW)
			F.Intrinsic.UI.Browser("Select a Customer","con",V.Local.sSQL,V.Local.sCol,V.Local.sColW,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				gui.FrmMaster.txtBCustomer.Text(v.Local.sRet(0))
				gui.FrmMaster.txtCustomer.Text(v.Local.sRet(0))
				GUI.FrmMaster..SetFocus(1)
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Case("cmdSalesOrder")
			f.Intrinsic.Control.If(v.Global.sCustomer.Trim,<>,"")
				f.Intrinsic.String.Build("select A.CUSTOMER, A.ORDER_NO, A.CUSTOMER_PO, A.CODE_SORT,  B.NAME_CUSTOMER from V_ORDER_HEADER A left join V_ORDER_BILL_TO B ON A.ORDER_NO = B.ORDER_NO WHERE A.CUSTOMER='{0}' order by A.CUSTOMER, A.ORDER_NO",v.Local.sCust,v.Local.sSQL)
				F.Intrinsic.String.Split("Customer*!*Order#*!*Customer PO#*!*Order Sort 1*!*Name Customer","*!*",V.Local.sCol)
				F.Intrinsic.String.Split("1200*!*1600*!*2100*!*2100*!*3200","*!*",V.Local.sColW)
			f.Intrinsic.Control.Else
				V.Local.sSQL.Set("select A.CUSTOMER, A.ORDER_NO, A.CUSTOMER_PO, A.CODE_SORT,  B.NAME_CUSTOMER from V_ORDER_HEADER A left join V_ORDER_BILL_TO B ON A.ORDER_NO = B.ORDER_NO order by A.CUSTOMER, A.ORDER_NO")
				F.Intrinsic.String.Split("Customer*!*Order#*!*Customer PO#*!*Order Sort 1*!*Name Customer","*!*",V.Local.sCol)
				F.Intrinsic.String.Split("1200*!*1600*!*2100*!*2100*!*3200","*!*",V.Local.sColW)
			f.Intrinsic.Control.EndIf
			
			F.Intrinsic.UI.Browser("Select a Order","con",V.Local.sSQL,V.Local.sCol,V.Local.sColW,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				gui.FrmMaster.txtBCustomer.Text(v.Local.sRet(1))
				
				'gui.FrmMaster.txtSO.Text(v.Local.sRet(1))
				
				'gui.FrmMaster.txtCustomer.Text(v.Local.sRet(0))
				
				GUI.FrmMaster..SetFocus(1)
				f.Intrinsic.Control.CallSub(cmdProcess_click)
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Case("cmdProcess")
			f.Intrinsic.Control.CallSub(cmdProcess_click)
			
		f.Intrinsic.Control.Case("cmdBarProfile")
			f.Intrinsic.Control.If(v.Global.bDataLoaded)
				
				f.Intrinsic.Control.If(v.Global.bProfileLayoutFormActive)
					gui.frmProfileLayout..SetFocus
					gui.frmProfileLayout.cmdProfileLayout.SetFocus
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
				
				v.Local.sData.Set("")
				
				'Load gvAll columns
				gui.FrmMaster.GsGCAll.GetColumnCount("gvAll",v.Local.iColCount)
				f.Intrinsic.Math.Sub(v.Local.iColCount,1,v.Local.iColCount)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.iColCount,1)
					gui.FrmMaster.GsGCAll.GetColumnNameByIndex("gvAll",v.Local.iCnt,v.Local.sRet)
					gui.FrmMaster.GsGCAll.GetColumnProperty("gvAll",v.Local.sRet,"Caption",v.Local.sCaption)
					f.Intrinsic.String.Build("{0}{1}*!*{2}*!*{3}*!*{4}*!*{5}@!@",v.Local.sData,"GsGcAll","gvAll","All Work Orders",v.Local.sRet,v.Local.sCaption,v.Local.sData)
				f.Intrinsic.Control.Next(v.Local.iCnt)
				
				'Load gvAllM columns
				gui.FrmMaster.GsGcAllM.GetColumnCount("gvAllM",v.Local.iColCount)
				f.Intrinsic.Math.Sub(v.Local.iColCount,1,v.Local.iColCount)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.iColCount,1)
					gui.FrmMaster.GsGcAllM.GetColumnNameByIndex("gvAllM",v.Local.iCnt,v.Local.sRet)
					gui.FrmMaster.GsGcAllM.GetColumnProperty("gvAllM",v.Local.sRet,"Caption",v.Local.sCaption)
					f.Intrinsic.String.Build("{0}{1}*!*{2}*!*{3}*!*{4}*!*{5}@!@",v.Local.sData,"GsGcAllM","gvAllM","Materials",v.Local.sRet,v.Local.sCaption,v.Local.sData)
				f.Intrinsic.Control.Next(v.Local.iCnt)
				
				'Load gvAllO columns
				gui.FrmMaster.GsGcAllO.GetColumnCount("gvAllO",v.Local.iColCount)
				f.Intrinsic.Math.Sub(v.Local.iColCount,1,v.Local.iColCount)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.iColCount,1)
					gui.FrmMaster.GsGcAllO.GetColumnNameByIndex("gvAllO",v.Local.iCnt,v.Local.sRet)
					gui.FrmMaster.GsGcAllO.GetColumnProperty("gvAllO",v.Local.sRet,"Caption",v.Local.sCaption)
					f.Intrinsic.String.Build("{0}{1}*!*{2}*!*{3}*!*{4}*!*{5}@!@",v.Local.sData,"GsGcAllO","gvAllO","Subcontract",v.Local.sRet,v.Local.sCaption,v.Local.sData)
				f.Intrinsic.Control.Next(v.Local.iCnt)
				
				'Load gvOper columns
				gui.FrmMaster.gsgcOper.GetColumnCount("gvOper",v.Local.iColCount)
				f.Intrinsic.Math.Sub(v.Local.iColCount,1,v.Local.iColCount)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.iColCount,1)
					gui.FrmMaster.gsgcOper.GetColumnNameByIndex("gvOper",v.Local.iCnt,v.Local.sRet)
					gui.FrmMaster.gsgcOper.GetColumnProperty("gvOper",v.Local.sRet,"Caption",v.Local.sCaption)
					f.Intrinsic.String.Build("{0}{1}*!*{2}*!*{3}*!*{4}*!*{5}@!@",v.Local.sData,"GsGcOper","gvOper","Work Center Prioriy",v.Local.sRet,v.Local.sCaption,v.Local.sData)
				f.Intrinsic.Control.Next(v.Local.iCnt)
				
				f.Intrinsic.Control.If(v.Local.sData.Trim,<>,"")
					f.Intrinsic.String.Len(v.Local.sData,v.Local.iCnt)
					f.Intrinsic.Math.Sub(v.Local.iCnt,3,v.Local.iCnt)
					f.Intrinsic.String.Mid(v.Local.sData,1,v.Local.iCnt,v.Local.sData)
					
					v.Local.sColumn.Set("GRID*!*GRIDVIEW*!*TAB_CAPTION*!*COLUMN_NAME*!*COLUMN_TITLE")
					v.Local.sType.Set("String*!*String*!*String*!*String*!*String")
					
					f.Intrinsic.Control.If(v.DataTable.dtProfileLayout.Exists)
						f.Data.DataTable.Close("dtProfileLayout")
					f.Intrinsic.Control.EndIf
					
					f.Data.DataTable.CreateFromString("dtProfileLayout",v.Local.sData,v.Local.sColumn,v.Local.sType,"*!*","@!@",True)
					f.Data.DataTable.AddColumn("dtProfileLayout","HIDE","Boolean",False)
					
					gui.frmProfileLayout.gsgcColumns.AddGridviewFromDatatable("gvColumns","dtProfileLayout")
					gui.frmProfileLayout.gsgcColumns.MainView("gvColumns")
					
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","Caption","Grid")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","HeaderFontBold",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","AllowEdit",False)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","ReadOnly",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","MinWidth",80)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","HeaderHAlignment","Center")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRID","Visible",False)
					
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","Caption","GridView")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","HeaderFontBold",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","AllowEdit",False)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","ReadOnly",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","MinWidth",80)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","HeaderHAlignment","Center")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","GRIDVIEW","Visible",False)
					
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","TAB_CAPTION","Caption","Tab")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","TAB_CAPTION","HeaderFontBold",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","TAB_CAPTION","AllowEdit",False)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","TAB_CAPTION","ReadOnly",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","TAB_CAPTION","MinWidth",120)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","TAB_CAPTION","HeaderHAlignment","Center")
					
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","Caption","Column Name")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","HeaderFontBold",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","AllowEdit",False)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","ReadOnly",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","MinWidth",80)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","HeaderHAlignment","Center")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_NAME","Visible",False)
					
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_TITLE","Caption","Column Title")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_TITLE","HeaderFontBold",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_TITLE","AllowEdit",False)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_TITLE","ReadOnly",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_TITLE","MinWidth",180)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","COLUMN_TITLE","HeaderHAlignment","Center")
					
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","HIDE","Caption","Hide")
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","HIDE","HeaderFontBold",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","HIDE","AllowEdit",True)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","HIDE","ReadOnly",False)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","HIDE","MinWidth",60)
					gui.frmProfileLayout.gsgcColumns.SetColumnProperty("gvColumns","HIDE","HeaderHAlignment","Center")
					
					gui.frmProfileLayout.gsgcColumns.Visible(False)
				f.Intrinsic.Control.EndIf
				
				'Load users
				f.Intrinsic.Control.CallSub(LoadGvUsers)
				
				gui.frmProfileLayout.gsgcUsers.Visible(False)
				
				gui.frmProfileLayout.txtProfile_ID.Text("")
				gui.frmProfileLayout.txtProfileLayout.Text("")
					
				v.Global.bProfileLayoutFormActive.Set(True)
				gui.frmProfileLayout.cmdProfileLayout.SetFocus
				gui.frmProfileLayout..Show
				
			f.Intrinsic.Control.Else
				f.Intrinsic.UI.Msgbox("Please load the data first.","Profile Layout (6271)")
			f.Intrinsic.Control.EndIf
			
			
	f.Intrinsic.Control.EndSelect
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry

Program.Sub.FrmMaster_UserButtonClicked.End

Program.Sub.LoadGvUsers.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sQuery.Declare
	
	f.Intrinsic.Control.If(v.DataTable.dtProfileUser.Exists)
		f.Data.DataTable.Close("dtProfileUser")
	f.Intrinsic.Control.EndIf
		
	f.Intrinsic.String.Build("select USER_ID, GS_USER, FIRST_NAME, LAST_NAME from user_information where enabled = 1 and menu_type < '3' and (company = '{0}' or  company = '') order by GS_USER;",v.Caller.CompanyCode,v.Local.sQuery)
	f.Data.DataTable.CreateFromSQL("dtProfileUser","CommonCon",v.Local.sQuery,True)
	f.Data.DataTable.AddColumn("dtProfileUser","SELECTED","Boolean",False)
	
	gui.frmProfileLayout.gsgcUsers.AddGridviewFromDatatable("gvUsers","dtProfileUser")
	gui.frmProfileLayout.gsgcUsers.MainView("gvUsers")
	
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","Caption","ID")
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","HeaderFontBold",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","AllowEdit",False)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","ReadOnly",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","MinWidth",80)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","HeaderHAlignment","Near")
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","USER_ID","Visible",False)
	
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","GS_USER","Caption","Username")
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","GS_USER","HeaderFontBold",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","GS_USER","AllowEdit",False)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","GS_USER","ReadOnly",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","GS_USER","MinWidth",80)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","GS_USER","HeaderHAlignment","Near")
	
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","FIRST_NAME","Caption","First Name")
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","FIRST_NAME","HeaderFontBold",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","FIRST_NAME","AllowEdit",False)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","FIRST_NAME","ReadOnly",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","FIRST_NAME","MinWidth",100)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","FIRST_NAME","HeaderHAlignment","Near")
	
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","LAST_NAME","Caption","Last Name")
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","LAST_NAME","HeaderFontBold",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","LAST_NAME","AllowEdit",False)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","LAST_NAME","ReadOnly",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","LAST_NAME","MinWidth",100)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","LAST_NAME","HeaderHAlignment","Near")
	
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","SELECTED","ShowCaption",False)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","SELECTED","HeaderFontBold",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","SELECTED","AllowEdit",True)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","SELECTED","ReadOnly",False)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","SELECTED","MinWidth",60)
	gui.frmProfileLayout.gsgcUsers.SetColumnProperty("gvUsers","SELECTED","HeaderHAlignment","Center")
			
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry	
Program.Sub.LoadGvUsers.End

Program.Sub.FrmMaster_UserTextBoxEditValueChanged.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Intrinsic.Control.SelectCase(v.Args.TextBox)
		f.Intrinsic.Control.Case("txtBCustomer")
			v.Global.sCustomer.Set(v.Args.Text)
		f.Intrinsic.Control.Case("txtBSalesOrder")
			v.Global.sSalesOrder.Set(v.Args.Text)
	f.Intrinsic.Control.EndSelect
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.FrmMaster_UserTextBoxEditValueChanged.End

Program.Sub.accAllWO_ElementClick.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.GsGCAll.enabled(false)
	gui.FrmMaster.gsgcOper.enabled(false)
	
	f.Intrinsic.Control.SelectCase(v.Args.Caption)
		f.Intrinsic.Control.Case("Close WO Seq")
			f.Intrinsic.Control.CallSub(MenuCloseSeq)
		f.Intrinsic.Control.Case("New WO")
			F.Intrinsic.Control.CallSub(MenuClickNew)
'		f.Intrinsic.Control.Case("WIP to FG (Expedited)")
'			f.Intrinsic.Control.CallSub(MenuClickWIPFG)
		f.Intrinsic.Control.Case("Complete Task")
			f.Intrinsic.Control.CallSub(MenuClickTask)
	f.Intrinsic.Control.EndSelect

	gui.FrmMaster.GsGCAll.enabled(TRUE)
	gui.FrmMaster.gsgcOper.enabled(TRUE)
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry

Program.Sub.accAllWO_ElementClick.End

Program.Sub.accMat_ElementClick.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.GsGCAll.enabled(false)
	gui.FrmMaster.gsgcOper.enabled(false)
	
	f.Intrinsic.Control.SelectCase(v.Args.Caption)
		f.Intrinsic.Control.Case("Automated Purchasing")
			f.Intrinsic.Control.CallSub(MenuClickCreatePO,"dt","dtAllM","dv","dvAllM","GV","gvAllM","GC","gsgcAllM")
		f.Intrinsic.Control.Case("Issue Material")
			f.Intrinsic.Control.CallSub(MenuClickIssue)
	f.Intrinsic.Control.EndSelect
	
	gui.FrmMaster.GsGCAll.enabled(TRUE)
	gui.FrmMaster.gsgcOper.enabled(TRUE)
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.accMat_ElementClick.End

Program.Sub.accOut_ElementClick.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.FrmMaster.GsGCAll.enabled(false)
	gui.FrmMaster.gsgcOper.enabled(false)
	
	f.Intrinsic.Control.SelectCase(v.Args.Caption)
		f.Intrinsic.Control.Case("Automated Purchasing")
			f.Intrinsic.Control.CallSub(MenuClickCreatePO,"dt","dtAllO","dv","dvAllO","GV","gvAllO","GC","gsgcAllO")
	f.Intrinsic.Control.EndSelect
	
	gui.FrmMaster.GsGCAll.enabled(TRUE)
	gui.FrmMaster.gsgcOper.enabled(TRUE)
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry
Program.Sub.accOut_ElementClick.End

Program.Sub.MenuClickTask.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Global.General.CallWrapperSync(50,"JB0028")
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.MenuClickTask.End

Program.Sub.cmdBrowseSO_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sSQL.Declare
	V.Local.sCol.Declare
	V.Local.sColW.Declare
	V.Local.sRet.Declare
	v.Local.sCust.Declare
	v.Local.sCust.Set(v.Screen.frmMaster!txtCustomer.Text)
	f.Intrinsic.Control.If(v.Local.sCust,<>,"")
		f.Intrinsic.String.Build("select A.CUSTOMER, A.ORDER_NO, A.CUSTOMER_PO, A.CODE_SORT,  B.NAME_CUSTOMER from V_ORDER_HEADER A left join V_ORDER_BILL_TO B ON A.ORDER_NO = B.ORDER_NO WHERE A.CUSTOMER='{0}' order by A.CUSTOMER, A.ORDER_NO",v.Local.sCust,v.Local.sSQL)
		F.Intrinsic.String.Split("Customer*!*Order#*!*Customer PO#*!*Order Sort 1*!*Name Customer","*!*",V.Local.sCol)
		F.Intrinsic.String.Split("1200*!*1600*!*2100*!*2100*!*3200","*!*",V.Local.sColW)
	f.Intrinsic.Control.Else
		V.Local.sSQL.Set("select A.CUSTOMER, A.ORDER_NO, A.CUSTOMER_PO, A.CODE_SORT,  B.NAME_CUSTOMER from V_ORDER_HEADER A left join V_ORDER_BILL_TO B ON A.ORDER_NO = B.ORDER_NO order by A.CUSTOMER, A.ORDER_NO")
		F.Intrinsic.String.Split("Customer*!*Order#*!*Customer PO#*!*Order Sort 1*!*Name Customer","*!*",V.Local.sCol)
		F.Intrinsic.String.Split("1200*!*1600*!*2100*!*2100*!*3200","*!*",V.Local.sColW)
	f.Intrinsic.Control.EndIf
	
	
	F.Intrinsic.UI.Browser("Select a Order","con",V.Local.sSQL,V.Local.sCol,V.Local.sColW,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		'gui.FrmMaster.txtBCustomer.Text(v.Local.sRet(1))
		
		gui.FrmMaster.txtSO.Text(v.Local.sRet(1))
		
		gui.FrmMaster.txtCustomer.Text(v.Local.sRet(0))
		
		GUI.FrmMaster..SetFocus(1)
		f.Intrinsic.Control.CallSub(cmdProcess_click)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseSO_Click.End

Program.Sub.cmdBrowseCust_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sSQL.Declare
	V.Local.sCol.Declare
	V.Local.sColW.Declare
	V.Local.sRet.Declare
	v.Local.sCust.Declare
	V.Local.sSQL.Set("SELECT CUSTOMER, NAME_CUSTOMER FROM V_CUSTOMER_MASTER order by NAME_CUSTOMER")
	'Split Column Names into an array (*!* delimited string)
	F.Intrinsic.String.Split("CUSTOMER*!*NAME_CUSTOMER","*!*",V.Local.sCol)
	'Split Column widths into an array (*!* delimited string)
	F.Intrinsic.String.Split("600*!*3000","*!*",V.Local.sColW)
	F.Intrinsic.UI.Browser("Select a Customer","con",V.Local.sSQL,V.Local.sCol,V.Local.sColW,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		'gui.FrmMaster.txtBCustomer.Text(v.Local.sRet(0))
		gui.FrmMaster.txtCustomer.Text(v.Local.sRet(0))
		GUI.FrmMaster..SetFocus(1)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseCust_Click.End

Program.Sub.lookupVendorQuote_SelectionMade.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sTempDate.Declare
	V.Local.dTempDate.Declare
	V.Local.fPurCost.Declare
	V.Local.fPurQty.Declare
	
	F.Intrinsic.UI.Sleep(1)
	
'	f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"VendorQuoteSeq",v.DataTable.lookupVendorQuote_Result(0).SEQ!FIELDVALTRIM,"COST",v.DataTable.lookupVendorQuote_Result(0).UNIT_PRICE!FIELDVAL,"MfgPart",v.DataTable.lookupVendorQuote_Result(0).MFG_PART_NO!FIELDVALTRIM,"MfgName",v.DataTable.lookupVendorQuote_Result(0).MFG_NAME!FIELDVALTRIM,"SelectWO",true)
'	f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"VendorQuoteSeq",v.DataTable.lookupVendorQuote_Result(0).SEQ!FIELDVALTRIM,"COST",v.DataTable.lookupVendorQuote_Result(0).UNIT_PRICE!FIELDVAL,"MfgPart",v.DataTable.lookupVendorQuote_Result(0).MFG_PART_NO!FIELDVALTRIM,"MfgName",v.DataTable.lookupVendorQuote_Result(0).MFG_NAME!FIELDVALTRIM,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",v.DataTable.lookupVendorQuote_Result(0).LEAD_TIME!FIELDVAL,"SelectWO",true)
	f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"VENDOR",v.DataTable.lookupVendorQuote_Result(0).VENDOR!FIELDVALTRIM,"VendorName",v.DataTable.lookupVendorQuote_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorQuote_Result(0).VendorCurrency!FIELDVALTRIM,"VendorQuoteSeq",v.DataTable.lookupVendorQuote_Result(0).SEQ!FIELDVALTRIM,"COST",v.DataTable.lookupVendorQuote_Result(0).UNIT_PRICE!FIELDVAL,"MfgPart",v.DataTable.lookupVendorQuote_Result(0).MFG_PART_NO!FIELDVALTRIM,"MfgName",v.DataTable.lookupVendorQuote_Result(0).MFG_NAME!FIELDVALTRIM,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",v.DataTable.lookupVendorQuote_Result(0).LEAD_TIME!FIELDVAL,"PURUM",v.DataTable.lookupVendorQuote_Result(0).PUR_UM!FIELDVALTRIM,"PUR_CNV_FACTOR",v.DataTable.lookupVendorQuote_Result(0).CONVERSION!FIELDVAL,"SelectWO",true)
	
	F.Intrinsic.Control.If(V.DataTable.dtAllM(V.Global.iVendRow).PURUM!FieldValTrim,<>,V.DataTable.dtAllM(V.Global.iVendRow).INVUM!FieldValTrim)
	F.Intrinsic.Control.AndIf(V.DataTable.dtAllM(V.Global.iVendRow).PUR_CNV_FACTOR!FieldVal,<>,0.00000)
		F.Intrinsic.Control.If(v.DataTable.lookupVendorQuote_Result(0).UM_SELECTED!FIELDVALTRIM,=,"P")
			V.Local.fPurCost.Set(v.DataTable.lookupVendorQuote_Result(0).UNIT_PRICE!FIELDVAL)
		F.Intrinsic.Control.Else
			F.Intrinsic.Math.Mult(v.DataTable.lookupVendorQuote_Result(0).UNIT_PRICE!FIELDVAL,v.DataTable.lookupVendorQuote_Result(0).CONVERSION!FIELDVAL,v.Local.fPurCost)
		F.Intrinsic.Control.EndIf
		
		f.Intrinsic.Math.Div(V.DataTable.dtAllM(V.Global.iVendRow).PCSTOPROD!FieldVal,v.DataTable.lookupVendorQuote_Result(0).CONVERSION!FIELDVAL,v.Local.fPurQty)
		f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
		f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Data.DataTable.SetValue("dtAllM",v.Global.iVendRow,"COST",v.Local.fPurCost,"PUR_QTY",v.Local.fPurQty)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.DateString(V.DataTable.dtAllM(V.Global.iVendRow).LINEDUE!FieldVal,v.Local.sTempDate)
	F.Intrinsic.Control.If(v.Local.sTempDate,<>,"","OR",v.Local.sTempDate,<>,"0",v.Local.sTempDate,<>,"00000000")
		F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
		F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Global.iVendRow).LEAD_TIME!FieldVal,V.Global.iWorkDayMask,V.Local.dTempDate)
		F.Data.DataTable.SetValue("dtAllM",V.Global.iVendRow,"ORDER_REQD_DATE",V.Local.dTempDate)
	F.Intrinsic.Control.EndIf
	
	V.Global.iVendRow.Set(0)

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.lookupVendorQuote_SelectionMade.End

Program.Sub.lookupVendorQuoteOut_SelectionMade.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.fPurCost.Declare
	V.Local.fPurQty.Declare
	
	F.Intrinsic.UI.Sleep(1)
	
'	f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"VendorQuoteSeq",v.DataTable.lookupVendorQuoteOut_Result(0).SEQ!FIELDVALTRIM,"COST",v.DataTable.lookupVendorQuoteOut_Result(0).UNIT_PRICE!FIELDVAL,"MfgPart",v.DataTable.lookupVendorQuoteOut_Result(0).MFG_PART_NO!FIELDVALTRIM,"MfgName",v.DataTable.lookupVendorQuoteOut_Result(0).MFG_NAME!FIELDVALTRIM,"SelectWO",true)
	f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"VENDOR",v.DataTable.lookupVendorQuoteOut_Result(0).VENDOR!FIELDVALTRIM,"VendorName",v.DataTable.lookupVendorQuoteOut_Result(0).NAME_VENDOR!FIELDVALTRIM,"VendorCurrency",v.DataTable.lookupVendorQuoteOut_Result(0).VendorCurrency!FIELDVALTRIM,"VendorQuoteSeq",v.DataTable.lookupVendorQuoteOut_Result(0).SEQ!FIELDVALTRIM,"COST",v.DataTable.lookupVendorQuoteOut_Result(0).UNIT_PRICE!FIELDVAL,"MfgPart",v.DataTable.lookupVendorQuoteOut_Result(0).MFG_PART_NO!FIELDVALTRIM,"MfgName",v.DataTable.lookupVendorQuoteOut_Result(0).MFG_NAME!FIELDVALTRIM,"VEND_QTE_EXISTS",True,"VEND_QTE_LEAD_TIME",v.DataTable.lookupVendorQuoteOut_Result(0).LEAD_TIME!FIELDVAL,"PURUM",v.DataTable.lookupVendorQuoteOut_Result(0).PUR_UM!FIELDVALTRIM,"PUR_CNV_FACTOR",v.DataTable.lookupVendorQuoteOut_Result(0).CONVERSION!FIELDVAL,"SelectWO",true)
	
	F.Intrinsic.Control.If(V.DataTable.dtAllO(V.Global.iVendRow).PURUM!FieldValTrim,<>,V.DataTable.dtAllO(V.Global.iVendRow).INVUM!FieldValTrim)
	F.Intrinsic.Control.AndIf(V.DataTable.dtAllO(V.Global.iVendRow).PUR_CNV_FACTOR!FieldVal,<>,0.00000)
		F.Intrinsic.Control.If(v.DataTable.lookupVendorQuoteOut_Result(0).UM_SELECTED!FIELDVALTRIM,=,"P")
			V.Local.fPurCost.Set(v.DataTable.lookupVendorQuoteOut_Result(0).UNIT_PRICE!FIELDVAL)
		F.Intrinsic.Control.Else
			F.Intrinsic.Math.Mult(v.DataTable.lookupVendorQuoteOut_Result(0).UNIT_PRICE!FIELDVAL,v.DataTable.lookupVendorQuoteOut_Result(0).CONVERSION!FIELDVAL,v.Local.fPurCost)
		F.Intrinsic.Control.EndIf
		f.Intrinsic.Math.Div(V.DataTable.dtAllO(V.Global.iVendRow).PCSTOPROD!FieldVal,v.DataTable.lookupVendorQuoteOut_Result(0).CONVERSION!FIELDVAL,v.Local.fPurQty)
		f.Intrinsic.Math.Mult(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Intrinsic.Math.Int(v.Local.fPurQty,v.Local.fPurQty)
		f.Intrinsic.Math.Div(v.Local.fPurQty,100,v.Local.fPurQty)
		f.Data.DataTable.SetValue("dtAllO",v.Global.iVendRow,"COST",v.Local.fPurCost,"PUR_QTY",v.Local.fPurQty)
	F.Intrinsic.Control.EndIf
	
	V.Global.iVendRow.Set(0)

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.lookupVendorQuoteOut_SelectionMade.End

Program.Sub.chkCacheFiles_Change.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sRet.Declare
	
	f.Intrinsic.Control.If(V.Screen.FrmMaster!chkCacheFiles.Value,=,1)
		f.Intrinsic.Control.CallSub(CheckCacheFiles)
		f.Intrinsic.Control.If(v.Global.bCacheFileExists)
			f.Intrinsic.String.Build("Open Work Orders/Project (6271) --- Process Time: {0}",v.Args.CacheFileDateTime,v.Local.sRet)
			Gui.FrmMaster..Caption(v.Local.sRet)
'			Gui.FrmMaster.chkCacheFiles.Value(True)
		f.Intrinsic.Control.Else
			Gui.FrmMaster..Caption("Open Work Orders/Project (6271)")
			Gui.FrmMaster.chkCacheFiles.Value(False)
			f.Intrinsic.UI.Msgbox("There is no cache files. Getting live data instead.")
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		Gui.FrmMaster..Caption("Open Work Orders/Project (6271)")
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.chkCacheFiles_Change.End

Program.Sub.CheckCacheFiles.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sFile.Declare
	v.Local.bEx.Declare
	v.Local.sRet.Declare
	
	'Check the cache file datetime
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAll_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)
	
'	f.Intrinsic.Control.If(v.Local.bEx)
'		f.Intrinsic.String.Build("{0}\GAB_6271_dtAll2_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
'		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
'	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.String.Build("{0}\GAB_6271_dtOper_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.String.Build("{0}\GAB_6271_dtAllO_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.String.Build("{0}\GAB_6271_dtAllM_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.String.Build("{0}\GAB_6271_dtChildMat_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.String.Build("{0}\GAB_6271_dtChildLabr_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.String.Build("{0}\GAB_6271_dtChildOuts_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
		f.Intrinsic.File.Exists(v.Local.sFile,v.Local.bEx)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bEx)
		V.Global.bCacheFileExists.Set(True)
		f.Intrinsic.File.GetFileDateTime(v.Local.sFile,v.Local.sRet)
	f.Intrinsic.Control.Else
		v.Global.bCacheFileExists.Set(False)
		v.Local.sRet.Set("")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Variable.AddRV("CacheFileDateTime",v.Local.sRet)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry	
Program.Sub.CheckCacheFiles.End

Program.Sub.UpdateSalesOrderInfoOnJobHeader.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sQuery.Declare
	
	'Children Work Order do not have Sales Order & Sales Order Line information
	'Populate them from Parent Work Order
	F.ODBC.Connection!CON.Execute("update JOB_HEADER set SALES_ORDER = A.SALES_ORDER, SALES_ORDER_LINE = A.SALES_ORDER_LINE from (select JOB, SUFFIX, PARENT_WO, PARENT_SUFFIX_PARENT, SALES_ORDER, SALES_ORDER_LINE from V_JOB_HEADER where SALES_ORDER NOT IN ('','0000000')) A where JOB_HEADER.JOB = A.JOB and JOB_HEADER.SALES_ORDER IN ('','0000000')")

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
F.Intrinsic.Control.EndTry	
Program.Sub.UpdateSalesOrderInfoOnJobHeader.End

Program.Sub.cmdProfileLayout_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sRet.Declare
	
	gui.frmProfileLayout.cmdProfileLayout.Enabled(False)

	f.Intrinsic.UI.SetBrowserHotTypeAhead(True)
	f.Intrinsic.UI.Browser("Profile Layout","con","select PROFILE_ID AS ID, DESCRIPTION FROM GAB_6271_PROF ORDER BY DESCRIPTION;","ID*!*DESCRIPTION","500*!*2000",8000,4000,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***CANCEL***")
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		gui.frmProfileLayout.txtProfile_ID.Text(v.Local.sRet(0).Trim)
		gui.frmProfileLayout.txtProfileLayout.Text(v.Local.sRet(1).Trim)
		f.Intrinsic.Control.CallSub(txtProfileLayout_LostFocus)
	f.Intrinsic.Control.EndIf

	gui.frmProfileLayout.cmdProfileLayout.Enabled(True)

f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.cmdProfileLayout_Click.End

Program.Sub.frmProfileLayout_UnLoad.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.frmProfileLayout..Visible(False)
	v.Global.bProfileLayoutFormActive.Set(False)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.frmProfileLayout_UnLoad.End

Program.Sub.cmdDeleteProfile_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sQuery.Declare
	v.Local.iRet.Declare
	v.Local.iProfile_ID.Declare
	v.Local.sUserID.Declare
	v.Local.sRet.Declare
	
	f.Intrinsic.Control.If(v.Screen.frmProfileLayout!txtProfile_ID.Text.Trim,<>,"")
		f.Intrinsic.UI.Msgbox("Delete the profile layout?","Profile Layout (6271)",4,v.Local.iRet)
		f.Intrinsic.Control.If(v.Local.iRet,=,6)    	'Yes
			v.Local.iProfile_ID.Set(v.Screen.frmProfileLayout!txtProfile_ID.Text.Trim)
					
			'Delete from custom tables - Should not delete the rows from GAB_6271_PROF_USER first because we need to remove the serialization, the first time that user launch 6271
			'Just need to update the GAB_6271_PROF_USER DELETE_PROFILE column
			f.Intrinsic.String.Build("update GAB_6271_PROF_USER set RESET_LAYOUT = 1, DELETE_PROFILE = 1 Where PROFILE_ID = {0};",v.Local.iProfile_ID,v.Local.sQuery)
			f.ODBC.Connection!con.Execute(V.Local.sQuery)	
			f.Intrinsic.String.Build("Delete From GAB_6271_PROF_LAYOUT Where PROFILE_ID = {0};",v.Local.iProfile_ID,v.Local.sQuery)
			f.ODBC.Connection!con.Execute(V.Local.sQuery)	
			f.Intrinsic.String.Build("Delete From GAB_6271_PROF Where PROFILE_ID = {0};",v.Local.iProfile_ID,v.Local.sQuery)
			f.ODBC.Connection!con.Execute(V.Local.sQuery)	
			
			'Make gridColumns and gridUsers disabled
			gui.frmProfileLayout.txtProfile_ID.Text("")
			gui.frmProfileLayout.txtProfileLayout.Text("")
			f.Data.DataTable.SetValue("dtProfileLayout",-1,"HIDE",False)
			f.Data.DataTable.AcceptChanges("dtProfileLayout")
			f.Data.DataTable.SetValue("dtProfileUser",-1,"SELECTED",False)
			f.Data.DataTable.AcceptChanges("dtProfileUser")
			gui.frmProfileLayout.gsgcColumns.Visible(False)
			gui.frmProfileLayout.gsgcUsers.Visible(False)

		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry	
Program.Sub.cmdDeleteProfile_Click.End

Program.Sub.txtProfileLayout_LostFocus.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sQuery.Declare
	v.Local.iRet.Declare
	v.Local.sRetValue.Declare
	v.Local.iCnt.Declare
	v.Local.sProfileID.Declare
	
	gui.frmProfileLayout.cmdProfileLayout.Enabled(False)
	
	f.Intrinsic.Control.If(v.Screen.frmProfileLayout!txtProfileLayout.Text.Trim,<>,"")
		f.Intrinsic.String.Build("select PROFILE_ID, DESCRIPTION from GAB_6271_PROF where DESCRIPTION = '{0}';",v.Screen.frmProfileLayout!txtProfileLayout.Text.Trim,v.Local.sQuery)
		f.ODBC.Connection!con.OpenLocalRecordsetRO("rstProfile",v.Local.sQuery)
		f.Intrinsic.Control.If(v.ODBC.con!rstProfile.EOF,<>,True)
			'Make the gridview invisible
			gui.frmProfileLayout.gsgcColumns.Visible(False)
			gui.frmProfileLayout.gsgcUsers.Visible(False)
			
			gui.frmProfileLayout.txtProfile_ID.Text(v.ODBC.con!rstProfile.FieldValString!PROFILE_ID)

			'Get the Profile Layout
			f.Intrinsic.String.Build("select GRID+'*!*'+GRIDVIEW+'*!*'+COLUMN_NAME, convert(1,sql_bit) as 'HIDE' from GAB_6271_PROF_LAYOUT where PROFILE_ID = {0};",v.ODBC.con!rstProfile.FieldValLong!PROFILE_ID,v.Local.sQuery)
			f.Data.Dictionary.CreateFromSQL("dicProfileLayout","con",v.Local.sQuery)
			f.Data.Dictionary.SetDefaultReturn("dicProfileLayout",False)
			f.Data.DataTable.AddExpressionColumn("dtProfileLayout","KeyFields","String","[GRID]+'*!*'+[GRIDVIEW]+'*!*'+[COLUMN_NAME]")
			f.Data.DataTable.FillFromDictionary("dtProfileLayout","dicProfileLayout","KeyFields","HIDE")
			f.Data.DataTable.RemoveColumn("dtProfileLayout","KeyFields")
			f.Data.Dictionary.Close("dicProfileLayout")			
			
			'ReLoad users
			f.Intrinsic.Control.CallSub(LoadGvUsers)
			
			'Get the Users
			f.Intrinsic.String.Build("select USER_ID, convert(1,sql_bit) as 'SELECTED' from GAB_6271_PROF_USER where PROFILE_ID = {0} and DELETE_PROFILE = 0;",v.ODBC.con!rstProfile.FieldValLong!PROFILE_ID,v.Local.sQuery)
			f.Data.Dictionary.CreateFromSQL("dicProfileUser","con",v.Local.sQuery)
			f.Data.Dictionary.SetDefaultReturn("dicProfileUser",False)
			f.Data.DataTable.FillFromDictionary("dtProfileUser","dicProfileUser","USER_ID","SELECTED")
			f.Data.Dictionary.Close("dicProfileUser")
			
			f.Intrinsic.String.Build("select USER_ID, convert(1,sql_bit) as 'HAS_PROFILE' from GAB_6271_PROF_USER where PROFILE_ID <> {0} and DELETE_PROFILE = 0;",v.ODBC.con!rstProfile.FieldValLong!PROFILE_ID,v.Local.sQuery)
			f.Data.Dictionary.CreateFromSQL("dicProfileUser","con",v.Local.sQuery)
			f.Data.Dictionary.SetDefaultReturn("dicProfileUser",False)
			f.Data.DataTable.AddColumn("dtProfileUser","HAS_PROFILE","Boolean",False)
			f.Data.DataTable.FillFromDictionary("dtProfileUser","dicProfileUser","USER_ID","HAS_PROFILE")
			f.Data.Dictionary.Close("dicProfileUser")
			
			f.Data.DataTable.Select("dtProfileUser","HAS_PROFILE = True",v.Local.sRetValue)
			f.Intrinsic.Control.If(v.Local.sRetValue,<>,"***NORETURN***")
				f.Intrinsic.String.Split(v.Local.sRetValue.Trim,"*!*",v.Local.sRetValue)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sRetValue.UBound,1)
					f.Data.DataTable.DeleteRow("dtProfileUser",v.Local.sRetValue(v.Local.iCnt).Long)
				f.Intrinsic.Control.Next(v.Local.iCnt)
				f.Data.DataTable.AcceptChanges("dtProfileUser")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.RemoveColumn("dtProfileUser","HAS_PROFILE")
			
			'Make the gridview visible
			gui.frmProfileLayout.gsgcColumns.Visible(True)
			gui.frmProfileLayout.gsgcUsers.Visible(True)
		f.Intrinsic.Control.Else			
			gui.frmProfileLayout.txtProfile_ID.Text("")
			f.Intrinsic.UI.Msgbox("Profile Name doesn't exists. Do you want to create it a new profile?","Profile Layout (6271)",4,v.Local.iRet)
			f.Intrinsic.Control.If(v.Local.iRet,=,6)    	'Yes
				'Save to the database and enable the gridviews
				f.Intrinsic.String.Build("insert into GAB_6271_PROF(DESCRIPTION) VALUES ('{0}');",v.Screen.frmProfileLayout!txtProfileLayout.Text.Trim,v.Local.sQuery)
				f.ODBC.Connection!con.Execute(v.Local.sQuery)
				'Grab the PROFILE_ID from the table
				f.Intrinsic.String.Build("select PROFILE_ID from GAB_6271_PROF where DESCRIPTION = '{0}';",v.Screen.frmProfileLayout!txtProfileLayout.Text.Trim,v.Local.sQuery)
				f.ODBC.Connection!con.ExecuteAndReturn(v.Local.sQuery,v.Local.sRetValue)
				gui.frmProfileLayout.txtProfile_ID.Text(v.Local.sRetValue.Trim)
				v.Local.sProfileID.Set(v.Local.sRetValue.Trim)
				
				'ReLoad users
				f.Intrinsic.Control.CallSub(LoadGvUsers)
				
				'Get the Users
				f.Intrinsic.String.Build("select USER_ID, convert(1,sql_bit) as 'SELECTED' from GAB_6271_PROF_USER where PROFILE_ID = {0} and DELETE_PROFILE = 0;",v.Local.sProfileID.Long,v.Local.sQuery)
				f.Data.Dictionary.CreateFromSQL("dicProfileUser","con",v.Local.sQuery)
				f.Data.Dictionary.SetDefaultReturn("dicProfileUser",False)
				f.Data.DataTable.FillFromDictionary("dtProfileUser","dicProfileUser","USER_ID","SELECTED")
				f.Data.Dictionary.Close("dicProfileUser")
				
				f.Intrinsic.String.Build("select USER_ID, convert(1,sql_bit) as 'HAS_PROFILE' from GAB_6271_PROF_USER where PROFILE_ID <> {0} and DELETE_PROFILE = 0;",v.Local.sProfileID.Long,v.Local.sQuery)
				f.Data.Dictionary.CreateFromSQL("dicProfileUser","con",v.Local.sQuery)
				f.Data.Dictionary.SetDefaultReturn("dicProfileUser",False)
				f.Data.DataTable.AddColumn("dtProfileUser","HAS_PROFILE","Boolean",False)
				f.Data.DataTable.FillFromDictionary("dtProfileUser","dicProfileUser","USER_ID","HAS_PROFILE")
				f.Data.Dictionary.Close("dicProfileUser")
				
				f.Data.DataTable.Select("dtProfileUser","HAS_PROFILE = True",v.Local.sRetValue)
				f.Intrinsic.Control.If(v.Local.sRetValue,<>,"***NORETURN***")
					f.Intrinsic.String.Split(v.Local.sRetValue.Trim,"*!*",v.Local.sRetValue)
					f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sRetValue.UBound,1)
						f.Data.DataTable.DeleteRow("dtProfileUser",v.Local.sRetValue(v.Local.iCnt).Long)
					f.Intrinsic.Control.Next(v.Local.iCnt)
					f.Data.DataTable.AcceptChanges("dtProfileUser")
				f.Intrinsic.Control.EndIf
				f.Data.DataTable.RemoveColumn("dtProfileUser","HAS_PROFILE")
				
				'Make gridColumns and gridUsers visible
				f.Data.DataTable.SetValue("dtProfileLayout",-1,"HIDE",False)
				f.Data.DataTable.AcceptChanges("dtProfileLayout")
				f.Data.DataTable.SetValue("dtProfileUser",-1,"SELECTED",False)
				f.Data.DataTable.AcceptChanges("dtProfileUser")
				gui.frmProfileLayout.gsgcColumns.Visible(True)
				gui.frmProfileLayout.gsgcUsers.Visible(True)
			f.Intrinsic.Control.Else						'No
				gui.frmProfileLayout.txtProfile_ID.Text("")
				gui.frmProfileLayout.txtProfileLayout.Text("")
				gui.frmProfileLayout.txtProfileLayout.SetFocus
				'Make gridColumns and gridUsers invisible
				f.Data.DataTable.SetValue("dtProfileLayout",-1,"HIDE",False)
				f.Data.DataTable.AcceptChanges("dtProfileLayout")
				f.Data.DataTable.SetValue("dtProfileUser",-1,"SELECTED",False)
				f.Data.DataTable.AcceptChanges("dtProfileUser")
				gui.frmProfileLayout.gsgcColumns.Visible(False)
				gui.frmProfileLayout.gsgcUsers.Visible(False)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	gui.frmProfileLayout.cmdProfileLayout.Enabled(True)
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.txtProfileLayout_LostFocus.End

Program.Sub.gsgcColumns_CellValueChanged.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sQuery.Declare
	v.Local.bValue.Declare
	v.Local.sProfile_ID.Declare
	v.Local.sGrid.Declare
	v.Local.sGridView.Declare
	v.Local.sColumn.Declare
	
	f.Intrinsic.Control.If(v.Args.Column,=,"HIDE")
		f.Intrinsic.Control.If(v.Screen.frmProfileLayout!txtProfile_ID.Text.Trim,<>,"")
			v.Local.bValue.Set(v.Args.Value)
			v.Local.sProfile_ID.Set(v.Screen.frmProfileLayout!txtProfile_ID.Text.Trim)
			v.Local.sGrid.Set(v.DataTable.dtProfileLayout(v.Args.RowIndex).GRID!FieldValTrim)
			v.Local.sGridView.Set(v.DataTable.dtProfileLayout(v.Args.RowIndex).GRIDVIEW!FieldValTrim)
			v.Local.sColumn.Set(v.DataTable.dtProfileLayout(v.Args.RowIndex).COLUMN_NAME!FieldValTrim)
			f.Intrinsic.Control.If(v.Local.bValue)
				f.Intrinsic.String.Build("select PROFILE_ID, GRID, GRIDVIEW, COLUMN_NAME from GAB_6271_PROF_LAYOUT where PROFILE_ID = {0} and GRID = '{1}' and GRIDVIEW = '{2}' and COLUMN_NAME = '{3}';",v.Local.sProfile_ID.Long,v.Local.sGrid,v.Local.sGridView,v.Local.sColumn,v.Local.sQuery)
				f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
				f.Intrinsic.Control.If(v.ODBC.con!rst.EOF)
					f.Intrinsic.String.Build("insert into GAB_6271_PROF_LAYOUT(PROFILE_ID, GRID, GRIDVIEW, COLUMN_NAME) values({0},'{1}','{2}','{3}');",v.Local.sProfile_ID.Long,v.Local.sGrid,v.Local.sGridView,v.Local.sColumn,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
					'Update GAB_6271_PROF_USER that profile has changed and user serialization needs to be reset
					f.Intrinsic.String.Build("update GAB_6271_PROF_USER set RESET_LAYOUT = 1 where PROFILE_ID = {0};",v.Local.sProfile_ID.Long,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
				f.Intrinsic.Control.EndIf
				f.ODBC.con!rst.Close
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("select PROFILE_ID, GRID, GRIDVIEW, COLUMN_NAME from GAB_6271_PROF_LAYOUT where PROFILE_ID = {0} and GRID = '{1}' and GRIDVIEW = '{2}' and COLUMN_NAME = '{3}';",v.Local.sProfile_ID.Long,v.Local.sGrid,v.Local.sGridView,v.Local.sColumn,v.Local.sQuery)
				f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
				f.Intrinsic.Control.If(v.ODBC.con!rst.EOF,<>,True)
					f.Intrinsic.String.Build("delete from GAB_6271_PROF_LAYOUT where PROFILE_ID = {0} and GRID = '{1}' and GRIDVIEW = '{2}' and COLUMN_NAME = '{3}';",v.Local.sProfile_ID.Long,v.Local.sGrid,v.Local.sGridView,v.Local.sColumn,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
					'Update GAB_6271_PROF_USER that profile has changed and user serialization needs to be reset
					f.Intrinsic.String.Build("update GAB_6271_PROF_USER set RESET_LAYOUT = 1 where PROFILE_ID = {0};",v.Local.sProfile_ID.Long,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
				f.Intrinsic.Control.EndIf
				f.ODBC.con!rst.Close
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcColumns_CellValueChanged.End

Program.Sub.gsgcUsers_CellValueChanged.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sQuery.Declare
	v.Local.bValue.Declare
	v.Local.sProfile_ID.Declare
	v.Local.iUSER_ID.Declare
	v.Local.sGS_USER.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	
	
	f.Intrinsic.Control.If(v.Args.Column,=,"SELECTED")
		f.Intrinsic.Control.If(v.Screen.frmProfileLayout!txtProfile_ID.Text.Trim,<>,"")			
			v.Local.bValue.Set(v.Args.Value)
			v.Local.sProfile_ID.Set(v.Screen.frmProfileLayout!txtProfile_ID.Text.Trim)
			v.Local.iUSER_ID.Set(v.DataTable.dtProfileUser(v.Args.RowIndex).USER_ID!FieldValTrim)
			v.Local.sGS_USER.Set(v.DataTable.dtProfileUser(v.Args.RowIndex).GS_USER!FieldValTrim)
			f.Intrinsic.Control.If(v.Local.bValue)				
				f.Intrinsic.String.Build("select PROFILE_ID, USER_ID, GS_USER, RESET_LAYOUT, DELETE_PROFILE from GAB_6271_PROF_USER where USER_ID = {0};",v.Local.iUSER_ID,v.Local.sQuery)
				f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
				f.Intrinsic.Control.If(v.ODBC.con!rst.EOF)
					f.Intrinsic.String.Build("insert into GAB_6271_PROF_USER(PROFILE_ID, USER_ID, GS_USER, RESET_LAYOUT, DELETE_PROFILE) values({0},{1},'{2}',1, 0);",v.Local.sProfile_ID.Long,v.Local.iUSER_ID,v.Local.sGS_USER,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Build("update GAB_6271_PROF_USER set PROFILE_ID = {0}, RESET_LAYOUT = 1, DELETE_PROFILE = 0 where USER_ID = {1};",v.Local.sProfile_ID.Long,v.Local.iUSER_ID,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
				f.Intrinsic.Control.EndIf
				f.ODBC.con!rst.Close
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("select PROFILE_ID, USER_ID, GS_USER, RESET_LAYOUT, DELETE_PROFILE from GAB_6271_PROF_USER where PROFILE_ID = {0} and USER_ID = {1};",v.Local.sProfile_ID.Long,v.Local.iUSER_ID,v.Local.sQuery)
				f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
				f.Intrinsic.Control.If(v.ODBC.con!rst.EOF,<>,True)
					f.Intrinsic.String.Build("update GAB_6271_PROF_USER set RESET_LAYOUT = 1, DELETE_PROFILE = 1 where PROFILE_ID = {0} and USER_ID = {1};",v.Local.sProfile_ID.Long,v.Local.iUSER_ID,v.Local.sQuery)
					f.ODBC.Connection!con.Execute(V.Local.sQuery)
				f.Intrinsic.Control.EndIf
				f.ODBC.con!rst.Close
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.gsgcUsers_CellValueChanged.End

Program.Sub.HideColumnProfileLayout.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sQuery.Declare
	v.Local.sGrid.Declare
	v.Local.sGridView.Declare
	v.Local.sColumnName.Declare	
	
	f.Intrinsic.String.Build("select PROFILE_ID, GRID, GRIDVIEW, COLUMN_NAME from GAB_6271_PROF_LAYOUT where PROFILE_ID = {0};",v.Global.iProfileID,v.Local.sQuery)
	f.ODBC.Connection!con.OpenLocalRecordsetRO("rst",v.Local.sQuery)
	f.Intrinsic.Control.DoUntil(v.ODBC.con!rst.EOF)
		v.Local.sGrid.Set(v.ODBC.con!rst.FieldValTrim!GRID)
		v.Local.sGridView.Set(v.ODBC.con!rst.FieldValTrim!GRIDVIEW)
		v.Local.sColumnName.Set(v.ODBC.con!rst.FieldValTrim!COLUMN_NAME)
		Gui.FrmMaster.[v.Local.sGrid].SetColumnProperty(v.Local.sGridView,v.Local.sColumnName,"Visible",False)
		Gui.FrmMaster.[v.Local.sGrid].SetColumnProperty(v.Local.sGridView,v.Local.sColumnName,"AllowShowHide",False)
		f.ODBC.con!rst.MoveNext
	f.Intrinsic.Control.Loop
	f.ODBC.con!rst.Close
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry
Program.Sub.HideColumnProfileLayout.End

Program.Sub.gsgcAllM_KeyPress.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iCol.Declare

	f.Intrinsic.Control.SelectCase(v.Args.ColumnName)
		f.Intrinsic.Control.CaseAny("VENDOR","'vendor","COST","cost")
			f.Intrinsic.Control.If(V.DataTable.dtAllM(V.Args.RowIndex).PURCHASE_ORDER!FieldValTrim,<>,"")
				gui.FrmMaster.gsgcAllM.SetCellProperty("gvAllM",v.Args.ColumnIndex,v.Args.RowIndex,"locked",True)
				gui.FrmMaster.gsgcAllM.GetColumnIndexByName("gvAllM","COST",v.Local.iCol)
				gui.FrmMaster.gsgcAllM.SetCellProperty("gvAllM",v.Local.iCol,v.Args.RowIndex,"locked",True)
			f.Intrinsic.Control.EndIf
			
	f.Intrinsic.Control.EndSelect
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry	
Program.Sub.gsgcAllM_KeyPress.End

Program.Sub.gsgcAllO_KeyPress.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iCol.Declare

	f.Intrinsic.Control.SelectCase(v.Args.ColumnName)
		f.Intrinsic.Control.CaseAny("VENDOR","'vendor","COST","cost")
			f.Intrinsic.Control.If(V.DataTable.dtAllO(V.Args.RowIndex).PURCHASE_ORDER!FieldValTrim,<>,"")
				gui.FrmMaster.gsgcAllO.SetCellProperty("gvAllO",v.Args.ColumnIndex,v.Args.RowIndex,"locked",True)
				gui.FrmMaster.gsgcAllO.GetColumnIndexByName("gvAllO","COST",v.Local.iCol)
				gui.FrmMaster.gsgcAllO.SetCellProperty("gvAllO",v.Local.iCol,v.Args.RowIndex,"locked",True)
			f.Intrinsic.Control.EndIf
			
	f.Intrinsic.Control.EndSelect
	
f.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(frmMaster_unload)
f.Intrinsic.Control.EndTry	
Program.Sub.gsgcAllO_KeyPress.End

Program.Sub.Comments.Start
${$5$}$20.1.8769.31171$}$1
${$6$}$tdjohan$}$20240220132018704$}$8rAQhOSvlohpQhMDm1j544LwmwXnRbkhlsrKiGs+EncwQxFDC2/ii5TwOZqkUz4Y8htyIb1OevU=
Program.Sub.Comments.End