Program.Sub.Preflight.Start
V.Global.sComCurr.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
f.Intrinsic.Control.Try
	v.Local.sRet.Declare	
	V.Local.bExists.Declare
	V.Local.sCheckFile.Declare
	v.Local.sProcessIDfile.Declare
	v.Local.sSQL.Declare
	v.Local.sDescription.Declare
	
	
'	f.Intrinsic.Control.If(v.Caller.Hook,<>,38120)
'		f.Intrinsic.Control.End
'	f.Intrinsic.Control.EndIf
	
	f.ODBC.Connection!con.OpenCompanyConnection(1800)	
	
	'Get Base Currency
	F.Global.General.ReadOption("000000",1,"","0000",V.Global.sComCurr)

	f.Intrinsic.String.Build("{0}\GAB_6271_PID_{1}.txt",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sProcessIDfile)
	f.Intrinsic.file.Exists(v.Local.sProcessIDfile,v.Local.bExists)
	'No file existed
	f.Intrinsic.control.If(v.Local.bExists.Not)
		f.Intrinsic.File.String2File(v.Local.sProcessIDfile,v.Ambient.PID)
	
	'There is file PID
	f.Intrinsic.control.Else
		f.Intrinsic.File.File2String(v.Local.sProcessIDfile,v.Local.sCheckFile)
		
		'check if the file is blank
		'File is not blank
		f.Intrinsic.Control.If(v.Local.sCheckFile,<>,"")
			f.Intrinsic.task.PIDRunning(v.Local.sCheckFile,v.Local.bExists)
			'Other PID stops running
			f.Intrinsic.Control.If(v.Local.bExists,=,false)
				f.intrinsic.File.String2File(v.Local.sProcessIDfile,v.Ambient.PID)
			
			'Other PID is still running	
			f.Intrinsic.Control.Else
'				f.Intrinsic.Control.CallSub("Unload")
				F.ODBC.Connection!con.close
				F.Intrinsic.Control.End
			f.Intrinsic.Control.EndIf
			
		'There is file PID but blank	
		f.Intrinsic.Control.Else
			f.intrinsic.File.String2File(v.Local.sProcessIDfile,v.Ambient.PID)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(CheckTable)
'	f.Intrinsic.Control.CallSub(UpdateSalesOrderInfoOnJobHeader)
	f.Intrinsic.Control.CallSub("Load")
	f.Intrinsic.Control.CallSub("Unload")
	
f.Intrinsic.Control.catch
	f.Intrinsic.String.Left(v.Ambient.ErrorDescription.Trim,850,v.Local.sDescription)
	f.Intrinsic.String.Build("Insert into GAB_6271_Error (DateTimeOccur,Description) values (Now(),'{0} Sub: {1} {2}')",v.Ambient.ErrorNumber,v.Ambient.CurrentSubroutine,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!con.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Unload.Start
F.Intrinsic.Control.Try
	V.Local.bExists.Declare
	V.Local.sCheckFile.Declare
	v.Local.sProcessIDfile.Declare
	
	'Blank out the PID in the PID file
	f.Intrinsic.String.Build("{0}\GAB_6271_PID_{1}.txt",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sProcessIDfile)
	f.Intrinsic.file.Exists(v.Local.sProcessIDfile,v.Local.bExists)
	'There is file PID
	f.Intrinsic.control.If(v.Local.bExists)			
		f.intrinsic.File.String2File(v.Local.sProcessIDfile,"")
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.DataTable.dtAll.Exists)
		f.Data.DataTable.Close("dtAll")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtOper.Exists)
		f.Data.DataTable.Close("dtOper")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtAllO.Exists)
		f.Data.DataTable.Close("dtAllO")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtAllM.Exists)
		f.Data.DataTable.Close("dtAllM")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildMat.Exists)
		f.Data.DataTable.Close("dtChildMat")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildMatMisc.Exists)
		f.Data.DataTable.Close("dtChildMatMisc")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildLabr.Exists)
		f.Data.DataTable.Close("dtChildLabr")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildOuts.Exists)
		f.Data.DataTable.Close("dtChildOuts")
	f.Intrinsic.Control.EndIf
	
'	f.Intrinsic.Control.If(v.DataTable.dtOperIds.Exists)
'		f.Data.Datatable.close("dtOperIds")
'	f.Intrinsic.Control.EndIf

'	f.Intrinsic.Control.If(v.DataTable.dtAllMIds.Exists)
'		f.Data.Datatable.close("dtAllMIds")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.dtAllOIds.Exists)
'		f.Data.Datatable.close("dtAllOIds")
'	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOperRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtOperRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllORemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtAllORemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllMRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtAllMRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtChildMatRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtChildMatRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtChildLabrRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtChildLabrRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtChildOutsRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtChildOutsRemoveWO")
	F.Intrinsic.Control.EndIf
		
	F.ODBC.Connection!con.close
	F.Intrinsic.Control.End
	
F.Intrinsic.Control.Catch
	f.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Unload.End

Program.Sub.checkTable.Start
F.Intrinsic.Control.Try
	v.Local.bTable.Declare(Boolean)

	F.ODBC.Connection!con.TableExists("GAB_6271_Error",V.Local.bTable)
	F.Intrinsic.Control.If(v.Local.bTable.Not)
		F.ODBC.Connection!con.Execute("CREATE TABLE GAB_6271_Error (DateTimeOccur DATETIME,Description VARCHAR(1000) );")
	F.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!con.TableExists("GAB_6271_WO_NOTES",V.Local.bTable)
	F.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_6271_WO_NOTES (JOB CHAR(6), SUFFIX CHAR(3), SEQ CHAR(6), NOTES LONGVARCHAR);")
		F.ODBC.Connection!Con.Execute("CREATE INDEX GAB_6271_WO_NOTES01 USING 1 ON GAB_6271_WO_NOTES ( JOB, SUFFIX, SEQ );")
	F.Intrinsic.Control.EndIf
	
	F.ODBC.Connection!con.TableExists("GAB_6271_WO_NOTESLOG",V.Local.bTable)
	f.Intrinsic.Control.If(v.Local.bTable,=,False)
		F.ODBC.Connection!Con.Execute("CREATE TABLE GAB_6271_WO_NOTESLOG ( JOB CHAR(6), SUFFIX CHAR(3), SEQ CHAR(6), NOTES LONGVARCHAR, USERID VARCHAR(8), DATECHANGE DATETIME DEFAULT NOW(), FIELD VARCHAR(50) );")
		f.ODBC.Connection!con.Execute("CREATE INDEX GAB_6271_WO_NOTESL01 USING 1 ON GAB_6271_WO_NOTESLOG ( JOB, SUFFIX, SEQ );")
	f.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	f.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.checkTable.End

Program.Sub.Load.Start
f.Intrinsic.Control.Try
	
	v.Local.sSQL.Declare
	v.Local.ssql1.Declare
	v.Local.ssql2.Declare
	v.Local.ssql3.Declare
	v.Local.ssql4.Declare
	v.Local.iMax.Declare
	v.Local.sMinJob.Declare
	v.Local.sCMarkFile.Declare
	v.Local.sMark.Declare
	v.Local.lMax.Declare
	v.Local.iCnt.Declare
	v.Local.fEstHrs.Declare
	v.Local.fTotRemain.Declare
	v.Local.fTotRemainNoFloat.Declare
	v.Local.sCurOper.Declare
	v.Local.sOutside.Declare
	v.Local.fPcsRem.Declare
	v.Local.iDaysLateNoFloat.Declare
	v.Local.iDaysLate.Declare
	v.Local.sNextOper.Declare
	v.Local.fRemHrs.Declare
	v.Local.sDept.Declare
	v.Local.dCurOperDate.Declare
	v.Local.dShipDate.Declare
	v.Local.sJobStatus.Declare
	v.Local.dNewDateWithFloat.Declare
	v.Local.dNewDateNoFloat.Declare
	v.Local.dDateCheck.Declare
	v.Local.iDaysLateRecip.Declare
	v.Local.iDaysLateNoFloatRecip.Declare
	v.Local.fTotRemainNoFloatRecip.Declare
	v.Local.fTotRemainRecip.Declare
	v.Local.dNewDate.Declare
	v.Local.sJobSteps.Declare
	v.Local.sStep.Declare
	v.Local.lret.Declare
	v.Local.sSearch.Declare
	v.Local.sJob.Declare
	v.Local.sSuffix.Declare
	v.local.sRet.Declare
	v.Local.iCounter.Declare
	v.Local.dDateFull.Declare
	v.Local.sMonth.Declare
	v.Local.sYear.Declare
	v.Local.sDay.Declare
	v.Local.sFile.Declare
	v.Local.bLongPart.Declare
	v.Local.sCustPO.Declare
	v.Local.sDescription.Declare
	V.Local.sTempDate.Declare(String)
	V.Local.dTempDate.Declare(Date)
	V.Local.iWorkDayMask.Declare(Long)
	V.Local.bDayActive.Declare(Boolean)
	V.Local.x.Declare(Long)
	V.Local.bFileExists.Declare
	V.Local.sFileSource.Declare
	V.Local.sFileTarget.Declare
	v.Local.iRet.Declare
	
	' System Support > Administration > Company Options (Advanced) > Inventory
	'	At the bottom, either Use Long Part (Large Inventory) or Use Long Part (Small Inventory)
	F.Global.General.ReadOption("400861",0,False,"0000",V.Local.bLongPart)
	F.Intrinsic.Control.If(V.Local.bLongPart,=,False)
		F.Global.General.ReadOption("400861",0,False,"0004",V.Local.bLongPart)
	F.Intrinsic.Control.EndIf
	
	'Get Manufacturing - Material Scheduling Days
	F.Intrinsic.Control.For(V.Local.iCnt,0,6,1)
		F.Global.General.ReadOption(401144,0,False,V.Local.iCnt,V.Local.bDayActive)
		F.Intrinsic.Control.If(V.Local.bDayActive)
			F.Intrinsic.Control.SelectCase(V.Local.iCnt)
				F.Intrinsic.Control.Case(0)		'Sunday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,1,V.Local.iWorkDayMask)
				F.Intrinsic.Control.Case(1)		'Monday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,2,V.Local.iWorkDayMask)
				F.Intrinsic.Control.Case(2)		'Tuesday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,4,V.Local.iWorkDayMask)
				F.Intrinsic.Control.Case(3)		'Wednesday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,8,V.Local.iWorkDayMask)
				F.Intrinsic.Control.Case(4)		'Thursday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,16,V.Local.iWorkDayMask)
				F.Intrinsic.Control.Case(5)		'Friday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,32,V.Local.iWorkDayMask)
				F.Intrinsic.Control.Case(6)		'Saturday
					F.Intrinsic.Math.Add(V.Local.iWorkDayMask,64,V.Local.iWorkDayMask)
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	F.Intrinsic.Control.If(V.DataTable.dtAll.Exists,=,True)
		F.Data.DataTable.Close("dtAll")
	F.Intrinsic.Control.EndIf
	
'	F.Intrinsic.Control.If(V.DataTable.dtAll2.Exists,=,True)
'		f.Data.DataTable.Close("dtAll2")
'	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOper.Exists,=,True)
		f.Data.DataTable.Close("dtOper")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllO.Exists,=,True)
		f.Data.DataTable.Close("dtAllO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllM.Exists,=,True)
		f.Data.DataTable.Close("dtAllM")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOperRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtOperRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllORemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtAllORemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtAllMRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtAllMRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtChildMatRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtChildMatRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtChildLabrRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtChildLabrRemoveWO")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtChildOutsRemoveWO.Exists,=,True)
		f.Data.DataTable.Close("dtChildOutsRemoveWO")
	F.Intrinsic.Control.EndIf
	
	
	
	'SQL is All Work Orders
	'SQL2 is Work Centre 
	'SQL3 is Materials Purchasing
	'SQL4 is Outside Process Purchasing
	v.Local.ssql1.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label',  ' ' AS 'MaterialIssue', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE',  CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, ' ' As DISPLAY_PART, '' AS 'PartFriendly', VJH.PART_DESCRIPTION AS DESCRIPTION, VIM2.DESCRIPTION_2 AS 'ALT_DESC_1', VIM2.DESCRIPTION_3 AS 'ALT_DESC_2', VIET.TEXT AS INV_EXTRA_TEXT, VIM.CODE_SORT AS PART_CODE_SORT, VIM.UM_INVENTORY AS INVUM, VJH.QTY_ORDER, VJH.QTY_ORDER - QTY_COMPLETED AS PCS_REM1,  VJH.DATE_CLOSED, DATE_DUE, DATE_DUE-1 AS 'DATE_DUE_NEW', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) AS 'DAYS_LATE', CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT',  CONVERT(0.00,SQL_FLOAT) AS EST_HRS,NUM_HOURS AS ACT_HRS,CONVERT(0.00,SQL_FLOAT) AS REM_HRS,CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE, ' ' as 'JobSteps', ' ' AS CUR_OPER, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * VJH.QTY_ORDER) AS 'PRICE_EXT', CONVERT(0,SQL_FLOAT) AS EST_AMT_MATERIAL, VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, CONVERT(0,SQL_FLOAT) AS EST_TOTALCOST, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT, IF(VJH.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', RTRIM(VJH.CUSTOMER) AS CUSTOMER FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_INVENTORY_MSTR VIM ON VIM.PART = VJH.PART AND VIM.LOCATION = VJH.LOCATION LEFT JOIN V_INVENTORY_MST2 VIM2 ON VIM2.PART = VJH.PART AND VIM2.LOCATION = VJH.LOCATION LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, DATE_DUE;")

'	v.Local.ssql2.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', APS.SEQ, RTRIM(APS.SEQRES) AS 'SEQRES',   if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, QTY_ORDER, DATE_DUE, ' ' AS CUR_OPER, (InitSU+HoursOrig) AS EST_HRS, HoursAppl AS ACT_HRS, (InitSU+HoursOrig) - HoursAppl AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', CUSTOMER_PO, VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT, IF(VJH.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', RTRIM(VJH.CUSTOMER) AS CUSTOMER FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN APSV3_JBLines APS ON VJH.JOB = APS.JOB AND VJH.SUFFIX = APS.SFX AND APS.SEQTYPE = 1 AND IFNULL(APS.COMPLDATE,'1900-01-01')='1900-01-01' WHERE LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, SEQ, DATE_DUE")
	v.Local.ssql2.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', CAST(CASE WHEN FLAG_WO_PRTD = 'Y' OR FLAG_WO_PRTD = 'R' THEN 1 ELSE 0 END AS BIT) AS PRINTED, CAST(CASE WHEN FLAG_WO_RELEASED = 'Y' THEN 1 ELSE 0 END AS BIT) AS RELEASED, CASE WHEN VJH.FLAG_HOLD = 'Y' THEN CONVERT(1,SQL_BIT) WHEN VJH.FLAG_HOLD = 'N' THEN CONVERT(0,SQL_BIT) ELSE CONVERT(0,SQL_BIT) END AS FLAG_HOLD, ' ' as 'PrtDocCntrl', ' ' AS 'MaterialIssue', CONCAT(VJH.JOB,CONCAT('-',VJH.SUFFIX)) AS 'WO_Label', VJO.SEQ, RTRIM(VJO.PART) AS 'SEQRES', CUSTOMER_PO, if(VJH.SALES_ORDER='0000000','',VJH.SALES_ORDER) AS 'SALES_ORDER', if(VJH.SALES_ORDER_LINE='000','',VJH.SALES_ORDER_LINE) AS 'SALES_ORDER_LINE', ' ' AS 'JobStatus', VCM.NAME_CUSTOMER AS NAME_CUSTOMER,  ' ' AS 'CodeSort', ' ' As DISPLAY_PART, VJH.PART_DESCRIPTION AS DESCRIPTION, VIET.TEXT AS INV_EXTRA_TEXT, QTY_ORDER,  VJH.DATE_CLOSED, VJH.DATE_DUE, ' ' AS CUR_OPER, VJO.HOURS_ESTIMATED AS EST_HRS, VJO.HOURS_ACTUAL AS ACT_HRS, (VJO.HOURS_ESTIMATED - VJO.HOURS_ACTUAL) AS REM_HRS, ' ' AS NEXT_OPER, ' ' AS OUTSIDE, CAST(0 AS INTEGER) AS 'DAYS_LATE', ' ' as 'JobSteps', VJH.PROJECT, VJH.SALESPERSON, '' AS 'PartFriendly', QTY_ORDER - QTY_COMPLETED AS PCS_REM1, CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_FLOAT', CONVERT('1900-01-01',SQL_DATE) AS 'DATE_DUE_NO_FLOAT', SCHEDULED_DUE_DATE, DATE_ORIG_DUE, CAST(0 AS INTEGER) as 'DAYS_LATE_NO_FLOAT', CONVERT(0.00,SQL_FLOAT) AS TOT_HRS_REM,' ' AS DEPT, CONVERT(NULL,SQL_DATE) AS CUR_OPER_DATE,   CONVERT(NULL,SQL_DATE) AS SHIP_TO_OP, GWN.NOTES AS 'WO_NOTE',RTRIM(VWUF.USER_6) AS 'WO_NOTE2', (VJH.AMT_PRICE_PER_UNIT * QTY_ORDER) AS 'PRICE_EXT', VJH.AMT_MATERIAL, VJH.AMT_LABOR, VJH.AMT_OVERHEAD, VJH.OUTS, VJH.FREIGHT, VJH.OTHER, (VJH.AMT_MATERIAL + VJH.AMT_LABOR + VJH.AMT_OVERHEAD + VJH.OUTS + VJH.FREIGHT + VJH.OTHER) AS 'TOTALCOST', '' AS 'CodeSort2', PRIORITY,  RTRIM(COALESCE(VJH.PART,'')) AS PART,VJH.LOCATION,VJH.PRODUCT_LINE, DATE_OPENED,(SELECT TOP 1 VJO.DATE_START FROM V_JOB_OPERATIONS VJO WHERE VJO.LMO = 'L' AND VJO.JOB = VJH.JOB AND VJO.SUFFIX = VJH.SUFFIX AND VJO.SEQ < '990000') AS DATE_START, CONCAT(VJH.JOB,VJH.SUFFIX) AS JS,CONVERT(0,SQL_BIT) AS IND_FLAG,CONVERT(0,SQL_BIT) AS LATE,'' AS PCS_REM, '' as 'SOUSER_3', '' as 'SOUSER_4', '' as 'SOUSER_5', '' as 'SONotes', '' AS 'RowChange', CONVERT('1900-01-01',SQL_DATE) as 'SODate', ' ' as 'SOTerms', VJH.PHASE, VJH.JOB, VJH.SUFFIX, VJH.AMT_PRICE_PER_UNIT, IF(VJH.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', RTRIM(VJH.CUSTOMER) AS CUSTOMER FROM V_JOB_HEADER VJH LEFT JOIN V_CUSTOMER_MASTER VCM ON VJH.CUSTOMER=VCM.CUSTOMER  LEFT JOIN V_WO_USER_FLDS VWUF ON VJH.JOB = VWUF.JOB AND VJH.SUFFIX = VWUF.SUFFIX LEFT JOIN GAB_4169_WO_NOTES GWN ON VJH.JOB = GWN.JOB AND VJH.SUFFIX = GWN.SUFFIX LEFT JOIN V_ORDER_TO_WO OWO ON VJH.JOB = OWO.JOB AND VJH.SUFFIX = OWO.SUFFIX LEFT JOIN V_ORDER_LINES VOL ON OWO.ORDER_NO = VOL.ORDER_NO AND OWO.ORDER_LINE = VOL.RECORD_NO LEFT JOIN V_ORDER_BILL_TO VOB ON VOL.ORDER_NO = VOB.ORDER_NO LEFT JOIN V_JOB_OPERATIONS VJO ON VJH.JOB = VJO.JOB AND VJH.SUFFIX = VJO.SUFFIX AND VJO.LMO = 'L' AND IFNULL(VJO.DATE_COMPLETED,'1900-01-01')='1900-01-01' LEFT JOIN V_INV_EXTRA_TEXT VIET ON VIET.PART = VJH.PART WHERE LEFT(VJH.JOB,1)<>'Z'  ORDER BY WO_Label, SEQ, VJH.DATE_DUE")

'	v.Local.ssql3.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUROP', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE, D.TIME_MATERIAL_LEAD AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed', RTRIM(C.CUSTOMER) AS CUSTOMER FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed', RTRIM(C.CUSTOMER) AS CUSTOMER FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,'') AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(H.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed', RTRIM(C.CUSTOMER) AS CUSTOMER FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE LEFT JOIN V_WO_SEQ_COMMENTS H ON H.WO = A.JOB AND H.WO_SUFFIX = A.SUFFIX AND H.WO_SEQ = A.SEQ WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', A.HOURS_ESTIMATED - A.HOURS_ACTUAL, IF(D.FACTOR_CONVERSION = 0.00, A.HOURS_ESTIMATED - A.HOURS_ACTUAL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION)) AS PUR_QTY, IF(A.LMO = 'O', A.UM,IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', D.FACTOR_CONVERSION AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")	
'	v.Local.ssql3.Set("SELECT DISTINCT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")	
	v.Local.ssql3.Set("SELECT A.LMO, CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', ' ' AS 'JobStatus', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label',  RTRIM(C.CUSTOMER) as CUSTOMER, VCM.NAME_CUSTOMER AS NAME_CUSTOMER, C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, C.ROUTER, C.DESCRIPTION AS 'RouterDescription', RTRIM(C.PART) AS 'Part', C.PART AS 'PartWoTrim', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', CASE WHEN A.LMO = 'M' THEN IFNULL(D.PRODUCT_LINE,'') WHEN A.LMO = 'O' THEN IFNULL(E.PRODUCT_LINE,'') END AS 'PL', A.DESCRIPTION AS DESCR, F.DESCRIPTION_2 AS 'ALT_DESC_1', F.DESCRIPTION_3 AS 'ALT_DESC_2', '' AS INV_EXTRA_TEXT, '' AS WO_6271_NOTES, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ',IF(F.CODE_SOURCE='M','MS',IF(F.CODE_SOURCE='F','MJ','')))) AS 'CODE_SOURCE', D.CODE_SORT AS MATPART_CODE_SORT, F.TEXT_INFO1 AS USER1DEFINED, CONVERT(0,SQL_INTEGER) AS 'TRUNCATED_MEAN', A.OPERATION AS OPCODE, '' as 'SEQ_COMMENT', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,  '' AS LAST_PO_BUYER_CODE, '' AS LAST_PO_BUYER_NAME, '' AS 'PO_VENDOR', RTRIM(F.NAME_VENDOR) AS 'INV_VENDOR', '' AS 'LAST_PO_VENDOR', '' AS 'LAST_PO_VENDOR_NAME', '' AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', CAST(0 AS BIT) AS 'PoExist', '' AS 'PURCHASE_ORDER', '' AS LINE, '' AS 'TEXT', '' AS 'PO_COST', CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE, CONVERT('1900-01-01', SQL_DATE) AS ORDER_REQD_DATE,  COALESCE(D.TIME_MATERIAL_LEAD,0) AS MATL_LEAD_TIME, CONVERT(A.DATE_DUE, SQL_DATE) AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(A.LMO = 'O', CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), IF(D.FACTOR_CONVERSION = 0.00, CAST(A.HOURS_ESTIMATED - A.HOURS_ACTUAL AS NUMERIC(18,2)), CAST((A.HOURS_ESTIMATED - A.HOURS_ACTUAL) / D.FACTOR_CONVERSION AS NUMERIC(18,2)))) AS PUR_QTY, IF(A.LMO = 'O', A.UM, LTRIM(RTRIM(IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING)))) AS 'PURUM', IF(A.LMO = 'O', A.UM, D.UM_INVENTORY) AS 'INVUM', IF(A.LMO = 'O', CAST(0.00000 AS NUMERIC(18,5)), CAST(D.FACTOR_CONVERSION AS NUMERIC(18,5))) AS 'PUR_CNV_FACTOR', CAST(0.00 AS NUMERIC(18,6)) AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MSTR E ON C.PART = E.PART AND C.LOCATION = E.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_CUSTOMER_MASTER VCM ON C.CUSTOMER=VCM.CUSTOMER LEFT JOIN INVENTORY_MST3 IM3 ON A.PART = IM3.PART AND C.LOCATION = IM3.LOCATION WHERE A.LMO IN ('M','O') AND LEFT(A.JOB,1)<>'Z' AND (LEFT(A.SEQ,2)<>'99' OR (LEFT(A.SEQ,2)='99' AND IM3.TEMP_PURCH='Y')) ORDER BY A.SEQ")	
	
	
'	V.Local.sSql4.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed', RTRIM(C.CUSTOMER) AS CUSTOMER FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND C.LOCATION = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,1)<>'9' ORDER BY A.SEQ")
'	V.Local.sSql4.Set("SELECT DISTINCT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed', RTRIM(C.CUSTOMER) AS CUSTOMER FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
	V.Local.sSql4.Set("SELECT CAST(0 AS BIT) AS 'SelectWO', ' ' as 'PrtDocCntrl',  C.DATE_DUE, ' ' AS 'CUR_OPER', ' ' AS 'MaterialIssue', ' ' AS 'MaterialManage', CONCAT(A.JOB,CONCAT('-',rtrim(A.SUFFIX))) AS 'WO_Label', C.CUSTOMER_PO AS 'CUSTOMER_PO', C.SALES_ORDER, C.SALES_ORDER_LINE, RTRIM(C.PART) AS 'Part', ' ' AS 'CodeSort', A.SEQ, rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 17), INV_LXR.DISPLAY_PART)) AS 'DISPLAY_PART', RTRIM(A.PART) as 'MatPart', ' ' as 'MatDisplayPart', IFNULL(D.PRODUCT_LINE,C.PRODUCT_LINE) AS 'PL', A.DESCRIPTION AS DESCR, '' AS INV_EXTRA_TEXT, IF(F.CODE_SOURCE='P','PS',IF(F.CODE_SOURCE='J','PJ','PJ')) AS 'CODE_SOURCE', A.BURDEN, A.HOURS_ESTIMATED AS PCSTOPROD, IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND, A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN, RTRIM(IFNULL(E.VENDOR,A.OPERATION)) AS 'VENDOR', 'BROWSE' AS 'VendorSearch',  '' AS 'VendorName', '' AS 'VendorCurrency', 'BROWSE' AS 'VendorQuoteSearch', '' AS 'MfgPart', '' AS 'MfgName', '' AS 'VendorQuoteSeq', '' as 'PartFriendly', E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,G.TEXT, IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE, A.DATE_DUE AS 'LINEDUE', D.AMT_COST, D.AMT_ALT_COST, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', 0.00 AS 'COST', CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS, A.JOB, A.SUFFIX, C.LOCATION, RTRIM(A.PART)+'*!*'+RTRIM(IFNULL(E.VENDOR, RTRIM(F.NAME_VENDOR))) AS PartVendor, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', FLAG_CLOSED AS 'SeqClosed', RTRIM(C.CUSTOMER) AS CUSTOMER FROM V_JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND IF(A.LOCN='00','',A.LOCN) = D.LOCATION LEFT JOIN INVENTORY_MST2 F ON A.PART = F.PART AND IF(A.LOCN='00','',A.LOCN) = F.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN PO_LN_TEXT G ON E.PURCHASE_ORDER = G.PO_NUM AND E.RECORD_NO = G.LINE WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND LEFT(A.SEQ,2)<>'99' ORDER BY A.SEQ")
	
	'update the query accordingly and create datatable
	'For all records
	F.Data.DataTable.CreateFromSQL("dtAll","con",v.Local.ssql1,True)
	
	'For workcentre dispatch
	F.Data.DataTable.CreateFromSQL("dtOper","con",v.Local.ssql2,True)
	
	'Create table for Material and Outside. Then later filter for material (dtAllM) and Outside (dtAllO)
	f.Intrinsic.Control.If(v.DataTable.dtMO.Exists)
		f.Data.DataTable.Close("dtMO")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtMO","con",v.Local.ssql3,True)
	
	'Fill some data from Dictionary
	'WO 6271 Notes
	f.Data.Dictionary.CreateFromSQL("d6271Notes","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQ) AS JSS, NOTES from GAB_6271_WO_NOTES;")
	f.Data.Dictionary.SetDefaultReturn("d6271Notes","")
	f.Data.DataTable.FillFromDictionary("dtMO","d6271Notes","JSS","WO_6271_NOTES")
	f.Data.Dictionary.Close("d6271Notes")
	
	'Job Seq Comments
	f.Data.Dictionary.CreateFromSQL("dJobSeqComments","con","select CONCAT(CONCAT(WO,WO_SUFFIX),WO_SEQ) AS JSS, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' from V_WO_SEQ_COMMENTS WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
	f.Data.Dictionary.SetDefaultReturn("dJobSeqComments","")
	f.Data.DataTable.FillFromDictionary("dtMO","dJobSeqComments","JSS","SEQ_COMMENT")
	f.Data.Dictionary.Close("dJobSeqComments")
	
'	'Purchase Order Information
'	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE, IF(LTRIM(RTRIM(EXCHANGE_CURR)) = '' OR LTRIM(RTRIM(EXCHANGE_CURR)) = 'USD', COST_6_DEC, EXCHANGE_COST2) AS PO_COST from V_PO_LINES WHERE JOB <> ''")
'	f.Data.DataView.Create("dtPOInfo","dvPOInfo",22,"","JSS")
'	'PO No
'	f.Data.Dictionary.CreateFromDataView("dPONo","dtPOInfo","dvPOInfo","JSS","PURCHASE_ORDER")
'	f.Data.Dictionary.SetDefaultReturn("dPONo","")
'	f.Data.DataTable.FillFromDictionary("dtMO","dPONo","JSS","PURCHASE_ORDER")
'	f.Data.Dictionary.Close("dPONo")
'	'PO Line
'	f.Data.Dictionary.CreateFromDataView("dPOLine","dtPOInfo","dvPOInfo","JSS","LINE")
'	f.Data.Dictionary.SetDefaultReturn("dPOLine","")
'	f.Data.DataTable.FillFromDictionary("dtMO","dPOLine","JSS","LINE")
'	f.Data.Dictionary.Close("dPOLine")
'	'Vendor
'	f.Data.Dictionary.CreateFromDataView("dVendor","dtPOInfo","dvPOInfo","JSS","VENDOR")
'	f.Data.Dictionary.SetDefaultReturn("dVendor","")
'	f.Data.DataTable.FillFromDictionary("dtMO","dVendor","JSS","PO_VENDOR")
'	f.Data.Dictionary.Close("dVendor")
'	'PO Line Cost
'	f.Data.Dictionary.CreateFromDataView("dPOCost","dtPOInfo","dvPOInfo","JSS","PO_COST")
'	f.Data.Dictionary.SetDefaultReturn("dPOCost","")
'	f.Data.DataTable.FillFromDictionary("dtMO","dPOCost","JSS","PO_COST")
'	f.Data.Dictionary.Close("dPOCost")

	'Purchase Order Information
'	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE, IF(LTRIM(RTRIM(EXCHANGE_CURR)) = '' OR LTRIM(RTRIM(EXCHANGE_CURR)) = 'USD', COST_6_DEC, EXCHANGE_COST2) AS PO_COST from V_PO_LINES WHERE JOB <> ''")
	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE, IF(LTRIM(RTRIM(EXCHANGE_CURR)) = '' OR LTRIM(RTRIM(EXCHANGE_CURR)) = 'USD', COST_6_DEC, EXCHANGE_COST2) AS PO_COST, RTRIM(LTRIM(UM_PURCHASING)) AS PUR_UM, CAST(IF(UM_PURCHASING <> UM_INVENTORY AND QTY_ORDER <> 0, QTY_ALT_ORDER/QTY_ORDER, 0.00000) AS NUMERIC(18,5)) AS PUR_CNV_FACTOR from V_PO_LINES WHERE JOB <> ''")
	f.Data.DataView.Create("dtPOInfo","dvPOInfo",22,"","JSS")
	'PO No
	f.Data.Dictionary.CreateFromDataView("dPONo","dtPOInfo","dvPOInfo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.SetDefaultReturn("dPONo","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPONo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.Close("dPONo")
	'PO Line
	f.Data.Dictionary.CreateFromDataView("dPOLine","dtPOInfo","dvPOInfo","JSS","LINE")
	f.Data.Dictionary.SetDefaultReturn("dPOLine","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOLine","JSS","LINE")
	f.Data.Dictionary.Close("dPOLine")
	'Vendor
	f.Data.Dictionary.CreateFromDataView("dVendor","dtPOInfo","dvPOInfo","JSS","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dVendor","")
	f.Data.DataTable.FillFromDictionary("dtMO","dVendor","JSS","PO_VENDOR")
	f.Data.Dictionary.Close("dVendor")
	'PO Line Cost
	f.Data.Dictionary.CreateFromDataView("dPOCost","dtPOInfo","dvPOInfo","JSS","PO_COST")
	f.Data.Dictionary.SetDefaultReturn("dPOCost","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOCost","JSS","PO_COST")
	f.Data.Dictionary.Close("dPOCost")
	'PO Purchasing UM
	f.Data.DataTable.AddColumn("dtMO","PO_PURUM","String")
	f.Data.Dictionary.CreateFromDataView("dPOPurUM","dtPOInfo","dvPOInfo","JSS","PUR_UM")
	f.Data.Dictionary.SetDefaultReturn("dPOPurUM","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOPurUM","JSS","PO_PURUM")
	f.Data.Dictionary.Close("dPOPurUM")
	'If the PO Purchase UM is not blank then use the PO Purchase UM else use the Purchase UM from Inventory Master
	f.Data.DataTable.AddExpressionColumn("dtMO","FinalPurUM","String","IIF(PO_PURUM <> '',PO_PURUM,PURUM)")
	f.Data.DataTable.CopyColumn("dtMO","FinalPurUM","PURUM")
	f.Data.DataTable.RemoveColumn("dtMO","FinalPurUM")
	f.Data.DataTable.RemoveColumn("dtMO","PO_PURUM")
	'PO Purchasing Conversion Factor
	f.Data.DataTable.AddColumn("dtMO","PO_PUR_CNV_FACTOR","Float")
	f.Data.Dictionary.CreateFromDataView("dPOPurCnvFactor","dtPOInfo","dvPOInfo","JSS","PUR_CNV_FACTOR")
	f.Data.Dictionary.SetDefaultReturn("dPOPurCnvFactor",0.00000)
	f.Data.DataTable.FillFromDictionary("dtMO","dPOPurCnvFactor","JSS","PO_PUR_CNV_FACTOR")
	f.Data.Dictionary.Close("dPOPurCnvFactor")
	'If the PO Purchase Conversion Factor is not 0.00000 then use the PO Purchase Conversion Factor else use the Purchase Conversion Factor from Inventory Master
	f.Data.DataTable.AddExpressionColumn("dtMO","FinalPurCnvFactor","Float","IIF(PO_PUR_CNV_FACTOR <> 0.00000,PO_PUR_CNV_FACTOR,PUR_CNV_FACTOR)")
	f.Data.DataTable.CopyColumn("dtMO","FinalPurCnvFactor","PUR_CNV_FACTOR")
	f.Data.DataTable.RemoveColumn("dtMO","FinalPurCnvFactor")
	f.Data.DataTable.RemoveColumn("dtMO","PO_PUR_CNV_FACTOR")
	
	'Last PO Vendor
	f.Data.DataTable.CreateFromSQL("dtLastPO","con","select RTRIM(A.PART) AS MatPart, RTRIM(A.BUYER) AS BUYER_CODE, RTRIM(A.VENDOR) AS VENDOR from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' ORDER BY A.PART;")
	f.Data.DataView.Create("dtLastPO","dvLastPO",22,"","")
	'Last PO Vendor
	f.Data.Dictionary.CreateFromDataView("dLastPOVendor","dtLastPO","dvLastPO","MatPart","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dLastPOVendor","")
	f.Data.DataTable.FillFromDictionary("dtMO","dLastPOVendor","MatPart","LAST_PO_VENDOR")
	f.Data.Dictionary.Close("dLastPOVendor")
	'Last PO Vendor Name
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER where RTRIM(VENDOR) <> '';")
	F.Data.Dictionary.SetDefaultReturn("dVend","")
	F.Data.DataTable.FillFromDictionary("dtMO","dVend","LAST_PO_VENDOR","LAST_PO_VENDOR_NAME")
	F.Data.Dictionary.Close("dVend")
	'Last PO Buyer Code
	f.Data.Dictionary.CreateFromDataView("dLastPOBuyerCode","dtLastPO","dvLastPO","MatPart","BUYER_CODE")
	f.Data.Dictionary.SetDefaultReturn("dLastPOBuyerCode","")
	f.Data.DataTable.FillFromDictionary("dtMO","dLastPOBuyerCode","MatPart","LAST_PO_BUYER_CODE")
	f.Data.Dictionary.Close("dLastPOBuyerCode")
	'Last PO Buyer Name
	f.Data.Dictionary.CreateFromSQL("dLastPOBuyerName","con","select RTRIM(BUYER_CODE) AS BUYER_CODE, RTRIM(NAME) AS BUYER_NAME from BUYER_DESCRIPTOR;")
	F.Data.Dictionary.SetDefaultReturn("dLastPOBuyerName","")
	F.Data.DataTable.FillFromDictionary("dtMO","dLastPOBuyerName","LAST_PO_BUYER_CODE","LAST_PO_BUYER_NAME")
	F.Data.Dictionary.Close("dLastPOBuyerName")
	'Close DataTable & DataView
	f.Data.DataView.Close("dtLastPO","dvLastPO")
	f.Data.DataTable.Close("dtLastPO")
	
	'PoExist Flag
	f.Data.Dictionary.CreateFromSQL("dPoExist","con","select rtrim(a.part) as 'MatPart', CONVERT(if(sum(a.qty_order-a.qty_received-a.qty_reject) > 0, 1, 0), SQL_BIT) as 'PoExist' from v_po_lines a left join v_po_header b on a.purchase_order = b.purchase_order where b.flag_recv_closed <> 'Y' and a.flag_recv_close <> 'Y' group by a.part;")
	F.Data.Dictionary.SetDefaultReturn("dPoExist",False)
	F.Data.DataTable.FillFromDictionary("dtMO","dPoExist","MatPart","PoExist")
	F.Data.Dictionary.Close("dPoExist")
	
	'Hierarchy of VENDOR CODE/NAME
	'1. PO Line associated with the WO Sequence
	'2. Inventory Preferred Vendor
	'3. PO History based on PO Date
	'Add Expression Column
'	f.Data.DataTable.AddExpressionColumn("dtMO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,INV_VENDOR)")
'	f.Data.DataTable.AddExpressionColumn("dtMO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,IIF(LAST_PO_VENDOR<>'',LAST_PO_VENDOR,INV_VENDOR))")
	f.Data.DataTable.AddExpressionColumn("dtMO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,IIF(INV_VENDOR<>'',INV_VENDOR,LAST_PO_VENDOR))")
	'Create Dataview
	f.Data.DataView.Create("dtMO","dvVendorInfo",22,"","JSS")
	f.Data.Dictionary.CreateFromDataView("dVendorInfo","dtMO","dvVendorInfo","JSS","TempVendor")
	f.Data.Dictionary.SetDefaultReturn("dVendorInfo","")
	f.Data.DataTable.FillFromDictionary("dtMO","dVendorInfo","JSS","VENDOR")
	f.Data.Dictionary.Close("dVendorInfo")
	f.Data.DataView.Close("dtMO","dvVendorInfo")
	'Delete Column
	f.Data.DataTable.RemoveColumn("dtMO","TempVendor")
'	f.Data.DataTable.RemoveColumn("dtMO","PO_VENDOR")
'	f.Data.DataTable.RemoveColumn("dtMO","INV_VENDOR")
	
	'Date Due Line
	f.Data.Dictionary.CreateFromDataView("dDateDueLine","dtPOInfo","dvPOInfo","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.SetDefaultReturn("dDateDueLine","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtMO","dDateDueLine","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.Close("dDateDueLine")
	'Close DataTable & DataView
	F.Data.DataView.Close("dtPOInfo","dvPOInfo")
	F.Data.DataTable.Close("dtPOInfo")
	
	'Purchase Order Line Text
	'Add Expression Column
	f.Data.DataTable.AddExpressionColumn("dtMO","POLN","String","PURCHASE_ORDER+LINE")
	f.Data.Dictionary.CreateFromSQL("dPOLineText","con","SELECT CONCAT(PO_NUM,LEFT(LINE,3)) AS POLN, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') AS TEXT FROM PO_LN_TEXT WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
	f.Data.Dictionary.SetDefaultReturn("dPOLineText","")
	f.Data.DataTable.FillFromDictionary("dtMO","dPOLineText","POLN","TEXT")
	f.Data.Dictionary.Close("dPOLineText")
	'Remove Expression Column
	f.Data.DataTable.RemoveColumn("dtMO","POLN")
	
	'Add Expression Column
'	f.Data.DataTable.AddExpressionColumn("dtMO","PartVendor","String","MatPart+'*!*'+VENDOR")
	
	'For materials - dtAllM from dtMO
	f.Data.DataView.Create("dtMO","dvMO",22,"LMO = 'M'","")
	f.Data.DataView.ToDataTable("dtMO","dvMO","dtAllM",True)
	f.Data.DataTable.RemoveColumn("dtAllM","LMO")
	f.Data.DataView.Create("dtAllM","dvAllM",22,"","")
	'Remove columns from dtAllM
	f.Data.DataTable.RemoveColumn("dtAllM","PO_VENDOR")
	f.Data.DataTable.RemoveColumn("dtAllM","INV_VENDOR")
	'Add Expression Column
	f.Data.DataTable.AddExpressionColumn("dtAllM","PartVendor","String","MatPart+'*!*'+VENDOR")
	
	'For outside list - dtAllO from dtMO
	f.Data.DataView.SetFilter("dtMO","dvMO","LMO = 'O'")
	f.Data.DataView.ToDataTable("dtMO","dvMO","dtAllO",True)
	
	'Retrieving Last PO Information for dtAllO	
	'Matching based on Job Header Part + Outside Process Description + Vendor
	f.Data.DataTable.AddExpressionColumn("dtAllO","OutsideServicePart","String","SUBSTRING([PartWoTrim],1,16)+'*'+SUBSTRING([PartWoTrim],18,3)")
	f.Data.DataTable.AddExpressionColumn("dtAllO","HeaderPart","String","[OutsideServicePart]+TRIM([DESCR])")
	f.Data.DataTable.AddExpressionColumn("dtAllO","PartVendorOutsideService","String","[OutsideServicePart]+'*!*'+TRIM([DESCR])+'*!*'+TRIM(VENDOR)")
	
	'Last PO Vendor
	f.Data.DataTable.CreateFromSQL("dtLastPO","con","select A.PART + RTRIM(A.DESCRIPTION) AS HeaderPart, RTRIM(A.BUYER) AS BUYER_CODE, RTRIM(A.VENDOR) AS VENDOR from PO_HISTORY A INNER JOIN (select PART, DESCRIPTION, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART, DESCRIPTION) B ON A.PART = B.PART AND A.DESCRIPTION = B.DESCRIPTION AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' and SUBSTRING(A.PART,17,1) = '*' ORDER BY HeaderPart;")
	f.Data.DataView.Create("dtLastPO","dvLastPO",22,"","")
	
	'Last PO Vendor
	f.Data.Dictionary.CreateFromDataView("dLastPOVendor","dtLastPO","dvLastPO","HeaderPart","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dLastPOVendor","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dLastPOVendor","HeaderPart","LAST_PO_VENDOR")
	f.Data.Dictionary.Close("dLastPOVendor")
	'Last PO Vendor Name
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER where RTRIM(VENDOR) <> '';")
	F.Data.Dictionary.SetDefaultReturn("dVend","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVend","LAST_PO_VENDOR","LAST_PO_VENDOR_NAME")
	F.Data.Dictionary.Close("dVend")
	'Last PO Buyer Code
	f.Data.Dictionary.CreateFromDataView("dLastPOBuyerCode","dtLastPO","dvLastPO","HeaderPart","BUYER_CODE")
	f.Data.Dictionary.SetDefaultReturn("dLastPOBuyerCode","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dLastPOBuyerCode","HeaderPart","LAST_PO_BUYER_CODE")
	f.Data.Dictionary.Close("dLastPOBuyerCode")
	'Last PO Buyer Name
	f.Data.Dictionary.CreateFromSQL("dLastPOBuyerName","con","select RTRIM(BUYER_CODE) AS BUYER_CODE, RTRIM(NAME) AS BUYER_NAME from BUYER_DESCRIPTOR;")
	F.Data.Dictionary.SetDefaultReturn("dLastPOBuyerName","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dLastPOBuyerName","LAST_PO_BUYER_CODE","LAST_PO_BUYER_NAME")
	F.Data.Dictionary.Close("dLastPOBuyerName")
	'Close DataTable & DataView
	f.Data.DataView.Close("dtLastPO","dvLastPO")
	f.Data.DataTable.Close("dtLastPO")
	
	'Hierarchy of VENDOR CODE/NAME
	'1. PO Line associated with the WO Sequence
	'2. Inventory Preferred Vendor
	'3. PO History based on PO Date
	'Add Expression Column
	f.Data.DataTable.AddExpressionColumn("dtAllO","TempVendor","String","IIF(PO_VENDOR<>'',PO_VENDOR,IIF(INV_VENDOR<>'',INV_VENDOR,LAST_PO_VENDOR))")
	'Create Dataview
	f.Data.DataView.Create("dtAllO","dvVendorInfo",22,"","JSS")
	f.Data.Dictionary.CreateFromDataView("dVendorInfo","dtAllO","dvVendorInfo","JSS","TempVendor")
	f.Data.Dictionary.SetDefaultReturn("dVendorInfo","")
	f.Data.DataTable.FillFromDictionary("dtAllO","dVendorInfo","JSS","VENDOR")
	f.Data.Dictionary.Close("dVendorInfo")
	f.Data.DataView.Close("dtAllO","dvVendorInfo")
	'Delete Column
	f.Data.DataTable.RemoveColumn("dtAllO","TempVendor")
	f.Data.DataTable.RemoveColumn("dtAllO","PO_VENDOR")
	f.Data.DataTable.RemoveColumn("dtAllO","INV_VENDOR")	
	'Delete Additional Columns
	f.Data.Datatable.RemoveColumn("dtAllO","OPCODE")
	f.Data.Datatable.RemoveColumn("dtAllO","SEQ_COMMENT")
	f.Data.Datatable.RemoveColumn("dtAllO","QTY_REQUIRED")
	f.Data.Datatable.RemoveColumn("dtAllO","QTY_ONORDER_PO")
	f.Data.Datatable.RemoveColumn("dtAllO","ORDER_REQD_DATE")
	f.Data.Datatable.RemoveColumn("dtAllO","MATL_LEAD_TIME")
	f.Data.DataTable.RemoveColumn("dtAllO","LMO")
	f.Data.DataTable.RemoveColumn("dtAllO","USER1DEFINED")
	f.Data.DataTable.RemoveColumn("dtAllO","PoExist")
	f.Data.DataView.Create("dtAllO","dvAllO",22,"","")
	
	'Delete dtMO
	f.Data.DataTable.Close("dtMO")
	
'	'For material list
'	F.Data.DataTable.CreateFromSQL("dtAllM","con",v.Local.ssql3,True)
'	
'	'For outside list
'	F.Data.DataTable.CreateFromSQL("dtAllO","con",v.Local.ssql4,True)
	
	'Long Part
	f.Intrinsic.Control.If(v.Local.bLongPart)
		F.Data.DataTable.AddDisplayPartColumn("dtAll",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtAll",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtOper",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtOper",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtAllM",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtAllM",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtAllM",0,"MATPART","MatDisplayPart")
		F.Data.DataTable.AddDisplayPartColumn("dtAllO",0,"PART","DISPLAY_PART")
		F.Data.DataTable.AddDisplayPartColumn("dtAllO",0,"PART","PartFriendly")
		F.Data.DataTable.AddDisplayPartColumn("dtAllO",0,"MATPART","MatDisplayPart")
	f.Intrinsic.Control.Else
		F.Data.DataTable.CopyColumn("dtAll","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAll","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtOper","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtOper","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllM","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAllM","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllM","MATPART","MatDisplayPart")
		F.Data.DataTable.CopyColumn("dtAllO","PART","DISPLAY_PART")
		F.Data.DataTable.CopyColumn("dtAllO","PART","PartFriendly")
		F.Data.DataTable.CopyColumn("dtAllO","MATPART","MatDisplayPart")
	f.Intrinsic.Control.EndIf
	
	'RF, ADD IN JOB STEPS*******************************************************************
	f.Intrinsic.Control.If(v.DataTable.dtAll.RowCount,>,0)
		f.Intrinsic.Math.Mult(v.DataTable.dtAll.RowCount,2,v.Local.iMax)
	f.Intrinsic.Control.EndIf
	'Get the mininum job number
	f.ODBC.Connection!CON.ExecuteAndReturn("Select Min(Job) as JobMin from v_Job_header WHERE DATE_CLOSED = '1900-1-1' ",v.Local.sMinJob)
	f.Intrinsic.Control.If(v.Local.sMinJob,=,"")
		v.Local.sMinJob.Set("000000")
	f.Intrinsic.Control.EndIf
	
'	'Get all Job Operations where job >= minjob. This is to avoid getting the whole v_job_operations which is too big	
''	f.Intrinsic.String.Build("Select Job, Suffix, Seq, LMO, Description, Part as PartWO, Flag_Closed, Units_Open, Date_Start, Date_Due, PO_Assigned,'' as POHead, Date_PO_Order,Job + '-' + Suffix + '-' + Seq as JobSuffixSeq from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '990000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
'	f.Intrinsic.String.Build("Select Job, Suffix, Seq, LMO, Description, Part as PartWO, Flag_Closed, Units_Open, Date_Start, Date_Due, PO_Assigned,'' as POHead, Date_PO_Order,Job + '-' + Suffix + '-' + Seq as JobSuffixSeq from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '995000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
'	f.Intrinsic.Control.If(v.DataTable.JobOp.Exists)
'		f.Data.DataTable.close("JobOp")
'	f.Intrinsic.Control.EndIf
'	f.Data.DataTable.CreateFromSQL("JobOp","CON",v.Local.sSQL,True)	
	
	'Get Order header Data
	f.Intrinsic.Control.If(v.DataTable.dtOrd.Exists)
		f.Data.DataTable.Close("dtOrd")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtOrd","con","SELECT * FROM ORDER_HEADER")
	f.Intrinsic.Control.If(v.DataTable.dtSONotes.Exists)
		f.Data.DataTable.Close("dtSONotes")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtSONotes","con","SELECT * FROM GAB_4167_SO_NOTES")
	
	'Get all Material steps
	f.Intrinsic.Control.If(v.DataTable.JobMat.Exists)
		f.Data.DataTable.close("JobMat")
	f.Intrinsic.Control.EndIf
'	f.Data.DataTable.CreateFromSQL("JobMat","Con","SELECT DISTINCT JOB, SUFFIX, FLAG_CLOSED FROM JOB_OPERATIONS WHERE LMO='M' and (seq<>'995000' and seq<>'998000')",true)
	f.Data.DataTable.CreateFromSQL("JobMat","Con","SELECT JOB, SUFFIX, FLAG_CLOSED FROM JOB_OPERATIONS WHERE LMO='M' and (seq<>'995000' and seq<>'998000') GROUP BY JOB, SUFFIX, FLAG_CLOSED",true)
	
'	'Get Job Steps	
'	f.Data.DataTable.AddExpressionColumn("JobOp","JobSteps","String","IIF(Flag_Closed = 'Y','~' + trim(PartWO),trim(PartWO))")
'	f.Data.DataView.Create("JobOp","dvJobOp")
'	f.Intrinsic.String.Concat(v.Caller.GasDir,"\GAB_6271_COMPLETION.txt",v.Local.sCMarkFile)
'	f.Intrinsic.File.File2String(v.Local.sCMarkFile,v.Local.sMark)
'	f.Intrinsic.Math.Add(v.DataTable.dtAll.RowCount,1,v.Local.lMax)
'	F.Intrinsic.Control.If(v.Local.lMax,=,0)
'		v.Local.lMax.Set(1)
'	F.Intrinsic.Control.EndIf
	
	'Add column for datatable ID row
	f.Data.DataTable.AddColumn("dtAll","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtAllM","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtAllO","MyRowID",Integer)
	f.Data.DataTable.AddColumn("dtOper","MyRowID",Integer)
	
'	'Getting Material, Labor, and Outiside for Work Order in dtAll
'	f.Intrinsic.Control.If(v.DataTable.dtChildMat.Exists)
'		f.Data.DataTable.Close("dtChildMat")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.dtChildMatMisc.Exists)
'		f.Data.DataTable.Close("dtChildMatMisc")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.dtChildLabr.Exists)
'		f.Data.DataTable.Close("dtChildLabr")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.dtChildOuts.Exists)
'		f.Data.DataTable.Close("dtChildOuts")
'	f.Intrinsic.Control.EndIf	
'	
'	'Materials
''	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,RTRIM(E.VENDOR) AS VENDOR,E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
'	f.Data.DataTable.CreateFromSQL("dtChildMat","con",v.Local.sSQL,true)
''	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,NULL AS DATE_DUE_LINE,'' AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM',RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ = '995000' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, C.CUSTOMER, C.SALES_ORDER, A.FLAG_CLOSED, VWSC.TEXT ORDER BY SEQ1")
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT', SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM',RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, C.CUSTOMER, C.SALES_ORDER, A.FLAG_CLOSED ORDER BY SEQ1")
'	f.Data.DataTable.CreateFromSQL("dtChildMatMisc","con",v.Local.sSQL,true)
'	
'	'Fill some data from Dictionary
'	'Job Seq Comments
'	f.Data.Dictionary.CreateFromSQL("dJobSeqComments","con","select CONCAT(CONCAT(WO,WO_SUFFIX),WO_SEQ) AS JSS, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' from V_WO_SEQ_COMMENTS WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
'	f.Data.Dictionary.SetDefaultReturn("dJobSeqComments","")
'	f.Data.DataTable.FillFromDictionary("dtChildMat","dJobSeqComments","JSS","SEQ_COMMENT")
'	f.Data.DataTable.FillFromDictionary("dtChildMatMisc","dJobSeqComments","JSS","SEQ_COMMENT")
'	
'	'Purchase Order Information
'	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE from V_PO_LINES WHERE JOB <> ''")
'	f.Data.DataView.Create("dtPOInfo","dvPOInfo",22,"","JSS")
'	'PO No
'	f.Data.Dictionary.CreateFromDataView("dPONo","dtPOInfo","dvPOInfo","JSS","PURCHASE_ORDER")
'	f.Data.Dictionary.SetDefaultReturn("dPONo","")
'	f.Data.DataTable.FillFromDictionary("dtChildMat","dPONo","JSS","PURCHASE_ORDER")
'	f.Data.Dictionary.Close("dPONo")
'	'PO Line
'	f.Data.Dictionary.CreateFromDataView("dPOLine","dtPOInfo","dvPOInfo","JSS","LINE")
'	f.Data.Dictionary.SetDefaultReturn("dPOLine","")
'	f.Data.DataTable.FillFromDictionary("dtChildMat","dPOLine","JSS","LINE")
'	f.Data.Dictionary.Close("dPOLine")
'	'Vendor
'	f.Data.Dictionary.CreateFromDataView("dVendor","dtPOInfo","dvPOInfo","JSS","VENDOR")
'	f.Data.Dictionary.SetDefaultReturn("dVendor","")
'	f.Data.DataTable.FillFromDictionary("dtChildMat","dVendor","JSS","VENDOR")
'	f.Data.Dictionary.Close("dVendor")
'	'Date Due Line
'	f.Data.Dictionary.CreateFromDataView("dDateDueLine","dtPOInfo","dvPOInfo","JSS","DATE_DUE_LINE")
'	f.Data.Dictionary.SetDefaultReturn("dDateDueLine","1900-01-01")
'	f.Data.DataTable.FillFromDictionary("dtChildMat","dDateDueLine","JSS","DATE_DUE_LINE")
'	f.Data.Dictionary.Close("dDateDueLine")
'	'Close DataTable & DataView
'	F.Data.DataView.Close("dtPOInfo","dvPOInfo")
'	F.Data.DataTable.Close("dtPOInfo")
'	
'	'Merge both datatable
'	f.Data.DataTable.Merge("dtChildMatMisc","dtChildMat",true,2)	
'	
'	'Labour
''	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.SEQ AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM, RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ NOT IN ('996000','998500') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM, RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ NOT IN ('996000','998500') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'	f.Data.DataTable.CreateFromSQL("dtChildLabr","con",v.Local.sSQL,true)
'	
'	'Fill some data from Dictionary
'	'Job Seq Comments
'	f.Data.DataTable.FillFromDictionary("dtChildLabr","dJobSeqComments","JSS","SEQ_COMMENT")
'	
'	'Outside
''	v.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',RTRIM(E.CUSTOMER) AS CUSTOMER, RTRIM(E.SALES_ORDER) AS SALES_ORDER, IF(E.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'	v.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT',RTRIM(E.CUSTOMER) AS CUSTOMER, RTRIM(E.SALES_ORDER) AS SALES_ORDER, IF(E.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'	f.Data.DataTable.CreateFromSQL("dtChildOuts","con",v.Local.sSQL,true)
'	
'	'Fill some data from Dictionary
'	'Job Seq Comments
'	f.Data.DataTable.FillFromDictionary("dtChildOuts","dJobSeqComments","JSS","SEQ_COMMENT")
'	
'	'Close dJobSeqComments
'	f.Data.Dictionary.Close("dJobSeqComments")
	
'	'Start the massive loop and start going through all the values!
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtAll.RowCount--,1)
'		f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MyRowID",v.Local.iCnt)
'		
'		'Find the row ids in the dtOper table first, this will be needed for updating
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtOper",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.DataTable.dtOperIds.Exists)
'			f.Data.Datatable.close("dtOperIds")
'		f.Intrinsic.Control.EndIf
'		F.Data.Datatable.CreateFromString("dtOperIds",v.Local.sRet,"RowID","string","","*!*",true)
'		
'		'fIND THE ROW Ids for dtAllM
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtAllM",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.DataTable.dtAllMIds.Exists)
'			f.Data.Datatable.close("dtAllMIds")
'		f.Intrinsic.Control.EndIf
'		F.Data.Datatable.CreateFromString("dtAllMIds",v.Local.sRet,"RowID","string","","*!*",true)
'		
'		'fIND THE ROW Ids for dtAllO
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtAllO",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.DataTable.dtAllOIds.Exists)
'			f.Data.Datatable.close("dtAllOIds")
'		f.Intrinsic.Control.EndIf
'		F.Data.Datatable.CreateFromString("dtAllOIds",v.Local.sRet,"RowID","string","","*!*",true)
'		
'		'Set normal variables
'		v.Local.sCustPO.Set(V.DataTable.dtAll(V.Local.iCnt).CUSTOMER_PO!FIELDVALTRIM)
'		f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUSTOMER_PO,"OperValue",V.DataTable.dtAll(V.Local.iCnt).CUSTOMER_PO!FIELDVALTRIM)
'		
'		'Order sort
'		f.Intrinsic.String.Build("ORDER_NO='{0}' AND RECORD_TYPE='A'",v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtOrd",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"CodeSort",v.DataTable.dtOrd(v.Local.sret(0)).CODE_SORT!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CodeSort,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).CODE_SORT!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"CodeSort2",v.DataTable.dtOrd(v.Local.sret(0)).ORDER_SORT_2!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CodeSort2,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).ORDER_SORT_2!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOTerms",v.DataTable.dtOrd(v.Local.sret(0)).Terms!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOTerms,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).Terms!FIELDVALTRIM)
'			
'			f.Intrinsic.String.Left(v.DataTable.dtOrd(v.Local.sRet(0)).DATE_ORDER!FIELDVAL,2,v.Local.sMonth)
'			f.Intrinsic.String.Right(v.DataTable.dtOrd(v.Local.sRet(0)).DATE_ORDER!FIELDVAL,2,V.Local.sYear)
'			f.Intrinsic.String.Mid(v.DataTable.dtOrd(v.Local.sRet(0)).DATE_ORDER!FIELDVAL,3,2,V.Local.sDay)
'			f.Intrinsic.Date.DateSerial(v.Local.sYear,v.Local.sMonth,v.Local.sDay,v.Local.dDateFull)
'			
'			'Need to format the date properly
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SODate",v.Local.dDateFull)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SODate,"OperValue",v.Local.dDateFull)
'		f.Intrinsic.Control.EndIf
'		
'		'SO lines 1 & 2
'		f.Intrinsic.String.Build("ORDER_NO='{0}' AND RECORD_NO='{1}0'",v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER_LINE!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtOrd",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOUSER_3",v.DataTable.dtOrd(v.Local.sret(0)).USER_3!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOUSER_3,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).USER_3!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOUSER_4",v.DataTable.dtOrd(v.Local.sret(0)).USER_4!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOUSER_4,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).USER_4!FIELDVALTRIM)
'			
'			F.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SOUSER_5",v.DataTable.dtOrd(v.Local.sret(0)).USER_5!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SOUSER_5,"OperValue",V.DataTable.dtOrd(v.Local.sret(0)).USER_5!FIELDVALTRIM)
'		f.Intrinsic.Control.EndIf
'		
'		'SO Notes
'		f.Intrinsic.String.Build("SO='{0}' AND SOLINE='{1}'",v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SALES_ORDER_LINE!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("dtSONotes",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"SONotes",V.DataTable.dtSONotes(v.Local.sret(0)).NOTES!FIELDVALTRIM)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",SONotes,"OperValue",V.DataTable.dtSONotes(v.Local.sret(0)).NOTES!FIELDVALTRIM)
'		f.Intrinsic.Control.EndIf
'		
'		'Material check
'		f.Intrinsic.Control.If(v.Local.iCnt,=,218)
'			'f.Intrinsic.Debug.ShowCallerInfo
'		f.Intrinsic.Control.EndIf
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.DataTable.dtAll(v.Local.iCnt).JOB!FIELDVALTRIM,v.DataTable.dtAll(v.Local.iCnt).SUFFIX!FIELDVALTRIM,v.Local.sSearch)
'		f.Data.DataTable.Select("JobMat",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"***NORETURN***")
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","ALL")
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","ALL")
'		f.Intrinsic.Control.Else
'			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.If(v.Local.sRet.UBound,>,0)
'				'Partial material issued, make it a two
'				f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","SOME")
'				f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","SOME")
'				f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","SOME")
'				f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","SOME")
'			F.Intrinsic.Control.Else
'				F.Intrinsic.Control.If(V.DataTable.JobMat(V.Local.sRet(0)).FLAG_CLOSED!FIELDVALTRIM,=,"")
'					f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","NONE")
'					f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","NONE")
'					f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","NONE")
'					f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","NONE")
'				f.Intrinsic.Control.Else
'					f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"MaterialIssue","ALL")
'					f.Intrinsic.Control.CallSub(setOperData,"OperColumn",MaterialIssue,"OperValue","ALL")
'					f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",MaterialIssue,"MatlValue","ALL")
'					f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",MaterialIssue,"OutsValue","ALL")
'				F.Intrinsic.Control.EndIf
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf

'		V.Local.sJob.Set(V.DataTable.dtAll(V.Local.iCnt).JOB!FieldVal)
'		V.Local.sSuffix.Set(V.DataTable.dtAll(V.Local.iCnt).SUFFIX!FieldVal)
'		
''		'Debugging purpose
''		''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''		F.Intrinsic.String.Build("{0}-{1}{2}",V.Local.sJob,V.Local.sSuffix,V.Ambient.NewLine,V.Local.sRet)
''		F.Intrinsic.File.Append2File("C:\Users\tdjohan\AppData\Local\Temp\GSS\GAB_6271_OU.debug",V.Local.sRet)
''		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'		
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSearch)
'		f.Data.DataTable.Select("JobOp",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.For(v.local.iCounter,0,v.Local.sRet.UBound,1)
'				v.Local.sStep.Set(v.DataTable.JobOp(v.Local.sRet(v.Local.iCounter)).JOBSTEPS!FIELDVALTRIM)
'				
'				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"TASK")
'					v.Local.sStep.Set(v.DataTable.jobOp(v.Local.sRet(v.Local.iCounter)).DESCRIPTION!FIELDVALTRIM)
'				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"~TASK")
'					f.Intrinsic.String.Concat("~",v.DataTable.jobOp(v.Local.sRet(v.Local.iCounter)).DESCRIPTION!FIELDVALTRIM,v.Local.sStep)
'				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.String.Concat(v.Local.sJobsteps,v.Local.sStep," / ",v.Local.sJobSteps)
'			f.Intrinsic.Control.Next(v.Local.iCounter)
'			F.Intrinsic.String.InstrRev(V.Local.sJobSteps,"/",V.Local.lret)
'			f.Intrinsic.Math.Sub(v.Local.lret,1,v.Local.lret)
'			f.Intrinsic.String.Left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
'			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
'		f.Intrinsic.Control.Else
'			v.Local.sJobSteps.Set("")
'		f.Intrinsic.Control.EndIf

'		f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"JobSteps",v.Local.sJobSteps)
'		f.Intrinsic.Control.CallSub(setOperData,"OperColumn",JobSteps,"OperValue",v.Local.sJobSteps)
'		
'		v.Local.sJobSteps.Set("")
'		F.Intrinsic.String.Build("SELECT TOP 2 A.JOB,A.SFX,A.SEQ,A.SEQTYPE,A.SEQRES,A.PCSREMAIN,A.STARTDATE,IF(WORK_GROUP <> '',D.WC_DEPT,B.WC_DEPT) AS DEPT FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2' AND A.JOB = '{0}' AND A.SFX = '{1}' ORDER BY A.JOB,A.SFX,A.SEQ;",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'		F.ODBC.Connection!CON.OpenLocalRecordsetRO("rstInfo",V.Local.sSQL)
'		V.Local.sDept.Set("")
'		V.Local.sCurOper.Set("")
'		V.Local.dCurOperDate.Set(01/01/1900)
'		V.Local.sNextOper.Set("")
'		V.Local.sOutside.Set("")
'		V.Local.dShipDate.Set(01/01/1900)
'		F.Intrinsic.Control.If(V.ODBC.CON!rstInfo.EOF,=,True)
'			V.Local.sCurOper.Set("WIPTOFG")
'			V.Local.fPcsRem.Set(0)
'			V.Local.sNextOper.Set("")
'			V.Local.sDept.Set("")
'		F.Intrinsic.Control.Else
'			F.Intrinsic.Control.DoUntil(V.ODBC.CON!rstInfo.EOF,=,True)
'				F.Intrinsic.Control.SelectCase(V.ODBC.CON!rstInfo.FieldValTrim!SEQTYPE)
'					F.Intrinsic.Control.Case(1)
'						F.Intrinsic.Control.If(V.Local.sCurOper,=,"")
'							V.Local.sDept.Set(V.ODBC.CON!rstInfo.FieldValTrim!DEPT)
'							V.Local.sCurOper.Set(V.ODBC.CON!rstInfo.FieldValTrim!SEQRES)
'							F.Intrinsic.Control.If(V.ODBC.CON!rstInfo.FieldVal!STARTDATE,=,"")
'								V.Local.dCurOperDate.Set(01/01/1900)
'							F.Intrinsic.Control.Else
'								V.Local.dCurOperDate.Set(V.ODBC.CON!rstInfo.FieldVal!STARTDATE)
'							F.Intrinsic.Control.EndIf
'							V.Local.fPcsRem.Set(V.ODBC.CON!rstInfo.FieldValFloat!PCSREMAIN)
'						F.Intrinsic.Control.Else
'							V.Local.sNextOper.Set(V.ODBC.CON!rstInfo.FieldValTrim!SEQRES)
'							V.Local.fPcsRem.Set(V.ODBC.CON!rstInfo.FieldValFloat!PCSREMAIN)
'						F.Intrinsic.Control.EndIf
'					F.Intrinsic.Control.Case(3)
'						F.Intrinsic.Control.If(V.Local.sCurOper,=,"")
'							V.Local.sDept.Set("")
'							V.Local.sCurOper.Set("OUTSIDE")
'							F.Intrinsic.Control.If(V.ODBC.CON!rstInfo.FieldVal!STARTDATE,=,"")
'								V.Local.dCurOperDate.Set(01/01/1900)
'							F.Intrinsic.Control.Else
'								V.Local.dCurOperDate.Set(V.ODBC.CON!rstInfo.FieldVal!STARTDATE)
'							F.Intrinsic.Control.EndIf
'							V.Local.fPcsRem.Set(V.ODBC.CON!rstInfo.FieldValFloat!PCSREMAIN)
'						F.Intrinsic.Control.Else
'							F.Intrinsic.Control.If(V.Local.sOutside,=,"")
'								V.Local.sNextOper.Set("OUTSIDE")
'							F.Intrinsic.Control.Else
'								V.Local.sNextOper.Set("OUTSIDE")
'							F.Intrinsic.Control.EndIf
'						F.Intrinsic.Control.EndIf
'				F.Intrinsic.Control.EndSelect
'			F.ODBC.CON!rstInfo.MoveNext
'			F.Intrinsic.Control.Loop
'		F.Intrinsic.Control.EndIf
'		F.ODBC.CON!rstInfo.Close

'		F.Intrinsic.String.Build("SELECT TOP 1 SEQRES,STARTDATE FROM APSV3_JBLINES WHERE SEQTYPE = '3' AND JOB = '{0}' AND SFX = '{1}' AND COMPLDATE IS NULL ORDER BY SEQ;",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'		F.ODBC.Connection!CON.ExecuteAndReturn(V.Local.sSQL,V.Local.sOutside)
'		F.Intrinsic.String.Split(V.Local.sOutside,"*!*",V.Local.sOutside)
'		F.Intrinsic.Control.If(V.Local.sOutside(1),=,"OOB",OR,V.Local.sOutside(1),=,"")
'			V.Local.dShipDate.Set(01/01/1900)
'		F.Intrinsic.Control.Else
'			V.Local.dShipDate.Set(V.Local.sOutside(1))
'		F.Intrinsic.Control.EndIf
'		V.Local.sOutside.Set(V.Local.sOutside(0))

'		F.Intrinsic.String.Build("SELECT SEQTYPE, CONVERT(HOURSORIG+INITSU,SQL_NUMERIC) AS EST_HRS, IFNULL(COMPLDATE,'1900-01-01') AS COMPLDATENEW, Float, SPM, HoursAppl, (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float) as TotHrsRem,(((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))) as TotHrsRemNoFloat FROM APSV3_JBLINES WHERE (SEQTYPE = '1' OR SEQTYPE='3') AND JOB = '{0}' AND SFX = '{1}'  AND COMPLDATENEW='1900-01-01' ;",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'		f.Intrinsic.Control.If(v.DataTable.dtSeq.Exists)
'			f.Data.DataTable.Close("dtSeq")
'		f.Intrinsic.Control.EndIf
'		f.Data.DataTable.CreateFromSQL("dtSEQ","con",v.Local.sSQL)
'		F.Intrinsic.Control.If(V.Local.SJOB,=,"012391")
'		F.Intrinsic.Control.AndIf(V.Local.sSuffix,=,"001")
''			f.Intrinsic.Debug.ShowCallerInfo
'		F.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.dtSeq.RowCount--,1)
'			F.Intrinsic.Control.If(v.DataTable.dtSeq(v.Local.iCounter).SeqType!fieldvalfloat,=,1)
'				F.Intrinsic.Math.Add(V.Local.fEstHrs,v.DataTable.dtSeq(v.Local.iCounter).EST_HRS!FIELDVAL,V.Local.fEstHrs)
'			F.Intrinsic.Control.EndIf
'			f.Intrinsic.Math.Add(v.Local.fTotRemain,v.datatable.dtSEQ(v.Local.iCounter).TotHrsRem!fieldval,v.Local.fTotRemain)
'			f.Intrinsic.Math.Add(v.Local.fTotRemainNoFloat,v.datatable.dtSEQ(v.Local.iCounter).TotHrsRemNoFloat!fieldval,v.Local.fTotRemainNoFloat)
'		f.Intrinsic.Control.Next(v.Local.iCounter)

'		F.Intrinsic.Control.If(V.Local.fEstHrs,=,0)
'			V.Local.fEstHrs.Set(0.00)
'			V.Local.fRemHrs.Set(0.00)
'		F.Intrinsic.Control.Else
'			F.Intrinsic.Math.Sub(V.Local.fEstHrs,V.DataTable.dtAll(V.Local.iCnt).ACT_HRS!FieldValFloat,V.Local.fRemHrs)
'		F.Intrinsic.Control.EndIf
'		
'		'Set Days Late

'		'Subtract 1 day off from the due date
'		f.Intrinsic.Date.DateAdd("D",-1,v.DataTable.dtAll(v.Local.icnt).DATE_DUE!FIELDVAL,v.Local.dNewDate)
'		'Reciprocal for the total remaining time and rounded
'		f.Intrinsic.Math.Mult(v.Local.fTotRemain,"-1",v.Local.fTotRemainRecip)
'		f.Intrinsic.Math.Mult(v.Local.fTotRemainNoFloat,"-1",v.Local.fTotRemainNoFloatRecip)
'		f.Intrinsic.Control.If(v.Local.fTotRemainRecip,<>,0)
'			F.Intrinsic.Math.Div(V.Local.fTotRemainRecip,8,v.Local.fTotRemainRecip)
'			F.Intrinsic.Math.Round(v.Local.fTotRemainRecip,0,v.Local.fTotRemainRecip)
'		f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.If(v.Local.fTotRemainNoFloatRecip,<>,0)
'			F.Intrinsic.Math.Div(V.Local.fTotRemainNoFloatRecip,8,v.Local.fTotRemainNoFloatRecip)
'			F.Intrinsic.Math.Round(v.Local.fTotRemainNoFloatRecip,0,v.Local.fTotRemainNoFloatRecip)
'		f.Intrinsic.Control.EndIf
'		'Subtract the total remain days
'				
'		f.Intrinsic.Date.DateAdd("D",v.Local.fTotRemainRecip,v.Local.dNewDate,v.Local.dNewDateWithFloat)
'		f.Intrinsic.Date.DateAdd("D",v.Local.fTotRemainNoFloatRecip,v.Local.dNewDate,v.Local.dNewDateNoFloat)
'		'Calculate days behind
'		f.Intrinsic.Date.DateDiff("D",V.Ambient.Date,V.Local.dNewDateWithFloat,V.Local.iDaysLate)
'		f.Intrinsic.Date.DateDiff("D",V.Ambient.Date,V.Local.dNewDateNoFloat,V.Local.iDaysLateNoFloat)
'		'Set the dates one final time
'		f.Intrinsic.Math.Mult(v.Local.iDaysLate,"-1",v.Local.iDaysLateREcip)
'		f.Intrinsic.Math.Mult(v.Local.iDaysLateNoFloat,"-1",v.Local.iDaysLateNoFloatRecip)
'		f.Intrinsic.Date.DateAdd("D",v.Local.iDaysLateRecip,v.Local.dNewDate,v.Local.dNewDateWithFloat)
'		f.Intrinsic.Date.DateAdd("D",v.Local.iDaysLateNoFloatRecip,v.local.dNewDate,v.Local.dNewDateNoFloat)
'		
'		f.Intrinsic.Control.If(v.DataTable.dtAll(v.Local.iCnt).DATE_DUE!FIELDVAL,>,v.Local.dNewDateWithFloat)
'			v.Local.sJobStatus.Set("OKAY")
'		f.Intrinsic.Control.ElseIf(v.DataTable.dtAll(v.Local.iCnt).DATE_DUE!FIELDVAL,<,v.Local.dNewDateWithFloat)
'			f.Intrinsic.Control.If(v.DataTable.dtAll(v.Local.iCnt).DATE_DUE!FIELDVAl,>=,v.Local.dNewDateNoFloat)
'				v.Local.sJobStatus.Set("ATTENTION")
'			F.Intrinsic.Control.Else
'				v.Local.sJobStatus.Set("ISSUE")
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf

'		F.Intrinsic.Control.If(V.Local.dCurOperDate,=,V.Local.dDateCheck)
'		F.Intrinsic.Control.AndIf(V.Local.dShipDate,=,V.Local.dDateCheck)
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)			
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.ElseIf(V.Local.dCurOperDate,=,V.Local.dDateCheck)
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"SHIP_TO_OP",V.Local.dShipDate,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.ElseIf(V.Local.dShipDate,=,V.Local.dDateCheck)
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"CUR_OPER_DATE",V.Local.dCurOperDate,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.Else
'			F.Data.DataTable.SetValue("dtAll",V.Local.iCnt,"EST_HRS",V.Local.fEstHrs,"REM_HRS",V.Local.fRemHrs,"TOT_HRS_REM",V.Local.fTotRemain,"DEPT",V.Local.sDept,"CUR_OPER",V.Local.sCurOper,"CUR_OPER_DATE",V.Local.dCurOperDate,"NEXT_OPER",V.Local.sNextOper,"OUTSIDE",V.Local.sOutside,"SHIP_TO_OP",V.Local.dShipDate,"PCS_REM",V.Local.fPcsRem,"DAYS_LATE",v.Local.iDaysLate,"DAYS_LATE_NO_FLOAT",v.Local.iDaysLateNoFloat,"JOBSTATUS",v.Local.sJobStatus,"DATE_DUE_FLOAT",v.Local.dNewDateWithFloat,"DATE_DUE_NO_FLOAT",v.Local.dNewDateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",CUR_OPER,"OperValue",v.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",NEXT_OPER,"OperValue",v.Local.sNextOper)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE,"OperValue",v.Local.iDaysLate)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",DAYS_LATE_NO_FLOAT,"OperValue",v.Local.iDaysLateNoFloat)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",PCS_REM,"OperValue",v.Local.fPcsRem)
'			f.Intrinsic.Control.CallSub(setOperData,"OperColumn",OUTSIDE,"OperValue",v.Local.sOutside)
'			f.Intrinsic.Control.CallSub(setAllMData,"MatlColumn",CUROP,"MatlValue",V.Local.sCurOper)
'			f.Intrinsic.Control.CallSub(setAllOData,"OutsColumn",CUROP,"OutsValue",V.Local.sCurOper)
'		F.Intrinsic.Control.EndIf
'		V.Local.fEstHrs.Set(0)
'		V.Local.fTotRemain.Set(0)
'		V.Local.fTotRemainNoFloat.Set(0)
'	f.Intrinsic.Control.Next(v.Local.iCnt)
'	'*************************************************************************************************

	
	'SO Terms
	f.Data.Dictionary.CreateFromSQL("dSOTerms","con","SELECT ORDER_NO AS 'SALES_ORDER', TERMS FROM V_ORDER_HEADER")
	f.Data.Dictionary.SetDefaultReturn("dSOTerms","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOTerms","SALES_ORDER","SOTERMS")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOTerms","SALES_ORDER","SOTERMS")
	F.Data.Dictionary.Close("dSOTerms")
	
	'CodeSort
	f.Data.Dictionary.CreateFromSQL("dCodeSort","con","SELECT ORDER_NO AS 'SALES_ORDER', CODE_SORT FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dCodeSort","")
	F.Data.DataTable.FillFromDictionary("dtAll","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtAllO","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtAllM","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.DataTable.FillFromDictionary("dtOper","dCodeSort","SALES_ORDER","CodeSort")
	F.Data.Dictionary.Close("dCodeSort")
	
	'CodeSort2
	f.Data.Dictionary.CreateFromSQL("dCodeSort2","con","SELECT ORDER_NO AS 'SALES_ORDER', ORDER_SORT_2 FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dCodeSort2","")
	F.Data.DataTable.FillFromDictionary("dtAll","dCodeSort2","SALES_ORDER","CodeSort2")
	F.Data.DataTable.FillFromDictionary("dtOper","dCodeSort2","SALES_ORDER","CodeSort2")
	F.Data.Dictionary.Close("dCodeSort2")
	
	'SODate
	f.Data.Dictionary.CreateFromSQL("dSodate","con","SELECT ORDER_NO AS 'SALES_ORDER', DATE_ORDER FROM V_ORDER_HEADER")
	F.Data.Dictionary.SetDefaultReturn("dSodate","01/01/1900")
	F.Data.DataTable.FillFromDictionary("dtAll","dSoDATE","SALES_ORDER","SODate")
	F.Data.DataTable.FillFromDictionary("dtOper","dSoDATE","SALES_ORDER","SODate")
	F.Data.Dictionary.Close("dSoDATE")
	
	'SOUSER_3
	f.Data.Dictionary.CreateFromSQL("dSOUSER_3","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALES_ORDER_LINE', USER_3 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_3","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOUSER_3","SALES_ORDER_LINE","SOUSER_3")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOUSER_3","SALES_ORDER_LINE","SOUSER_3")
	F.Data.Dictionary.Close("dSOUSER_3")
	
	'SOUSER_4
	f.Data.Dictionary.CreateFromSQL("dSOUSER_4","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALES_ORDER_LINE', USER_4 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_4","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOUSER_4","SALES_ORDER_LINE","SOUSER_4")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOUSER_4","SALES_ORDER_LINE","SOUSER_4")
	F.Data.Dictionary.Close("dSOUSER_4")
	
	'SOUSER_5
	f.Data.Dictionary.CreateFromSQL("dSOUSER_5","con","SELECT CONCAT(ORDER_NO,RECORD_NO) AS 'SALES_ORDER_LINE', USER_5 FROM V_ORDER_LINES")
	F.Data.Dictionary.SetDefaultReturn("dSOUSER_5","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSOUSER_5","SALES_ORDER_LINE","SOUSER_5")
	F.Data.DataTable.FillFromDictionary("dtOper","dSOUSER_5","SALES_ORDER_LINE","SOUSER_5")
	F.Data.Dictionary.Close("dSOUSER_5")
	
	'SONotes
	F.Data.Dictionary.CreateFromSQL("dSONotes","con","SELECT CONCAT(SO,CONCAT(SOLINE,'0')) AS 'SALES_ORDER_LINE', NOTES AS 'SONotes' FROM GAB_4167_SO_NOTES")
	F.Data.Dictionary.SetDefaultReturn("dSONotes","")
	F.Data.DataTable.FillFromDictionary("dtAll","dSONotes","JS","SONotes")
	F.Data.DataTable.FillFromDictionary("dtOper","dSONotes","JS","SONotes")
	F.Data.Dictionary.Close("dSONotes")
	
	'Material Status
	f.Intrinsic.Control.If(v.DataTable.dtIssue.Exists)
        f.Data.DataTable.close("dtIssue")
    f.Intrinsic.Control.EndIf
    f.Data.DataTable.CreateFromSQL("dtIssue","con","select Job+Suffix as JS,count(*) as SeqCount from Job_Operations where  LMO = 'M' and Seq < '990000' group by job,suffix",True)
	f.Data.Dictionary.CreateFromSQL("dAllReadyIssue","con","select Job+Suffix as JS,count(*) as SeqCount from Job_Operations where  LMO = 'M' and Seq < '990000' and IsNull(Flag_Closed,'') = 'Y' group by job,suffix")
    f.Data.Dictionary.SetDefaultReturn("dAllReadyIssue",0)
    f.Data.DataTable.AddColumn("dtIssue","SeqIssuedNum",Long,0)
    f.Data.DataTable.FillFromDictionary("dtIssue","dAllReadyIssue","JS","SeqIssuedNum")
    f.Data.DataTable.AddExpressionColumn("dtIssue","FlagIssue","String","IIF(SeqIssuedNum = SeqCount,'ALL',IIF(SeqIssuedNum = 0,'NONE','SOME'))")
    f.Data.Dictionary.CreateFromDatatable("dFlagIssue","dtIssue","JS","FlagIssue")
    f.Data.Dictionary.SetDefaultReturn("dFlagIssue","N/A")
    f.Data.DataTable.FillFromDictionary("dtAll","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtOper","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtAllM","dFlagIssue","JS","MaterialIssue")
    f.Data.DataTable.FillFromDictionary("dtAllO","dFlagIssue","JS","MaterialIssue")
    f.Data.Dictionary.close("dFlagIssue")
    f.Data.Dictionary.close("dAllReadyIssue")
	
	
	'Create dictionaries from APS table: logic: select top 2 record for each job+suffix. Based on fields to get, will need to first or the second record, so will use the dictionaries differently
	'Before this, they use a record set of top 2 row to find the value for these variables:
	V.Local.sDept.Set("")
	V.Local.sCurOper.Set("")
	V.Local.dCurOperDate.Set(01/01/1900)
	V.Local.sNextOper.Set("")
	V.Local.sOutside.Set("")	
	
	'Department (first row)
	f.Data.Dictionary.CreateFromSQL("dDept","con","Select A.JOB + A.SFX as JS,If(A.SeqType = '3','',IF(WORK_GROUP <> '',D.WC_DEPT,B.WC_DEPT))  AS DEPT FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dDept","")
	f.Data.DataTable.FillFromDictionary("dtAll","dDept","JS","DEPT")	
	f.Data.DataTable.FillFromDictionary("dtOper","dDept","JS","DEPT")	
	f.Data.Dictionary.Close("dDept")
	
	'CurOp (first row)
	f.Data.Dictionary.CreateFromSQL("dCurOp","con"," Select A.JOB + A.SFX as JS,LTRIM(RTRIM(If(A.SeqType = '3','OUTSIDE',SeqRes))) as CUR_OPER FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
'	f.Data.Dictionary.SetDefaultReturn("dCurOp","")
	f.Data.Dictionary.SetDefaultReturn("dCurOp","WIP to FG")
	f.Data.DataTable.FillFromDictionary("dtAll","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtOper","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtAllM","dCurOp","JS","CUR_OPER")
	F.Data.DataTable.FillFromDictionary("dtAllO","dCurOp","JS","CUR_OPER")
	f.Data.Dictionary.Close("dCurOp")
	
	'dCurOperDate (first row)
	f.Data.Dictionary.CreateFromSQL("dCurOperDate","con","Select A.JOB + A.SFX as JS,If(StartDate is Null,Convert('1900-01-01',SQL_Date),StartDate) as CUR_OPER_DATE FROM APSV3_JBLINES A  LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP   LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE  WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    ORDER BY A.JOB,A.SFX,A.SEQ")
	f.Data.Dictionary.SetDefaultReturn("dCurOperDate","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtAll","dCurOperDate","JS","CUR_OPER_DATE")
	f.Data.DataTable.FillFromDictionary("dtOper","dCurOperDate","JS","CUR_OPER_DATE")
	f.Data.Dictionary.Close("dCurOperDate")
	
	'sNextOper (second row)
	f.Data.Dictionary.CreateFromSQL("dNextOper","con","  Select A.JOb + A.SFX as JS,If(A.SeqType = '3','OUTSIDE',SeqRes) as NEXT_OPER   FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP  LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE   left join (select JOB  + SFX as JS,min(Seq) as MinSeq from   APSV3_JBLINES where COMPLDATE IS NULL and SEQTYPE <> '2' group by job,sfx) X on a.JS = x.JS WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    and a.Seq > x.MinSeq   ORDER BY A.JOB,A.SFX,A.SEQ; ")	
	f.Data.Dictionary.SetDefaultReturn("dNextOper","")
	f.Data.DataTable.FillFromDictionary("dtAll","dNextOper","JS","NEXT_OPER")
	f.Data.DataTable.FillFromDictionary("dtOper","dNextOper","JS","NEXT_OPER")
	f.Data.Dictionary.Close("dNextOper")
	
	'sPcsRem (second row)
	f.Data.Dictionary.CreateFromSQL("dPcsRem","con","  Select A.JOb + A.SFX as JS,PcsRemain   FROM APSV3_JBLINES A LEFT JOIN WORKCENTERS B ON A.SEQRES = B.MACHINE  LEFT JOIN WORKGROUP_HEAD C ON A.SEQRES = C.WORK_GROUP  LEFT JOIN WORKCENTERS D ON C.PROTOTYPE_WC = D.MACHINE   left join (select JOB  + SFX as JS,min(Seq) as MinSeq from   APSV3_JBLINES where COMPLDATE IS NULL and SEQTYPE <> '2' group by job,sfx) X on a.JS = x.JS WHERE A.COMPLDATE IS NULL AND A.SEQTYPE <> '2'    and a.Seq > x.MinSeq   ORDER BY A.JOB,A.SFX,A.SEQ; ")	
	f.Data.Dictionary.SetDefaultReturn("dPcsRem",0)	
	f.Data.DataTable.FillFromDictionary("dtAll","dPcsRem","JS","PCS_REM")
	f.Data.DataTable.FillFromDictionary("dtOper","dPcsRem","JS","PCS_REM")
	f.Data.Dictionary.Close("dPcsRem")
	''''''''''''''''''''''''''''''''''''''''''''''
	
	'Est_Hrs
	f.Data.Dictionary.CreateFromSQL("dEst_Hrs","con","SELECT JS, Sum( CONVERT(HOURSORIG+INITSU,SQL_NUMERIC)) AS EST_HRS  FROM APSV3_JBLINES  WHERE (SEQTYPE = '1')  group by JS")
	f.Data.Dictionary.SetDefaultReturn("dEst_Hrs",0)	
	f.Data.DataTable.FillFromDictionary("dtAll","dEst_Hrs","JS","EST_HRS")
	f.Data.DataTable.FillFromDictionary("dtOper","dEst_Hrs","JS","EST_HRS")
	f.Data.Dictionary.Close("dEst_Hrs")
	
	'Rem_Hrs
	f.Data.DataTable.AddExpressionColumn("dtAll","Remaining_Hrs","float","EST_HRS - ACT_HRS")
	f.Data.Dictionary.createfromdatatable("dRemHrs","dtAll","JS","Remaining_Hrs")
	f.Data.Dictionary.SetDefaultReturn("dRemHrs",0)
	f.Data.DataTable.FillFromDictionary("dtAll","dRemHrs","JS","REM_HRS")
	f.Data.DataTable.FillFromDictionary("dtOper","dRemHrs","JS","REM_HRS")
	f.Data.Dictionary.Close("dRemHrs")
	
	'Temporary columns to help with calculations
	F.Data.DataTable.AddColumn("dtAll","TOT_HRS_REM_NO_FLOAT",Float,"0")
	F.Data.DataTable.AddColumn("dtAll","TODAYS_DATE",Date,v.Ambient.Date)
	
	'Total hours remaining
	F.Intrinsic.Control.If(V.DataTable.dtTotHours.Exists)
		F.Data.Datatable.Close("dtTotHours")
	F.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("dtTotHours","con","SELECT JS, if((Sum( (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float))*-1)=0,0, (Sum( (((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl)) + Float))*-1)/8) AS TotHrsRem ,if((sum((((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))))*-1)=0,0,(sum((((HOURSORIG+INITSU) * (1+(1-SPM))) - (If(HoursAppl > (HOURSORIG+INITSU),(HOURSORIG+INITSU),HoursAppl))))*-1)/8) AS TotHrsRemNoFloat  FROM APSV3_JBLINES  WHERE (SEQTYPE = '1' or SeqType = '3' )  AND IFNULL(COMPLDATE,'1900-01-01')  = '1900-01-01'  group by JS",True)
	f.Data.Dictionary.CreateFromDatatable("dTotHrsRem","dtTotHours","JS","TotHrsRem")
	f.Data.Dictionary.SetDefaultReturn("dTotHrsRem",0)
	f.Data.DataTable.FillFromDictionary("dtAll","dTotHrsRem","JS","TOT_HRS_REM")
	f.Data.DataTable.FillFromDictionary("dtOper","dTotHrsRem","JS","TOT_HRS_REM")
	f.Data.Dictionary.Close("dTotHrsRem")
	
	'Total hours remaining without float
	f.Data.Dictionary.CreateFromDatatable("dTotHrsRemNoFloat","dtTotHours","JS","TotHrsRemNoFloat")
	f.Data.Dictionary.SetDefaultReturn("dTotHrsRemNoFloat",0)
	f.Data.DataTable.FillFromDictionary("dtAll","dTotHrsRemNoFloat","JS","TOT_HRS_REM_NO_FLOAT")
	f.Data.Dictionary.Close("dTotHrsRemNoFloat")
		
	'Subtract the hours converted into days from the due date 
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","TOT_HRS_REM","DATE_DUE_FLOAT")
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","TOT_HRS_REM_NO_FLOAT","DATE_DUE_NO_FLOAT")
	
	'======added for removing Date processing in loop==================
	'dtAll
	f.Data.DataTable.AddColumn("dtAll","Diff1","Long",0)
	f.Data.DataTable.AddColumn("dtAll","Diff2","Long",0)
	f.Data.DataTable.AddColumn("dtAll","Diff3","Long",0)
	f.Data.DataTable.AddColumn("dtAll","Diff4","Long",0)
	
	f.Data.DataTable.DateDiff("dtAll","SCHEDULED_DUE_DATE","DATE_DUE","d","Diff1")
	f.Data.DataTable.DateDiff("dtAll","DATE_CLOSED","DATE_DUE","d","Diff4")

	f.Data.DataTable.AddExpressionColumn("dtAll","DAYS_LATE_IND","Long","IIF(DATE_CLOSED = '1900-01-01',Diff1,Diff4)")
	F.Data.DataTable.CopyColumn("dtAll","DAYS_LATE_IND","DAYS_LATE")
	
	f.Data.DataTable.DateDiff("dtAll","DATE_DUE_FLOAT","TODAYS_DATE","d","Diff1")	
	f.Data.DataTable.DateDiff("dtAll","DATE_DUE_NO_FLOAT","TODAYS_DATE","d","Diff2")	
	
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","Diff1","DATE_DUE_FLOAT")
	F.Data.DataTable.DateAdd("dtAll","DATE_DUE_NEW","d","Diff2","DATE_DUE_NO_FLOAT")
	
	f.Data.DataTable.DateDiff("dtAll","DATE_DUE_NO_FLOAT","DATE_DUE","d","Diff3")
	F.Data.DataTable.CopyColumn("dtAll","Diff3","DAYS_LATE_NO_FLOAT")
	
	f.Data.DataTable.AddExpressionColumn("dtAll","Status2","String","IIF(DATE_DUE > DATE_DUE_FLOAT,'OKAY',IIF(DATE_DUE >= DATE_DUE_NO_FLOAT,'ATTENTION','ISSUE'))")
	f.Data.DataTable.CopyColumn("dtAll","Status2","JobStatus")
	
	F.Data.Datatable.RemoveColumn("dtAll","DAYS_LATE_IND")
	F.Data.DataTable.RemoveColumn("dtAll","Diff1")
	F.Data.DataTable.RemoveColumn("dtAll","Diff2")
	F.Data.DataTable.RemoveColumn("dtAll","Diff3")
	F.Data.DataTable.RemoveColumn("dtAll","Diff4")
	F.Data.Datatable.RemoveColumn("dtAll","Status2")
	
	'dtOper
	f.Data.DataTable.AddColumn("dtOper","Diff1","Long",0)
	f.Data.DataTable.AddColumn("dtOper","Diff2","Long",0)
	
	f.Data.DataTable.DateDiff("dtOper","SCHEDULED_DUE_DATE","DATE_DUE","d","Diff1")
	f.Data.DataTable.DateDiff("dtOper","DATE_CLOSED","DATE_DUE","d","Diff2")
	
	f.Data.DataTable.AddExpressionColumn("dtOper","DAYS_LATE_IND","Long","IIF(DATE_CLOSED = '1900-01-01',Diff1,Diff2)")
	F.Data.DataTable.CopyColumn("dtOper","DAYS_LATE_IND","DAYS_LATE")
	
	F.Data.DataTable.RemoveColumn("dtOper","DAYS_LATE_IND")
	F.Data.DataTable.RemoveColumn("dtOper","Diff1")
	F.Data.DataTable.RemoveColumn("dtOper","Diff2")
	'====================================================================
	
	'Modified by TDjohan - BEGIN - 01/31/2022
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtAll.RowCount--,1)
'		V.Local.sJob.Set(V.DataTable.dtAll(V.Local.iCnt).JOB!FieldVal)
'		V.Local.sSuffix.Set(V.DataTable.dtAll(V.Local.iCnt).SUFFIX!FieldVal)
'		f.Intrinsic.String.Build("JOB='{0}' AND SUFFIX='{1}'",v.Local.sJob,v.Local.sSuffix,v.Local.sSearch)
'		f.Data.DataTable.Select("JobOp",v.Local.sSearch,v.local.sret)
'		f.Intrinsic.Control.If(v.Local.sret.Trim,<>,"***NORETURN***")
'			F.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'			f.Intrinsic.Control.For(v.local.x,0,v.Local.sRet.UBound,1)
'				v.Local.sStep.Set(v.DataTable.JobOp(v.Local.sRet(v.Local.x)).JOBSTEPS!FIELDVALTRIM)
'				
''				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"TASK")
''					v.Local.sStep.Set(v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM)
''				f.Intrinsic.Control.EndIf
''				
''				f.Intrinsic.Control.If(v.Local.sStep.Trim,=,"~TASK")
''					f.Intrinsic.String.Concat("~",v.DataTable.jobOp(v.Local.sRet(v.Local.x)).DESCRIPTION!FIELDVALTRIM,v.Local.sStep)
''				f.Intrinsic.Control.EndIf
'				
'				f.Intrinsic.String.Concat(v.Local.sJobsteps,v.Local.sStep," / ",v.Local.sJobSteps)
'			f.Intrinsic.Control.Next(v.Local.x)
'			F.Intrinsic.String.InstrRev(V.Local.sJobSteps,"/",V.Local.lret)
'			f.Intrinsic.Math.Sub(v.Local.lret,1,v.Local.lret)
'			f.Intrinsic.String.Left(v.Local.sJobSteps,v.Local.lret,v.Local.sJobSteps)
'			f.Intrinsic.String.Replace(v.Local.sJobSteps,"~",v.Local.sMark,v.Local.sJobSteps)
'		f.Intrinsic.Control.Else
'			v.Local.sJobSteps.Set("")
'		f.Intrinsic.Control.EndIf

'		f.Data.DataTable.SetValue("dtAll",v.Local.iCnt,"JobSteps",v.Local.sJobSteps)
''		f.Intrinsic.Control.CallSub(setOperData,"OperColumn",JobSteps,"OperValue",v.Local.sJobSteps)
'		
'		v.Local.sJobSteps.Set("")
'	f.Intrinsic.Control.Next(v.Local.iCnt)
'	
'	F.Data.Dictionary.CreateFromDataTable("dJobSteps","dtAll","JS","JobSteps")
'	F.Data.DataTable.FillFromDictionary("dtOper","dJobSteps","JS","JobSteps")
'	F.Data.Dictionary.Close("dJobSteps")
	
	'Get JobSteps
	f.Intrinsic.String.Build("Select Job + Suffix as JS, IF(Flag_Closed = 'Y', CONCAT('~#!',rtrim(Part)), rtrim(Part)) as JobStep from Job_Operations where Job >= '{0}' and LMO in ('L','O') and Seq < '995000' Order by Job,Suffix,Seq",v.Local.sMinJob,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("dtJobOperationSteps","CON",v.Local.sSQL,True)
	
	'Get the check mark sign
	f.Intrinsic.String.Concat(v.Caller.GasDir,"\GAB_6271_COMPLETION.txt",v.Local.sCMarkFile)
	f.Intrinsic.File.File2String(v.Local.sCMarkFile,v.Local.sMark)
	
	'1/Add empty column JSBuffer
	f.Data.DataTable.AddColumn("dtJobOperationSteps","JsBuffer","String","")
	'2/SetValueOnNextLine with key JS, the start of the group will be blank
	f.Data.DataTable.SetValueOnNextLine("dtJobOperationSteps","JS","JsBuffer","JS")
	'3/Based on blank start of the group, create an expression column
	f.Data.DataTable.AddExpressionColumn("dtJobOperationSteps","StepFormat","String","IIF(JsBuffer = '','@!@' + JS + '#$%' + JobStep,JobStep)")
	'4/Get string from step 3
	f.Data.DataTable.ColumnToString("dtJobOperationSteps","StepFormat",v.Local.sRet)
	'5/Replace with delimiter " / "
	f.Intrinsic.String.Replace(v.Local.sRet,"*!*"," / ",v.Local.sRet)
	f.Intrinsic.String.Replace(v.Local.sRet," / @!@","@!@",v.Local.sRet)
	f.Intrinsic.String.Replace(v.Local.sRet,"~#!",v.Local.sMark,v.Local.sRet)
	'6/Create final table dtSteps
	f.Data.DataTable.CreateFromString("dtJobSteps",v.Local.sRet,"JS*!*JobSteps","String*!*String","#$%","@!@",True)
	f.Data.DataTable.DeleteRow("dtJobSteps",0)
	'Delete dtJobOperationSteps
	f.Data.DataTable.Close("dtJobOperationSteps")
	'Match the JobSteps to the dtAll and dtOper based on Job+Suffix (JS)
	f.Data.Dictionary.CreateFromDataTable("dJobSteps","dtJobSteps","JS","JobSteps")
	f.Data.Dictionary.SetDefaultReturn("dJobSteps","")
	f.Data.DataTable.FillFromDictionary("dtAll","dJobSteps","JS","JobSteps")
	f.Data.DataTable.FillFromDictionary("dtOper","dJobSteps","JS","JobSteps")
	f.Data.Dictionary.Close("dJobSteps")
	'Delete dtJobSteps
	f.Data.DataTable.Close("dtJobSteps")
	'Modified by TDjohan - END - 01/31/2022
	
	'Fill Job Status for Outside Process Tab
	f.Data.Dictionary.createfromdatatable("dJobStatus","dtAll","JS","JobStatus")
	f.Data.Dictionary.SetDefaultReturn("dJobStatus","")
	f.Data.DataTable.FillFromDictionary("dtAllM","dJobStatus","JS","JobStatus")
	f.Data.DataTable.FillFromDictionary("dtAllO","dJobStatus","JS","JobStatus")
	f.Data.Dictionary.Close("dJobStatus")
	
	'Remove unnecessary columns
	f.Data.DataTable.RemoveColumn("dtAll","TODAYS_DATE")
	f.Data.DataTable.RemoveColumn("dtAll","DATE_DUE_NEW")
	f.Data.DataTable.RemoveColumn("dtAll","REMAINING_HRS")
	f.Data.DataTable.RemoveColumn("dtAll","TOT_HRS_REM_NO_FLOAT")
	
'	f.Data.DataView.Create("dtAll","dvAll")
'	F.Data.DataView.ToDataTable("dtAll","dvAll","dtAll2",True)

	'Doc control for part
'	F.Data.DataTable.SetValue("dtAll2",-1,"PrtDocCntrl","DCS-OFF")
'	F.Data.Dictionary.CreateFromSQL("dDCC","con","select DISTINCT rtrim(A.ID) AS Part, 'DCS-ON' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030'")
'	F.Data.Dictionary.CreateFromSQL("dDCC","con","select DISTINCT rtrim(A.ID) AS Part, 'O' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030'")
	F.Data.Dictionary.CreateFromSQL("dDCC","con","select rtrim(A.ID) AS Part, 'O' As DCC from LINK_DATA A INNER JOIN ATG_DOC_ASSOC B ON CONVERT(A.LINK_ID, SQL_INTEGER) = B.LINK_ID where TYPE = '00030' GROUP BY Part, DCC")
'	F.Data.Dictionary.SetDefaultReturn("dDCC","DCS-OFF")
	F.Data.Dictionary.SetDefaultReturn("dDCC","X")
	F.Data.DataTable.FillFromDictionary("dtAll","dDCC","Part","PrtDocCntrl")
'	F.Data.DataTable.FillFromDictionary("dtAll2","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtAllM","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtAllO","dDCC","Part","PrtDocCntrl")
	F.Data.DataTable.FillFromDictionary("dtOper","dDCC","Part","PrtDocCntrl")
	F.Data.Dictionary.Close("dDCC")
	
	'Get Inventory Extra Text
	F.Data.Dictionary.CreateFromSQL("dInvExtraText","con","Select RTrim(PART) As PART,RTrim(TEXT) AS TEXT From V_INV_EXTRA_TEXT Order By PART;")
	F.Data.Dictionary.SetDefaultReturn("dInvExtraText","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dInvExtraText","MatPart","INV_EXTRA_TEXT")
	F.Data.DataTable.FillFromDictionary("dtAllO","dInvExtraText","MatPart","INV_EXTRA_TEXT")
	F.Data.Dictionary.Close("dInvExtraText")
	
	'Get Vendor Currency
	F.Data.Dictionary.CreateFromSQL("dVendorCurrency","CON","Select RTrim(Vendor) As Vendor,RTrim(Default_Currency) From V_VENDOR_INTL Where RTRIM(Vendor) <> '' Order By Vendor;")
'	F.Data.Dictionary.SetDefaultReturn("dVendorCurrency","")
	F.Data.Dictionary.SetDefaultReturn("dVendorCurrency",V.Global.sComCurr)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendorCurrency","Vendor","VendorCurrency")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendorCurrency","Vendor","VendorCurrency")
	F.Data.Dictionary.Close("dVendorCurrency")
	
	'Vendor Master
	F.Data.Dictionary.CreateFromSQL("dVend","con","Select RTRIM(VENDOR) AS 'Vendor', RTRIM(NAME_VENDOR) as 'VendorName' From V_VENDOR_MASTER where RTRIM(VENDOR) <>'';")
	F.Data.Dictionary.SetDefaultReturn("dVend","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVend","Vendor","VendorName")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVend","Vendor","VendorName")
	F.Data.Dictionary.Close("dVend")

	'Vendor Quote
'	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select DISTINCT RTRIM(H.PART) AS Part, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.VENDOR, H.SEQ, H.LEAD_TIME")
'	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select DISTINCT RTRIM(H.PART) AS Part, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost, H.PUR_UM, CAST(H.CONVERSION AS NUMERIC(18,5)) AS CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.VENDOR, H.SEQ, H.LEAD_TIME, H.PUR_UM, H.CONVERSION")
'	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select DISTINCT RTRIM(H.PART) AS Part, H.PART AS PartWoTrim, RTRIM(H.PART_DESC) AS PART_DESC, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost, H.PUR_UM, H.CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.PART_DESC, H.VENDOR, H.SEQ, H.LEAD_TIME, H.PUR_UM, H.CONVERSION")
	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select RTRIM(H.PART) AS Part, H.PART AS PartWoTrim, RTRIM(H.PART_DESC) AS PART_DESC, RTRIM(H.VENDOR) AS Vendor, RTRIM(H.SEQ) AS Seq, H.LEAD_TIME As LEAD_TIME, MIN(CAST(IF(H.UM_SELECTED = 'I', H.CONVERSION * L.UNIT_PRICE, L.UNIT_PRICE) AS NUMERIC(18,6))) AS Cost, H.PUR_UM, H.CONVERSION from VEND_QTE_HEADER H INNER JOIN VEND_QTE_LINES L ON H.PART = L.PART AND H.SEQ = L.SEQ INNER JOIN (select C.PART, C.VENDOR, MAX(C.QUOTE_DATE) AS QUOTE_DATE from VEND_QTE_HEADER C GROUP BY C.PART, C.VENDOR) AS D ON H.PART = D.PART AND H.VENDOR = D.VENDOR AND H.QUOTE_DATE = D.QUOTE_DATE GROUP BY H.PART, H.PART_DESC, H.VENDOR, H.SEQ, H.LEAD_TIME, H.PUR_UM, H.CONVERSION")
	F.Data.DataTable.AddColumn("dtVendorQuote","Exists","Boolean")
	F.Data.DataTable.AddExpressionColumn("dtVendorQuote","PartVendor","String","[Part]+'*!*'+[Vendor]")
	F.Data.DataTable.AddExpressionColumn("dtVendorQuote","PartVendorOutsideService","String","[PartWoTrim]+'*!*'+[PART_DESC]+'*!*'+[Vendor]")
	'Set the value of Exists column to True
	F.Data.DataTable.SetValue("dtVendorQuote",-1,"Exists",True)
	
	'Create dictionary Vendor Quote Cost
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteCost","dtVendorQuote","PartVendor","Cost")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteCost",0.000000)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteCost","PartVendor","COST")
	F.Data.Dictionary.Close("dVendQuoteCost")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteCost","dtVendorQuote","PartVendorOutsideService","Cost")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteCost",0.000000)
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteCost","PartVendorOutsideService","COST")
	F.Data.Dictionary.Close("dVendQuoteCost")
	
	'Create dictionary Vendor Quote Pur UM
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurUM","dtVendorQuote","PartVendor","PUR_UM")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurUM","")
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_PUR_UM","String")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuotePurUM","PartVendor","VEND_QTE_PUR_UM")
	'If the PO NO is blank then use the Vendor Quote Pur UM else use the Pur UM from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllM","FinalPurUM","String","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_UM <> '',VEND_QTE_PUR_UM,PURUM)")
	f.Data.DataTable.CopyColumn("dtAllM","FinalPurUM","PURUM")
	f.Data.DataTable.RemoveColumn("dtAllM","FinalPurUM")
	f.Data.DataTable.RemoveColumn("dtAllM","VEND_QTE_PUR_UM")
	F.Data.Dictionary.Close("dVendQuotePurUM")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurUM","dtVendorQuote","PartVendorOutsideService","PUR_UM")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurUM","")
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_PUR_UM","String")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuotePurUM","PartVendorOutsideService","VEND_QTE_PUR_UM")
	'If the PO NO is blank then use the Vendor Quote Pur UM else use the Pur UM from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllO","FinalPurUM","String","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_UM <> '',VEND_QTE_PUR_UM,PURUM)")
	f.Data.DataTable.CopyColumn("dtAllO","FinalPurUM","PURUM")
	f.Data.DataTable.RemoveColumn("dtAllO","FinalPurUM")
	f.Data.DataTable.RemoveColumn("dtAllO","VEND_QTE_PUR_UM")
	F.Data.Dictionary.Close("dVendQuotePurUM")
	
	'Create dictionary Vendor Quote Pur Conversion Factor
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurCnv","dtVendorQuote","PartVendor","CONVERSION")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurCnv",0.00000)
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_PUR_CNV","Float")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuotePurCnv","PartVendor","VEND_QTE_PUR_CNV")
	'If the PO NO is blank then use the Vendor Quote Pur Conversion else use the Pur Conversion from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllM","FinalPurCnv","Float","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_CNV <> 0.00000,VEND_QTE_PUR_CNV,PUR_CNV_FACTOR)")
	f.Data.DataTable.CopyColumn("dtAllM","FinalPurCnv","PUR_CNV_FACTOR")
	f.Data.DataTable.RemoveColumn("dtAllM","FinalPurCnv")
	f.Data.DataTable.RemoveColumn("dtAllM","VEND_QTE_PUR_CNV")
	F.Data.Dictionary.Close("dVendQuotePurCnv")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuotePurCnv","dtVendorQuote","PartVendorOutsideService","CONVERSION")
	F.Data.Dictionary.SetDefaultReturn("dVendQuotePurCnv",0.00000)
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_PUR_CNV","Float")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuotePurCnv","PartVendorOutsideService","VEND_QTE_PUR_CNV")
	'If the PO NO is blank then use the Vendor Quote Pur Conversion else use the Pur Conversion from PO Line
	f.Data.DataTable.AddExpressionColumn("dtAllO","FinalPurCnv","Float","IIF(PURCHASE_ORDER = '' AND VEND_QTE_PUR_CNV <> 0.00000,VEND_QTE_PUR_CNV,PUR_CNV_FACTOR)")
	f.Data.DataTable.CopyColumn("dtAllO","FinalPurCnv","PUR_CNV_FACTOR")
	f.Data.DataTable.RemoveColumn("dtAllO","FinalPurCnv")
	f.Data.DataTable.RemoveColumn("dtAllO","VEND_QTE_PUR_CNV")
	F.Data.Dictionary.Close("dVendQuotePurCnv")
	
	'Create dictionary Vendor Quote Sequence
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteSeq","dtVendorQuote","PartVendor","Seq")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteSeq","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteSeq","PartVendor","VendorQuoteSeq")
	F.Data.Dictionary.Close("dVendQuoteSeq")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteSeq","dtVendorQuote","PartVendorOutsideService","Seq")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteSeq","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteSeq","PartVendorOutsideService","VendorQuoteSeq")
	F.Data.Dictionary.Close("dVendQuoteSeq")
	
	'Create dictionary Vendor Quote Sequence
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteSeq","dtVendorQuote","PartVendor","Seq")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteSeq","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteSeq","PartVendor","VendorQuoteSeq")
	F.Data.Dictionary.Close("dVendQuoteSeq")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteSeq","dtVendorQuote","PartVendorOutsideService","Seq")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteSeq","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteSeq","PartVendorOutsideService","VendorQuoteSeq")
	F.Data.Dictionary.Close("dVendQuoteSeq")
	
	'Add column to hold Lead Time from Vendor Quote
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_LEAD_TIME","Long")
	F.Data.DataTable.AddColumn("dtAllM","VEND_QTE_EXISTS","Boolean")
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_LEAD_TIME","Long")
	F.Data.DataTable.AddColumn("dtAllO","VEND_QTE_EXISTS","Boolean")
	
	'Create dictionary Vendor Quote Exists
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteExists","dtVendorQuote","PartVendor","Exists")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteExists",False)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteExists","PartVendor","VEND_QTE_EXISTS")
	F.Data.Dictionary.Close("dVendQuoteExists")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteExists","dtVendorQuote","PartVendorOutsideService","Exists")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteExists",False)
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteExists","PartVendorOutsideService","VEND_QTE_EXISTS")
	F.Data.Dictionary.Close("dVendQuoteExists")
	'Create dictionary Vendor Quote Lead Time
	'For dtAllM
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteLeadTime","dtVendorQuote","PartVendor","LEAD_TIME")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteLeadTime",0)
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteLeadTime","PartVendor","VEND_QTE_LEAD_TIME")
	F.Data.Dictionary.Close("dVendQuoteLeadTime")
	'For dtAllO
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteLeadTime","dtVendorQuote","PartVendorOutsideService","LEAD_TIME")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteLeadTime",0)
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteLeadTime","PartVendorOutsideService","VEND_QTE_LEAD_TIME")
	F.Data.Dictionary.Close("dVendQuoteLeadTime")
	'Close datatable
	F.Data.DataTable.Close("dtVendorQuote")
	'Create Expression Column for LEAD_TIME  
	F.Data.DataTable.AddExpressionColumn("dtAllM","LEAD_TIME","Long","IIF(VEND_QTE_EXISTS and VEND_QTE_LEAD_TIME > 0, VEND_QTE_LEAD_TIME, MATL_LEAD_TIME)")

	'Create Expression Column 
	'For dtAllM
	F.Data.DataTable.AddExpressionColumn("dtAllM","PartVendorQuoteSeq","String","[PartVendor]+'*!*'+[VendorQuoteSeq]")
	'Create DataTable
	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select RTRIM(PART) + '*!*' + RTRIM(VENDOR) + '*!*' + RTRIM(SEQ) AS PartVendorQuoteSeq, RTRIM(MFG_PART_NO) AS MfgPart, RTRIM(MFG_NAME) AS MfgName from V_VEND_QTE_HEADER")
	'Create dictionary Vendor Quote Mfg Part
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteMfg","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Create dictionary Vendor Quote Mfg Name
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllM","dVendQuoteMfg","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Close datatable
	F.Data.DataTable.Close("dtVendorQuote")
	'Remove Expression Column
	F.Data.DataTable.RemoveColumn("dtAllM","PartVendorQuoteSeq")
	
	'For dtAllO
	F.Data.DataTable.AddExpressionColumn("dtAllO","PartVendorQuoteSeq","String","[PartVendorOutsideService]+'*!*'+[VendorQuoteSeq]")
	'Create DataTable
	F.Data.DataTable.CreateFromSQL("dtVendorQuote","con","select PART + '*!*' + RTRIM(PART_DESC) + '*!*' + RTRIM(VENDOR) + '*!*' + RTRIM(SEQ) AS PartVendorQuoteSeq, RTRIM(MFG_PART_NO) AS MfgPart, RTRIM(MFG_NAME) AS MfgName from V_VEND_QTE_HEADER")
	'Create dictionary Vendor Quote Mfg Part
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteMfg","PartVendorQuoteSeq","MfgPart")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Create dictionary Vendor Quote Mfg Name
	F.Data.Dictionary.CreateFromDataTable("dVendQuoteMfg","dtVendorQuote","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.SetDefaultReturn("dVendQuoteMfg","")
	F.Data.DataTable.FillFromDictionary("dtAllO","dVendQuoteMfg","PartVendorQuoteSeq","MfgName")
	F.Data.Dictionary.Close("dVendQuoteMfg")
	'Close datatable
	F.Data.DataTable.Close("dtVendorQuote")
	'Remove Expression Column
	F.Data.DataTable.RemoveColumn("dtAllO","PartVendorQuoteSeq")
	
	'Added by TDjohan - BEGIN (04/01/2022)
	'Last Purchase Cost
	'Add new LastPurchaseCost & VendorQuoteCost Columns to dtAllM & dtAllO
	F.Data.DataTable.AddColumn("dtAllM","VendorQuoteCost","Float",0.00)
	F.Data.DataTable.AddColumn("dtAllO","VendorQuoteCost","Float",0.00)
	F.Data.DataTable.AddColumn("dtAllM","LastPurchaseCost","Float",0.00)
	F.Data.DataTable.AddColumn("dtAllO","LastPurchaseCost","Float",0.00)
	'VendorQuoteCost is already retrieved into COST column, so make a copy the value of COST column to VendorQuoteCost column
	F.Data.DataTable.CopyColumn("dtAllM","COST","VendorQuoteCost")
	F.Data.DataTable.CopyColumn("dtAllO","COST","VendorQuoteCost")
	'Create Dictionary for Last Purchase Cost
	'For dtAllM
'	F.Data.Dictionary.CreateFromSQL("dPOHistoryCost","con","select RTRIM(A.PART) AS Part, A.COST AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' ORDER BY A.PART;") 
	f.Intrinsic.String.Build("select RTRIM(A.PART)+'*!*'+RTRIM(A.VENDOR)+'*!*'+RTRIM(A.UM_INVENTORY), IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' ORDER BY A.PART;",v.Global.sComCurr,v.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("dPOHistoryCost","con",v.Local.sSQL) 
	F.Data.Dictionary.SetDefaultReturn("dPOHistoryCost",0.00)
	F.Data.DataTable.AddExpressionColumn("dtAllM","PartVendorPurUM","String","[MATPART]+'*!*'+[VENDOR]+'*!*'+[PURUM]")
	F.Data.DataTable.FillFromDictionary("dtAllM","dPOHistoryCost","PartVendorPurUM","LastPurchaseCost")
	F.Data.Dictionary.Close("dPOHistoryCost")
	F.Data.DataTable.RemoveColumn("dtAllM","PartVendorPurUM")
	'For dtAllO
	f.Intrinsic.String.Build("select A.PART+'*!*'+RTRIM(A.DESCRIPTION)+'*!*'+RTRIM(A.VENDOR)+'*!*'+RTRIM(A.UM_INVENTORY), IF(A.EXCH_CURR = '{0}' OR RTRIM(A.EXCH_CURR) = '', A.COST, A.EXCH_COST) AS LastPurchaseCost from PO_HISTORY A INNER JOIN (select PART, MAX(RIGHT(DATE_PO,2)+LEFT(DATE_PO,2)+SUBSTRING(DATE_PO,3,2)+PURCHASE_ORDER+PO_LINE) AS PO_DATE FROM PO_HISTORY GROUP BY PART) B ON A.PART = B.PART AND RIGHT(A.DATE_PO,2)+LEFT(A.DATE_PO,2)+SUBSTRING(A.DATE_PO,3,2)+A.PURCHASE_ORDER+A.PO_LINE = B.PO_DATE where A.QTY_RECEIVED = 0 and A.QTY_REJECT = 0 and A.QTY_ALT_RECV = 0 and A.QTY_RECD_NOT_INSP = 0 and A.RECEIVER_NO = '' AND SUBSTRING(A.PART,17,1) = '*' ORDER BY A.PART;",v.Global.sComCurr,v.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("dPOHistoryCost","con",v.Local.sSQL) 
	F.Data.Dictionary.SetDefaultReturn("dPOHistoryCost",0.00)
	F.Data.DataTable.AddExpressionColumn("dtAllO","PartVendorPurUM","String","[OutsideServicePart]+'*!*'+TRIM([DESCR])+'*!*'+TRIM([VENDOR])+'*!*'+TRIM([PURUM])")
	F.Data.DataTable.FillFromDictionary("dtAllO","dPOHistoryCost","PartVendorPurUM","LastPurchaseCost")
	F.Data.Dictionary.Close("dPOHistoryCost")
	F.Data.DataTable.RemoveColumn("dtAllO","PartVendorPurUM")
	
	'Set the Purch Cost with this hierarchy
	'1. Use Vendor Quote Cost if a Vendor Quote exists
	'2. Use Last Purchase Cost
	'3. Use Burden Cost on WO Sequence
	F.Data.DataTable.AddExpressionColumn("dtAllM","ExprMaterialCost","Float","IIF(VEND_QTE_EXISTS, VendorQuoteCost, IIF(LastPurchaseCost > 0, LastPurchaseCost, BURDEN))")
	F.Data.DataTable.AddExpressionColumn("dtAllO","ExprMaterialCost","Float","IIF(VEND_QTE_EXISTS, VendorQuoteCost, IIF(LastPurchaseCost > 0, LastPurchaseCost, BURDEN))")
	
	'Copy the ExprMaterialCost into COST column
	F.Data.DataTable.CopyColumn("dtAllM","ExprMaterialCost","COST")
	F.Data.DataTable.CopyColumn("dtAllO","ExprMaterialCost","COST")
		
	'Remove the Columns
	F.Data.DataTable.RemoveColumn("dtAllM","ExprMaterialCost")
	F.Data.DataTable.RemoveColumn("dtAllM","VendorQuoteCost")
	F.Data.DataTable.RemoveColumn("dtAllM","LastPurchaseCost")
	F.Data.DataTable.RemoveColumn("dtAllO","ExprMaterialCost")
	F.Data.DataTable.RemoveColumn("dtAllO","VendorQuoteCost")
	F.Data.DataTable.RemoveColumn("dtAllO","LastPurchaseCost")
	'Added by TDjohan - END (04/01/2022)
	
	'Added by TDjohan - BEGIN (04/01/2022)
	'Add Expression Column 'Extension'
'	F.Data.DataTable.AddExpressionColumn("dtAllM","EXTENSION","Float","COST*PCSTOPROD")
'	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PCSTOPROD")
'	F.Data.DataTable.AddExpressionColumn("dtAllM","EXTENSION","Float","COST*PUR_QTY")
'	F.Data.DataTable.AddExpressionColumn("dtAllO","EXTENSION","Float","COST*PUR_QTY")
	'Added by TDjohan - END (04/01/2022)
	
	'Getting Est Material Cost
	F.Data.Dictionary.CreateFromSQL("dEstMaterialCost","con","select CONCAT(JOB,SUFFIX) AS JS, SUM(DOLLARS_ESTIMATED) AS EstMaterialCost from V_JOB_OPERATIONS where LMO = 'M' group by JOB, SUFFIX;")
	F.Data.Dictionary.SetDefaultReturn("dEstMaterialCost",0.00)
	F.Data.DataTable.FillFromDictionary("dtAll","dEstMaterialCost","JS","EST_AMT_MATERIAL")
	F.Data.Dictionary.Close("dEstMaterialCost")
	
	'Getting Est Total Cost
	F.Data.Dictionary.CreateFromSQL("dEstTotalCost","con","select CONCAT(JOB,SUFFIX) AS JS, SUM(DOLLARS_ESTIMATED) AS EstMaterialCost from V_JOB_OPERATIONS where LMO <> 'Z' and LMO <> 'C' group by JOB, SUFFIX;")
	F.Data.Dictionary.SetDefaultReturn("dEstTotalCost",0.00)
	F.Data.DataTable.FillFromDictionary("dtAll","dEstTotalCost","JS","EST_TOTALCOST")
	F.Data.Dictionary.Close("dEstTotalCost")
	
	'Calculate Order Required Date
	F.Intrinsic.Control.If(V.DataTable.dtLineDueLeadTime.Exists)
		F.Data.DataTable.Close("dtLineDueLeadTime")
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Create("dtAllM","dvLineDueLeadTime")
	F.Data.DataView.ToDataTableDistinct("dtAllM","dvLineDueLeadTime","dtLineDueLeadTime","LINEDUE*!*LEAD_TIME",True)
	F.Data.Datatable.AddColumn("dtLineDueLeadTime","ORDER_REQD_DATE","Date")
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtLineDueLeadTime.RowCount--,1)
		F.Intrinsic.String.DateString(V.DataTable.dtLineDueLeadTime(V.Local.iCnt).LINEDUE!FieldVal,v.Local.sTempDate)
		F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"YYYYMMDD",V.Local.dTempDate)
		F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtLineDueLeadTime(V.Local.iCnt).LEAD_TIME!FieldVal,V.Local.iWorkDayMask,V.Local.dTempDate)
		F.Data.DataTable.SetValue("dtLineDueLeadTime",V.Local.iCnt,"ORDER_REQD_DATE",V.Local.dTempDate)
	F.Intrinsic.Control.Next(V.Local.iCnt)
		
	F.Data.Datatable.AddExpressionColumn("dtLineDueLeadTime","LINE_DUE_LEAD_TIME","String","[LINEDUE]+'*!*'+[LEAD_TIME]")
	F.Data.Dictionary.CreateFromDataTable("dOrderReqdDate","dtLineDueLeadTime","LINE_DUE_LEAD_TIME","ORDER_REQD_DATE")
	
	F.Data.Datatable.AddExpressionColumn("dtAllM","LINE_DUE_LEAD_TIME","String","[LINEDUE]+'*!*'+[LEAD_TIME]")
	F.Data.DataTable.FillFromDictionary("dtAllM","dOrderReqdDate","LINE_DUE_LEAD_TIME","ORDER_REQD_DATE")
	
	F.Data.Dictionary.Close("dOrderReqdDate")
	F.Data.DataTable.RemoveColumn("dtAllM","LINE_DUE_LEAD_TIME")
	F.Intrinsic.Control.If(V.DataTable.dtLineDueLeadTime.Exists)
		F.Data.DataTable.Close("dtLineDueLeadTime")
	F.Intrinsic.Control.EndIf
	
'	F.Data.Dictionary.CreateFromSQL("dTruncatedMean","con","select RTRIM(A.PART) AS 'MatPart', CONVERT(ROUND((SUM(QTY_USAGE)-MAX(A.QTY_USAGE)-MIN(A.QTY_USAGE))/10,0), SQL_INTEGER) AS USAGE_TRUNCATED_MEAN FROM (select PART, 1 AS MTH, QTY_USAGE_MO_01 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 2 AS MTH, QTY_USAGE_MO_02 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 3 AS MTH, QTY_USAGE_MO_03 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 4 AS MTH, QTY_USAGE_MO_04 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 5 AS MTH, QTY_USAGE_MO_05 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 6 AS MTH, QTY_USAGE_MO_06 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 7 AS MTH, QTY_USAGE_MO_07 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 8 AS MTH, QTY_USAGE_MO_08 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 9 AS MTH, QTY_USAGE_MO_09 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 10 AS MTH, QTY_USAGE_MO_10 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 11 AS MTH, QTY_USAGE_MO_11 AS QTY_USAGE FROM V_INVENTORY_MSTR union ALL select PART, 12 AS MTH, QTY_USAGE_MO_12 AS QTY_USAGE FROM V_INVENTORY_MSTR) AS A GROUP BY A.PART ORDER BY A.PART;")
	F.Data.Dictionary.CreateFromSQL("dTruncatedMean","con","SELECT RTRIM(PART) AS 'MatPart', CONVERT(ROUND((SUM(CASE MTH WHEN 1 THEN QTY_USAGE_MO_01 WHEN 2 THEN QTY_USAGE_MO_02 WHEN 3 THEN QTY_USAGE_MO_03 WHEN 4 THEN QTY_USAGE_MO_04 WHEN 5 THEN QTY_USAGE_MO_05 WHEN 6 THEN QTY_USAGE_MO_06 WHEN 7 THEN QTY_USAGE_MO_07 WHEN 8 THEN QTY_USAGE_MO_08 WHEN 9 THEN QTY_USAGE_MO_09 WHEN 10 THEN QTY_USAGE_MO_10 WHEN 11 THEN QTY_USAGE_MO_11 WHEN 12 THEN QTY_USAGE_MO_12 END) - MAX(CASE MTH WHEN 1 THEN QTY_USAGE_MO_01 WHEN 2 THEN QTY_USAGE_MO_02 WHEN 3 THEN QTY_USAGE_MO_03 WHEN 4 THEN QTY_USAGE_MO_04 WHEN 5 THEN QTY_USAGE_MO_05 WHEN 6 THEN QTY_USAGE_MO_06 WHEN 7 THEN QTY_USAGE_MO_07 WHEN 8 THEN QTY_USAGE_MO_08 WHEN 9 THEN QTY_USAGE_MO_09 WHEN 10 THEN QTY_USAGE_MO_10 WHEN 11 THEN QTY_USAGE_MO_11 WHEN 12 THEN QTY_USAGE_MO_12 END) - MIN(CASE MTH WHEN 1 THEN QTY_USAGE_MO_01 WHEN 2 THEN QTY_USAGE_MO_02 WHEN 3 THEN QTY_USAGE_MO_03 WHEN 4 THEN QTY_USAGE_MO_04 WHEN 5 THEN QTY_USAGE_MO_05 WHEN 6 THEN QTY_USAGE_MO_06 WHEN 7 THEN QTY_USAGE_MO_07 WHEN 8 THEN QTY_USAGE_MO_08 WHEN 9 THEN QTY_USAGE_MO_09 WHEN 10 THEN QTY_USAGE_MO_10 WHEN 11 THEN QTY_USAGE_MO_11 WHEN 12 THEN QTY_USAGE_MO_12 END)) / 10, 0), SQL_INTEGER) AS USAGE_TRUNCATED_MEAN FROM INVENTORY_MSTR CROSS JOIN (SELECT 1 AS MTH UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12) AS Months GROUP BY PART ORDER BY PART;")
	F.Data.Dictionary.SetDefaultReturn("dTruncatedMean",0)
	F.Data.DataTable.FillFromDictionary("dtAllM","dTruncatedMean","MatPart","TRUNCATED_MEAN")
	F.Data.Dictionary.Close("dTruncatedMean")
	
	'MaterialManage Status
	F.Data.DataTable.AddExpressionColumn("dtAllM","StockStatus","String","IIF([QTY_ONHAND] >= [PCSTOPROD],'In Stock',IIF([PURCHASE_ORDER] <> '','On Order','Out of Stock'))")
	F.Data.DataTable.CopyColumn("dtAllM","StockStatus","MaterialManage")
	F.Data.DataTable.RemoveColumn("dtAllM","StockStatus")
	
	'Set row ID for dtAllM and dtAllO
	f.Data.DataTable.SetSeries("dtAllM","MyRowID",0,1)
	f.Data.DataTable.SetSeries("dtAllO","MyRowID",0,1)
	
'	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtAllM.RowCount--,1)
'		V.Local.sTempDate.Set(V.DataTable.dtAllM(V.Local.iCnt).LINEDUE!FieldVal)
'		F.Intrinsic.Date.ConvertDString(V.Local.sTempDate,"MM/DD/YYYY",V.Local.dTempDate)
'		F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dTempDate,V.DataTable.dtAllM(V.Local.iCnt).LEAD_TIME!FieldVal,V.Local.iWorkDayMask,V.Local.dTempDate)
'		F.Data.DataTable.SetValue("dtAllM",V.Local.iCnt,"ORDER_REQD_DATE",V.Local.dTempDate)
'	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	'Check DataTable: dtOper, dtAllO, dtAllM, dtChildMat, dtChildLabr, dtChildOuts whether there are WOs that do not exist in dtAll.
	'Remove the WOs if they exist
	'Add temp column to dtAll, dtOper, dtAllO, dtAllM, dtChildMat, dtChildLabr, dtChildOuts
	F.Data.DataTable.AddColumn("dtAll","WOExists","Boolean",True)
	F.Data.DataTable.AddColumn("dtOper","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtAllO","WOExists","Boolean")
	F.Data.DataTable.AddColumn("dtAllM","WOExists","Boolean")
'	F.Data.DataTable.AddColumn("dtChildMat","WOExists","Boolean")
'	F.Data.DataTable.AddColumn("dtChildLabr","WOExists","Boolean")
'	F.Data.DataTable.AddColumn("dtChildOuts","WOExists","Boolean")
	'Create Dictionary
	F.Data.Dictionary.CreateFromDataTable("dictWO","dtAll","JS","WOExists")
	F.Data.Dictionary.SetDefaultReturn("dictWO",False)
	'Fill the DataTable from Dictionary
	F.Data.DataTable.FillFromDictionary("dtOper","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtAllO","dictWO","JS","WOExists")
	F.Data.DataTable.FillFromDictionary("dtAllM","dictWO","JS","WOExists")
'	F.Data.DataTable.FillFromDictionary("dtChildMat","dictWO","JS","WOExists")
'	F.Data.DataTable.FillFromDictionary("dtChildLabr","dictWO","JS","WOExists")
'	F.Data.DataTable.FillFromDictionary("dtChildOuts","dictWO","JS","WOExists")
	'Close Dictionary
'	F.Data.Dictionary.Close("dictWO")
	'Create temporary DataView
	F.Data.DataView.Create("dtOper","dvOperRemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtAllO","dvAllORemoveWO",22,"WOExists = True","")
	F.Data.DataView.Create("dtAllM","dvAllMRemoveWO",22,"WOExists = True","")
'	F.Data.DataView.Create("dtChildMat","dvChildMatRemoveWO",22,"WOExists = True","")
'	F.Data.DataView.Create("dtChildLabr","dvChildLabrRemoveWO",22,"WOExists = True","")
'	F.Data.DataView.Create("dtChildOuts","dvChildOutsRemoveWO",22,"WOExists = True","")
	'Create datatable from DataView
	F.Data.DataView.ToDataTable("dtOper","dvOperRemoveWO","dtOperRemoveWO",True)
	F.Data.DataView.ToDataTable("dtAllO","dvAllORemoveWO","dtAllORemoveWO",True)
	F.Data.DataView.ToDataTable("dtAllM","dvAllMRemoveWO","dtAllMRemoveWO",True)
'	F.Data.DataView.ToDataTable("dtChildMat","dvChildMatRemoveWO","dtChildMatRemoveWO",True)
'	F.Data.DataView.ToDataTable("dtChildLabr","dvChildLabrRemoveWO","dtChildLabrRemoveWO",True)
'	F.Data.DataView.ToDataTable("dtChildOuts","dvChildOutsRemoveWO","dtChildOutsRemoveWO",True)
	'Remove columns
'	F.Data.DataTable.RemoveColumn("dtAll","WOExists")
	F.Data.DataTable.RemoveColumn("dtOperRemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtAllORemoveWO","WOExists")
	F.Data.DataTable.RemoveColumn("dtAllMRemoveWO","WOExists")
'	F.Data.DataTable.RemoveColumn("dtChildMatRemoveWO","WOExists")
'	F.Data.DataTable.RemoveColumn("dtChildLabrRemoveWO","WOExists")
'	F.Data.DataTable.RemoveColumn("dtChildOutsRemoveWO","WOExists")
	'Delete Rows from DataTable
	F.Data.DataTable.DeleteRow("dtOper")
	F.Data.DataTable.DeleteRow("dtAllO")
	F.Data.DataTable.DeleteRow("dtAllM")
'	F.Data.DataTable.DeleteRow("dtChildMat")
'	F.Data.DataTable.DeleteRow("dtChildLabr")
'	F.Data.DataTable.DeleteRow("dtChildOuts")
	'Merge the DataTable
	F.Data.DataTable.Merge("dtOperRemoveWO","dtOper",True,1)
	F.Data.DataTable.Merge("dtAllORemoveWO","dtAllO",True,1)
	F.Data.DataTable.Merge("dtAllMRemoveWO","dtAllM",True,1)
'	F.Data.DataTable.Merge("dtChildMatRemoveWO","dtChildMat",True,1)
'	F.Data.DataTable.Merge("dtChildLabrRemoveWO","dtChildLabr",True,1)
'	F.Data.DataTable.Merge("dtChildOutsRemoveWO","dtChildOuts",True,1)
	'Delete DataTable
	F.Data.DataTable.Close("dtOperRemoveWO")
	F.Data.DataTable.Close("dtAllORemoveWO")
	F.Data.DataTable.Close("dtAllMRemoveWO")
'	F.Data.DataTable.Close("dtChildMatRemoveWO")
'	F.Data.DataTable.Close("dtChildLabrRemoveWO")
'	F.Data.DataTable.Close("dtChildOutsRemoveWO")
	'Delete WOExists column
	F.Data.DataTable.RemoveColumn("dtAll","WOExists")
'	F.Data.DataTable.RemoveColumn("dtOper","WOExists")
'	F.Data.DataTable.RemoveColumn("dtAllO","WOExists")
'	F.Data.DataTable.RemoveColumn("dtAllM","WOExists")
	
	'Save to XML 
	f.Intrinsic.String.Build("{0}\GAB_6271_dtOper_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtOper",0,True,V.Local.sFile)
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllO_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtAllO",0,True,V.Local.sFile)
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllM_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtAllM",0,True,V.Local.sFile)
	
	'Close DataTable
	F.Data.DataTable.Close("dtOper")
	F.Data.DataTable.Close("dtAllO")
	F.Data.DataTable.Close("dtAllM")
	
	'Getting Material, Labor, and Outiside for Work Order in dtAll
	f.Intrinsic.Control.If(v.DataTable.dtChildMat.Exists)
		f.Data.DataTable.Close("dtChildMat")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildMatMisc.Exists)
		f.Data.DataTable.Close("dtChildMatMisc")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildLabr.Exists)
		f.Data.DataTable.Close("dtChildLabr")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.dtChildOuts.Exists)
		f.Data.DataTable.Close("dtChildOuts")
	f.Intrinsic.Control.EndIf	
	
	'Materials
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,RTRIM(E.VENDOR) AS VENDOR,E.PURCHASE_ORDER,LEFT(E.RECORD_NO,3) AS LINE,IF(E.DATE_DUE_LINE = '1900-1-1',NULL,E.DATE_DUE_LINE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_PO_LINES E ON A.JOB = E.JOB AND A.SUFFIX = E.SUFFIX AND A.SEQ = E.SEQUENCE LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
	v.Local.sSQL.Set("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',D.AMT_COST,A.HOURS_ESTIMATED AS PCSTOPROD,A.HOURS_ACTUAL AS PCSCOMPL, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM', RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM JOB_OPERATIONS A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ NOT IN ('995000','998000') AND LEFT(A.JOB,1)<>'Z' AND RTRIM(A.PART) <> '' ORDER BY SEQ1")
	f.Data.DataTable.CreateFromSQL("dtChildMat","con",v.Local.sSQL,true)
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,NULL AS DATE_DUE_LINE,'' AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT', SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM',RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'M' AND A.SEQ = '995000' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, C.CUSTOMER, C.SALES_ORDER, A.FLAG_CLOSED, VWSC.TEXT ORDER BY SEQ1")
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT', SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM',RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, C.CUSTOMER, C.SALES_ORDER, A.FLAG_CLOSED ORDER BY SEQ1")
	v.Local.sSQL.Set("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label', rtrim(IF(INV_LXR.DISPLAY_PART is null, SUBSTRING(A.PART, 1, 20), INV_LXR.DISPLAY_PART)) AS 'PART', A.JOB AS JOB1,A.SUFFIX AS SFX1,A.SEQ AS SEQ1,COALESCE(A.PART,'') AS PART1,'' As DISPLAY_PART1,C.LOCATION AS LOCATION1,A.DESCRIPTION AS DESCR,'' AS VENDOR,'' AS PURCHASE_ORDER,'' AS LINE,CONVERT('1900-01-01', SQL_DATE) AS DATE_DUE_LINE,'' AS OPCODE,'' as 'SEQ_COMMENT', SUM(A.AMOUNT_LABOR) AS AMT_COST, 0 AS PCSTOPROD, SUM(A.HOURS_WORKED) AS PCSCOMPL,0 AS PCSREMAIN,IF(D.QTY_ONHAND IS NULL,'0.0000',D.QTY_ONHAND) AS QTY_ONHAND,IF(D.QTY_ONORDER_PO IS NULL,'0.0000',D.QTY_ONORDER_PO) AS QTY_ONORDER_PO,IF(D.QTY_ONORDER_WO IS NULL,'0.0000',D.QTY_ONORDER_WO) AS QTY_ONORDER_WO,IF(D.QTY_REQUIRED IS NULL,'0.0000',D.QTY_REQUIRED) AS QTY_REQUIRED, IF(RTRIM(D.UM_PURCHASING)='',D.UM_INVENTORY,D.UM_PURCHASING) AS 'PURUM', D.UM_INVENTORY AS 'INVUM',RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' from V_JOB_DETAIL A LEFT JOIN INV_LXR ON A.PART = INV_LXR.GSS_PART LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN INVENTORY_MSTR D ON A.PART = D.PART AND C.LOCATION = D.LOCATION WHERE A.LMO = 'M' AND A.SEQ = '995000' AND LEFT(A.JOB,1)<>'Z' GROUP BY A.JOB, A.SUFFIX, A.SEQ, A.PART, A.DESCRIPTION, C.LOCATION, QTY_ONHAND, QTY_ONORDER_PO, QTY_ONORDER_WO, QTY_REQUIRED, PURUM, INVUM, C.CUSTOMER, C.SALES_ORDER, A.FLAG_CLOSED ORDER BY SEQ1")
	f.Data.DataTable.CreateFromSQL("dtChildMatMisc","con",v.Local.sSQL,true)
	
	'Fill some data from Dictionary
	'Job Seq Comments
	f.Data.Dictionary.CreateFromSQL("dJobSeqComments","con","select CONCAT(CONCAT(WO,WO_SUFFIX),WO_SEQ) AS JSS, COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT' from V_WO_SEQ_COMMENTS WHERE COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') <> ''")
	f.Data.Dictionary.SetDefaultReturn("dJobSeqComments","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dJobSeqComments","JSS","SEQ_COMMENT")
	f.Data.DataTable.FillFromDictionary("dtChildMatMisc","dJobSeqComments","JSS","SEQ_COMMENT")
	
	'Purchase Order Information
	f.Data.DataTable.CreateFromSQL("dtPOInfo","con","select CONCAT(CONCAT(JOB,SUFFIX),SEQUENCE) AS JSS, RTRIM(VENDOR) AS VENDOR, PURCHASE_ORDER, LEFT(RECORD_NO,3) AS LINE, DATE_DUE_LINE from V_PO_LINES WHERE JOB <> ''")
	f.Data.DataView.Create("dtPOInfo","dvPOInfo",22,"","JSS")
	'PO No
	f.Data.Dictionary.CreateFromDataView("dPONo","dtPOInfo","dvPOInfo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.SetDefaultReturn("dPONo","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dPONo","JSS","PURCHASE_ORDER")
	f.Data.Dictionary.Close("dPONo")
	'PO Line
	f.Data.Dictionary.CreateFromDataView("dPOLine","dtPOInfo","dvPOInfo","JSS","LINE")
	f.Data.Dictionary.SetDefaultReturn("dPOLine","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dPOLine","JSS","LINE")
	f.Data.Dictionary.Close("dPOLine")
	'Vendor
	f.Data.Dictionary.CreateFromDataView("dVendor","dtPOInfo","dvPOInfo","JSS","VENDOR")
	f.Data.Dictionary.SetDefaultReturn("dVendor","")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dVendor","JSS","VENDOR")
	f.Data.Dictionary.Close("dVendor")
	'Date Due Line
	f.Data.Dictionary.CreateFromDataView("dDateDueLine","dtPOInfo","dvPOInfo","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.SetDefaultReturn("dDateDueLine","1900-01-01")
	f.Data.DataTable.FillFromDictionary("dtChildMat","dDateDueLine","JSS","DATE_DUE_LINE")
	f.Data.Dictionary.Close("dDateDueLine")
	'Close DataTable & DataView
	F.Data.DataView.Close("dtPOInfo","dvPOInfo")
	F.Data.DataTable.Close("dtPOInfo")
	
	'Merge both datatable
	f.Data.DataTable.Merge("dtChildMatMisc","dtChildMat",true,2)	
	
	F.Data.DataTable.Close("dtChildMatMisc")
	
	F.Data.DataTable.AddColumn("dtChildMat","WOExists","Boolean")
	F.Data.DataTable.FillFromDictionary("dtChildMat","dictWO","JS","WOExists")
	F.Data.DataView.Create("dtChildMat","dvChildMatRemoveWO",22,"WOExists = True","")
	F.Data.DataView.ToDataTable("dtChildMat","dvChildMatRemoveWO","dtChildMatRemoveWO",True)
	F.Data.DataTable.RemoveColumn("dtChildMatRemoveWO","WOExists")
	F.Data.DataTable.DeleteRow("dtChildMat")
	F.Data.DataTable.Merge("dtChildMatRemoveWO","dtChildMat",True,1)
	F.Data.DataTable.Close("dtChildMatRemoveWO")
	'Remove WOExists column
	F.Data.DataTable.RemoveColumn("dtChildMat","WOExists")
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildMat_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtChildMat",0,True,V.Local.sFile)
	
	F.Data.DataTable.Close("dtChildMat")
	
	'Labour
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.SEQ AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM, RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ NOT IN ('996000','998500') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'	v.Local.sSQL.Set("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM, RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ NOT IN ('996000','998500') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	v.Local.sSQL.Set("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,A.PART AS SEQRES,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,A.CODE_SORT_OPER,A.OVERLAP,A.FACTOR_WORKCENTER AS NOMACH,A.OPERATION AS OPCODE,'' as 'SEQ_COMMENT',A.HOURS_ESTIMATED AS EST_HRS, A.HOURS_ACTUAL AS ACT_HRS, (A.HOURS_ESTIMATED - A.HOURS_ACTUAL) AS REM_HRS, A.UNITS_OPEN AS ORDER_QTY, A.UNITS_COMPLETE AS COMPL_QTY, (A.UNITS_OPEN - A.UNITS_COMPLETE) AS PCS_REM, RTRIM(C.CUSTOMER) AS CUSTOMER, RTRIM(C.SALES_ORDER) AS SALES_ORDER, IF(C.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_JOB_HEADER C ON A.JOB = C.JOB AND A.SUFFIX = C.SUFFIX WHERE A.LMO = 'L' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ NOT IN ('996000','998500') ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	f.Data.DataTable.CreateFromSQL("dtChildLabr","con",v.Local.sSQL,true)
	
	'Fill some data from Dictionary
	'Job Seq Comments
	f.Data.DataTable.FillFromDictionary("dtChildLabr","dJobSeqComments","JSS","SEQ_COMMENT")
	
	F.Data.DataTable.AddColumn("dtChildLabr","WOExists","Boolean")
	F.Data.DataTable.FillFromDictionary("dtChildLabr","dictWO","JS","WOExists")
	F.Data.DataView.Create("dtChildLabr","dvChildLabrRemoveWO",22,"WOExists = True","")
	F.Data.DataView.ToDataTable("dtChildLabr","dvChildLabrRemoveWO","dtChildLabrRemoveWO",True)
	F.Data.DataTable.RemoveColumn("dtChildLabrRemoveWO","WOExists")
	F.Data.DataTable.DeleteRow("dtChildLabr")
	F.Data.DataTable.Merge("dtChildLabrRemoveWO","dtChildLabr",True,1)
	F.Data.DataTable.Close("dtChildLabrRemoveWO")
	'Remove WOExists column
	F.Data.DataTable.RemoveColumn("dtChildLabr","WOExists")
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildLabr_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtChildLabr",0,True,V.Local.sFile)
	
	F.Data.DataTable.Close("dtChildLabr")
	
	'Outside
'	v.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,COALESCE(RTRIM(CONVERT(REPLACE(REPLACE(REPLACE(VWSC.TEXT,Char(10),' '),Char(13),' '),Char(9),' '),SQL_VARCHAR,1000)),'') as 'SEQ_COMMENT',RTRIM(E.CUSTOMER) AS CUSTOMER, RTRIM(E.SALES_ORDER) AS SALES_ORDER, IF(E.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX LEFT JOIN V_WO_SEQ_COMMENTS VWSC ON VWSC.WO = A.JOB AND VWSC.WO_SUFFIX = A.SUFFIX AND VWSC.WO_SEQ = A.SEQ WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
'	v.Local.sSQL.SET("SELECT DISTINCT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT',RTRIM(E.CUSTOMER) AS CUSTOMER, RTRIM(E.SALES_ORDER) AS SALES_ORDER, IF(E.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	v.Local.sSQL.SET("SELECT CONCAT(A.JOB,A.SUFFIX) AS 'JS', CONCAT(A.JOB,A.SUFFIX) AS JBSF,CONCAT(CONCAT(A.JOB,A.SUFFIX),A.SEQ) AS JSS,CONCAT(A.JOB,CONCAT('-',A.SUFFIX)) AS 'WO_Label',A.JOB,A.SUFFIX,A.SEQ,C.NAME_VENDOR,A.DESCRIPTION AS DESCR,IF(A.DATE_START = '1900-1-1',NULL,A.DATE_START) AS STARTDATE,IF(A.DATE_DUE = '1900-1-1',NULL,A.DATE_DUE) AS DUEDATE,IF(A.DATE_COMPLETED = '1900-1-1',NULL,A.DATE_COMPLETED) AS COMPLDATE,D.PURCHASE_ORDER AS PURCHASE_ORDER2,LEFT(D.RECORD_NO,3) AS LINE2,'' as 'SEQ_COMMENT',RTRIM(E.CUSTOMER) AS CUSTOMER, RTRIM(E.SALES_ORDER) AS SALES_ORDER, IF(E.DATE_CLOSED='1900-01-01','N','Y') AS 'JobClosed', A.FLAG_CLOSED AS 'SeqClosed' FROM V_JOB_OPERATIONS A LEFT JOIN V_VENDOR_MASTER C ON A.OPERATION = C.VENDOR LEFT JOIN V_PO_LINES D ON A.JOB = D.JOB AND A.SUFFIX = D.SUFFIX AND A.SEQ = D.SEQUENCE LEFT JOIN V_JOB_HEADER E ON E.JOB = A.JOB AND E.SUFFIX = A.SUFFIX WHERE A.LMO = 'O' AND LEFT(A.JOB,1)<>'Z' AND A.SEQ <> '997000' ORDER BY A.JOB,A.SUFFIX,A.SEQ;")
	f.Data.DataTable.CreateFromSQL("dtChildOuts","con",v.Local.sSQL,true)
	
	'Fill some data from Dictionary
	'Job Seq Comments
	f.Data.DataTable.FillFromDictionary("dtChildOuts","dJobSeqComments","JSS","SEQ_COMMENT")
	
	F.Data.DataTable.AddColumn("dtChildOuts","WOExists","Boolean")
	F.Data.DataTable.FillFromDictionary("dtChildOuts","dictWO","JS","WOExists")
	F.Data.DataView.Create("dtChildOuts","dvChildOutsRemoveWO",22,"WOExists = True","")
	F.Data.DataView.ToDataTable("dtChildOuts","dvChildOutsRemoveWO","dtChildOutsRemoveWO",True)
	F.Data.DataTable.RemoveColumn("dtChildOutsRemoveWO","WOExists")
	F.Data.DataTable.DeleteRow("dtChildOuts")
	F.Data.DataTable.Merge("dtChildOutsRemoveWO","dtChildOuts",True,1)
	F.Data.DataTable.Close("dtChildOutsRemoveWO")
	'Remove WOExists column
	F.Data.DataTable.RemoveColumn("dtChildOuts","WOExists")

	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildOuts_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtChildOuts",0,True,V.Local.sFile)
	
	F.Data.DataTable.Close("dtChildOuts")
	
	'Close dJobSeqComments
	f.Data.Dictionary.Close("dJobSeqComments")
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAll_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFile)
	F.Data.DataTable.SaveToXML("dtAll",0,True,V.Local.sFile)
	
	F.Data.DataTable.Close("dtAll")
	
	'Rename all the temp XML files 
	f.Intrinsic.String.Build("{0}\GAB_6271_dtOper_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileTarget)
	F.Intrinsic.File.Exists(v.Local.sFileTarget,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(v.Local.sFileTarget)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtOper_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileSource)
	F.Intrinsic.File.Exists(v.Local.sFileSource,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.MoveFile(v.Local.sFileSource,v.Local.sFileTarget,v.Local.iRet)	
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllO_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileTarget)
	F.Intrinsic.File.Exists(v.Local.sFileTarget,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(v.Local.sFileTarget)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllO_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileSource)
	F.Intrinsic.File.Exists(v.Local.sFileSource,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.MoveFile(v.Local.sFileSource,v.Local.sFileTarget,v.Local.iRet)	
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllM_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileTarget)
	F.Intrinsic.File.Exists(v.Local.sFileTarget,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(v.Local.sFileTarget)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtAllM_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileSource)
	F.Intrinsic.File.Exists(v.Local.sFileSource,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.MoveFile(v.Local.sFileSource,v.Local.sFileTarget,v.Local.iRet)	
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildMat_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileTarget)
	F.Intrinsic.File.Exists(v.Local.sFileTarget,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(v.Local.sFileTarget)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildMat_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileSource)
	F.Intrinsic.File.Exists(v.Local.sFileSource,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.MoveFile(v.Local.sFileSource,v.Local.sFileTarget,v.Local.iRet)	
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildLabr_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileTarget)
	F.Intrinsic.File.Exists(v.Local.sFileTarget,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(v.Local.sFileTarget)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildLabr_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileSource)
	F.Intrinsic.File.Exists(v.Local.sFileSource,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.MoveFile(v.Local.sFileSource,v.Local.sFileTarget,v.Local.iRet)	
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildOuts_{1}.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileTarget)
	F.Intrinsic.File.Exists(v.Local.sFileTarget,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.DeleteFile(v.Local.sFileTarget)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}\GAB_6271_dtChildOuts_{1}_Temp.xml",v.Caller.GasDir,v.Caller.CompanyCode,v.Local.sFileSource)
	F.Intrinsic.File.Exists(v.Local.sFileSource,v.Local.bFileExists)
	F.Intrinsic.Control.If(v.Local.bFileExists)
		F.Intrinsic.File.MoveFile(v.Local.sFileSource,v.Local.sFileTarget,v.Local.iRet)	
	F.Intrinsic.Control.EndIf


f.Intrinsic.Control.Catch	
	f.Intrinsic.String.Left(v.Ambient.ErrorDescription.Trim,850,v.Local.sDescription)
	f.Intrinsic.String.Build("Insert into GAB_6271_Error (DateTimeOccur,Description) values (Now(),'{0} Sub: {1} {2}')",v.Ambient.ErrorNumber,v.Ambient.CurrentSubroutine,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!con.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry
Program.Sub.Load.End

Program.Sub.setOperData.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	v.Local.sDescription.Declare
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtOperIds.RowCount--,1)
		F.Data.DataTable.SetValue("dtOper",v.DataTable.dtOperIds(v.Local.i).RowID!fieldval,v.Args.OperColumn.Trim,v.Args.OperValue)
	f.Intrinsic.Control.Next(v.Local.i)
	
f.Intrinsic.Control.catch
	f.Intrinsic.String.Left(v.Ambient.ErrorDescription.Trim,850,v.Local.sDescription)
	f.Intrinsic.String.Build("Insert into GAB_6271_Error (DateTimeOccur,Description) values (Now(),'{0} Sub: {1} {2}')",v.Ambient.ErrorNumber,v.Ambient.CurrentSubroutine,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!con.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry
Program.Sub.setOperData.End

Program.Sub.setAllMData.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	v.Local.sDescription.Declare
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllMIds.RowCount--,1)
		F.Intrinsic.Control.If(Variable.Datatable.dtAllMIds(Variable.Local.i).RowID!fieldval,<>,"***NORETURN***")
			F.Data.DataTable.SetValue("dtAllM",v.DataTable.dtAllMIds(v.Local.i).RowID!fieldval,v.Args.MatlColumn.Trim,v.Args.MatlValue)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
f.Intrinsic.Control.catch
	f.Intrinsic.String.Left(v.Ambient.ErrorDescription.Trim,850,v.Local.sDescription)
	f.Intrinsic.String.Build("Insert into GAB_6271_Error (DateTimeOccur,Description) values (Now(),'{0} Sub: {1} {2}')",v.Ambient.ErrorNumber,v.Ambient.CurrentSubroutine,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!con.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry
Program.Sub.setAllMData.End

Program.Sub.setAllOData.Start
f.Intrinsic.Control.Try
	v.Local.i.Declare
	v.Local.sDescription.Declare
	
	f.Intrinsic.Control.For(v.Local.i,0,v.DataTable.dtAllOIds.RowCount--,1)
		F.Intrinsic.Control.If(Variable.Datatable.dtAllOIds(Variable.Local.i).RowID!fieldval,<>,"***NORETURN***")
			F.Data.DataTable.SetValue("dtAllO",v.DataTable.dtAllOIds(v.Local.i).RowID!fieldval,v.Args.OutsColumn.Trim,v.Args.OutsValue)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.i)
	
f.Intrinsic.Control.catch
	f.Intrinsic.String.Left(v.Ambient.ErrorDescription.Trim,850,v.Local.sDescription)
	f.Intrinsic.String.Build("Insert into GAB_6271_Error (DateTimeOccur,Description) values (Now(),'{0} Sub: {1} {2}')",v.Ambient.ErrorNumber,v.Ambient.CurrentSubroutine,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!con.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry
Program.Sub.setAllOData.End

Program.Sub.UpdateSalesOrderInfoOnJobHeader.Start
F.Intrinsic.Control.Try
	
	'Children Work Order do not have Sales Order & Sales Order Line information
	'Populate them from Parent Work Order
	F.ODBC.Connection!con.Execute("update JOB_HEADER set SALES_ORDER = A.SALES_ORDER, SALES_ORDER_LINE = A.SALES_ORDER_LINE from (select JOB, SUFFIX, PARENT_WO, PARENT_SUFFIX_PARENT, SALES_ORDER, SALES_ORDER_LINE from V_JOB_HEADER where SALES_ORDER NOT IN ('','0000000')) A where JOB_HEADER.JOB = A.JOB and JOB_HEADER.SALES_ORDER IN ('','0000000')")

f.Intrinsic.Control.catch
	f.Intrinsic.String.Left(v.Ambient.ErrorDescription.Trim,850,v.Local.sDescription)
	f.Intrinsic.String.Build("Insert into GAB_6271_Error (DateTimeOccur,Description) values (Now(),'{0} Sub: {1} {2}')",v.Ambient.ErrorNumber,v.Ambient.CurrentSubroutine,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!con.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry	
Program.Sub.UpdateSalesOrderInfoOnJobHeader.End

Program.Sub.Comments.Start
${$5$}$20.1.8693.27812$}$1
${$6$}$tdjohan$}$20231112211837895$}$8rAQhOSvlohpQhMDm1j544LwmwXnRbkh3pI2yZc3QUXjgagiQQbnavgOYRzBJp4Yf11Y4wgyQNo=
Program.Sub.Comments.End